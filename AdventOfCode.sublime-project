{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns":
			[
				"build",
				"lib",
				"release",
				".vs",
				"Debug",
				"engine/template",
				"data/Resources/Raw",
			],
			"file_exclude_patterns":
			[
				"*.sln",
				"*.rdbg",
				"*.cap",
				"*.opendb",
				"data/screenshot_*.png",
				"data/Resources/.git",
			],
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "build",
			"folder_exclude_patterns":
			[
				".vs",
			],
			"file_exclude_patterns":
			[
				"*.exp",
				"*.map",
				"*.obj",
				"RDa05096",
				"*.res",
				"*.js",
				"*.wasm",
				"*.wat",
				"*.html",
				"preprocessed_output.txt",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"AOC_ANSWER_CLICKED_STR_DISPLAY_TIME",
			"AOC_ARENA_PAGE_SIZE",
			"AOC_BTNS_MARGIN",
			"AOC_BTNS_PADDING",
			"AOC_BTN_INNER_PADDING_LEFTRIGHT",
			"AOC_BTN_INNER_PADDING_UP_DOWN",
			"AOC_BUTTONS_SCROLL_SPEED",
			"ASCII_TREE_CHILD_COUNT",
			"ASCII_TREE_FIRST_CHAR",
			"ATTR_PACKED",
			"AUDIO_OUT_GRAPH_HEIGHT",
			"AUDIO_OUT_GRAPH_LINE_GRAPH_SCALE",
			"AUDIO_OUT_GRAPH_MAX_SCALE",
			"AUDIO_OUT_GRAPH_PANNING_LAG",
			"AUDIO_OUT_GRAPH_SCALE_LAG",
			"AUDIO_OUT_GRAPH_SCROLL_SPEED",
			"AUDIO_OUT_GRAPH_WIDTH",
			"AllocAlignment_16Bytes",
			"AllocAlignment_4Bytes",
			"AllocAlignment_64Bytes",
			"AllocAlignment_8Bytes",
			"AllocAlignment_Max",
			"AllocAlignment_None",
			"Aoc2022_02_NumOptions",
			"Aoc2022_02_Paper",
			"Aoc2022_02_Result_Draw",
			"Aoc2022_02_Result_Lose",
			"Aoc2022_02_Result_NumOptions",
			"Aoc2022_02_Result_Win",
			"Aoc2022_02_Rock",
			"Aoc2022_02_Scissors",
			"AocSolution_2021_01",
			"AocSolution_2021_02",
			"AocSolution_2021_03",
			"AocSolution_2021_04",
			"AocSolution_2021_05",
			"AocSolution_2021_06",
			"AocSolution_2021_07",
			"AocSolution_2021_08",
			"AocSolution_2021_09",
			"AocSolution_2021_10",
			"AocSolution_2021_11",
			"AocSolution_2021_12",
			"AocSolution_2021_13",
			"AocSolution_2021_14",
			"AocSolution_2021_15",
			"AocSolution_2021_16",
			"AocSolution_2021_17",
			"AocSolution_2021_18",
			"AocSolution_2021_19",
			"AocSolution_2021_20",
			"AocSolution_2021_21",
			"AocSolution_2021_22",
			"AocSolution_2021_23",
			"AocSolution_2021_24",
			"AocSolution_2021_25",
			"AocSolution_2022_01",
			"AocSolution_2022_02",
			"AocSolution_2022_03",
			"AocSolution_2022_04",
			"AocSolution_2022_05",
			"AocSolution_2022_06",
			"AocSolution_2022_07",
			"AocSolution_2022_08",
			"AocSolution_2022_09",
			"AocSolution_2022_10",
			"AocSolution_2022_11",
			"AocSolution_2022_12",
			"AocSolution_2022_13",
			"AocSolution_2022_14",
			"AocSolution_2022_15",
			"AocSolution_2022_16",
			"AocSolution_2022_17",
			"AocSolution_2022_18",
			"AocSolution_2022_19",
			"AocSolution_2022_20",
			"AocSolution_2022_21",
			"AocSolution_2022_22",
			"AocSolution_2022_23",
			"AocSolution_2022_24",
			"AocSolution_2022_25",
			"AocSolution_First",
			"AocSolution_NumSolutions",
			"Aoc_2021_02_Instruction_Down",
			"Aoc_2021_02_Instruction_Forward",
			"Aoc_2021_02_Instruction_NumInstructions",
			"Aoc_2021_02_Instruction_Up",
			"AppStateChange_Change",
			"AppStateChange_None",
			"AppStateChange_NumTypes",
			"AppStateChange_Pop",
			"AppStateChange_Push",
			"AppState_AdventOfCode",
			"AppState_MainMenu",
			"AppState_None",
			"AppState_NumStates",
			"Axis_All2",
			"Axis_All3",
			"Axis_All4",
			"Axis_Count",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BEFORE_RESOURCES_LOAD_PERCENT",
			"BOLD_TOGGLE_CHAR",
			"Basis_Default",
			"Black",
			"Black_Value",
			"Box_Zero",
			"Boxi_Zero",
			"ButtonStyle_Bordered",
			"ButtonStyle_Default",
			"ButtonStyle_None",
			"ButtonStyle_NumStyles",
			"CHECKBOX_CHECK_ANIM_SPEED",
			"CHECKBOX_OUTLINE_THICKNESS",
			"CONFIRM_DIALOG_BTN_BORDER_COLOR",
			"CONFIRM_DIALOG_BTN_BORDER_THICKNESS",
			"CONFIRM_DIALOG_BTN_CORNER_RADIUS",
			"CONFIRM_DIALOG_BTN_INNER_MARGIN",
			"CONFIRM_DIALOG_BTN_MARGIN_BOTTOM",
			"CONFIRM_DIALOG_BTN_MARGIN_LEFTRIGHT",
			"CONFIRM_DIALOG_BTN_MIN_HEIGHT",
			"CONFIRM_DIALOG_BTN_NO_COLOR",
			"CONFIRM_DIALOG_BTN_PADDING",
			"CONFIRM_DIALOG_BTN_STYLE",
			"CONFIRM_DIALOG_BTN_TEXT_COLOR",
			"CONFIRM_DIALOG_BTN_YES_COLOR",
			"CONFIRM_DIALOG_CLOSE_ANIM_TIME",
			"CONFIRM_DIALOG_CONTENT_APPEAR_OPEN_PERCENT",
			"CONFIRM_DIALOG_CORNER_CIRCLE_MARGIN",
			"CONFIRM_DIALOG_CORNER_CIRCLE_OUTLINE_THICKNESS",
			"CONFIRM_DIALOG_CORNER_CIRCLE_RADIUS",
			"CONFIRM_DIALOG_MAX_NUM_BUTTONS",
			"CONFIRM_DIALOG_MAX_WIDTH",
			"CONFIRM_DIALOG_MIN_HEIGHT",
			"CONFIRM_DIALOG_MIN_WIDTH",
			"CONFIRM_DIALOG_OPEN_ANIM_TIME",
			"CONFIRM_DIALOG_OUTLINE_THICKNESS",
			"CONFIRM_DIALOG_TEXT_MARGIN_BOTTOM",
			"CONFIRM_DIALOG_TEXT_MARGIN_LEFTRIGHT",
			"CONFIRM_DIALOG_TEXT_MARGIN_TOP",
			"CONTROLLER_INDEX_ANY",
			"CONVEX_POLYGON2D_SHADER_SUPPORT",
			"CyclicFunc2D_Default",
			"CyclicFunc2D_NormalCosine",
			"CyclicFunc2D_NormalSaw",
			"CyclicFunc2D_NormalSine",
			"CyclicFunc2D_NormalSquare",
			"CyclicFunc2D_NormalTangent",
			"CyclicFuncType_Constant",
			"CyclicFuncType_Cosine",
			"CyclicFuncType_Custom",
			"CyclicFuncType_None",
			"CyclicFuncType_NumTypes",
			"CyclicFuncType_Saw",
			"CyclicFuncType_Sine",
			"CyclicFuncType_Square",
			"CyclicFuncType_Tangent",
			"CyclicFunc_Default",
			"CyclicFunc_NormalCosine",
			"CyclicFunc_NormalSaw",
			"CyclicFunc_NormalSine",
			"CyclicFunc_NormalSquare",
			"CyclicFunc_NormalTangent",
			"DBG_CONSOLE_AUTOCOMPLETE_ITEM_MARGIN",
			"DBG_CONSOLE_AUTOCOMPLETE_ITEM_PADDING",
			"DBG_CONSOLE_AUTOCOMPLETE_MAX_HEIGHT",
			"DBG_CONSOLE_AUTOCOMPLETE_OPEN_TIME",
			"DBG_CONSOLE_AUTOCOMPLETE_SCROLL_PAST",
			"DBG_CONSOLE_BUFFER_SIZE",
			"DBG_CONSOLE_BUILD_SPACE_SIZE",
			"DBG_CONSOLE_ELEM_MARGIN",
			"DBG_CONSOLE_FADE_IN_TIME",
			"DBG_CONSOLE_FILE_LINE_NUM_GUTTER_WIDTH",
			"DBG_CONSOLE_FILE_NAME_GUTTER_WIDTH",
			"DBG_CONSOLE_FULL_ALPHA_BTN_SIZE",
			"DBG_CONSOLE_FUNC_NAME_GUTTER_WIDTH",
			"DBG_CONSOLE_GUTTER_PADDING",
			"DBG_CONSOLE_GUTTER_WIDTH",
			"DBG_CONSOLE_ICON_SMALLER_AMOUNT",
			"DBG_CONSOLE_INPUT_BOX_HEIGHT",
			"DBG_CONSOLE_INPUT_HISTORY_LENGTH",
			"DBG_CONSOLE_INPUT_LABEL_STR",
			"DBG_CONSOLE_JUMP_TO_END_STR",
			"DBG_CONSOLE_LARGE_OPEN_AMOUNT",
			"DBG_CONSOLE_NORMAL_OPEN_AMOUNT",
			"DBG_CONSOLE_OPEN_AMOUNT_RATIO",
			"DBG_CONSOLE_OPEN_KEY",
			"DBG_CONSOLE_OPEN_TIME",
			"DBG_CONSOLE_OVERLAY_ALPHA",
			"DBG_CONSOLE_REFOCUS_STR",
			"DBG_CONSOLE_SCROLL_BAR_WIDTH",
			"DBG_CONSOLE_SCROLL_LAG",
			"DBG_CONSOLE_SCROLL_SPEED",
			"DBG_CONSOLE_TIME_GUTTER_WIDTH",
			"DBG_CONSOLE_TOGGLE_GUTTER_BTNS_SIZE",
			"DBG_CONSOLE_VIEW_PADDING",
			"DBG_FILEPATH_AND_FUNCNAME_SEP_CHAR",
			"DEBUG_COMMAND_DESCRIPTION_TRUNCATE_LIMIT",
			"DEBUG_COMMAND_MAX_NUM_ARGUMENTS",
			"DEBUG_OUTPUT_ENABLED",
			"DEBUG_OVERLAY_DUCK_PERCENT",
			"DEBUG_OVERLAY_HIDE_TOGGLE_BTNS_TIME",
			"DEBUG_OVERLAY_OPEN_ANIM_TIME",
			"DEBUG_OVERLAY_PIE_CHARTS_SIZE",
			"DEBUG_OVERLAY_TOGGLE_BTNS_SIZE",
			"DEBUG_OVERLAY_TOGGLE_KEY",
			"DEBUG_OVERLAY_TOGGLE_KEY_REQUIRES_SHIFT",
			"DEFAULT_PROCESS_LOG_FIFO_SIZE",
			"DEFAULT_UNDERLINE_OFFSET",
			"DEFAULT_UNDERLINE_THICKNESS",
			"DODECAHEDRON_DIHEDRAL_ANGLE32",
			"DODECAHEDRON_DIHEDRAL_ANGLE64",
			"DODECAHEDRON_NUM_EDGES",
			"DODECAHEDRON_NUM_FACES",
			"DODECAHEDRON_NUM_VERTICES",
			"DayOfWeek_Friday",
			"DayOfWeek_Monday",
			"DayOfWeek_NumDays",
			"DayOfWeek_Saturday",
			"DayOfWeek_Sunday",
			"DayOfWeek_Thursday",
			"DayOfWeek_Tuesday",
			"DayOfWeek_Wednesday",
			"DbgFlag_Inverted",
			"DbgFlag_New",
			"DbgFlag_PlatformLayer",
			"DbgFlag_TaskThread",
			"DbgFlag_UserInput",
			"DbgFlags_None",
			"DeserObjFileError_CouldntFindMaterialLibrary",
			"DeserObjFileError_EmptyFile",
			"DeserObjFileError_FaceVertIndexCountIsWrong",
			"DeserObjFileError_FacesBeforeMaterialSelect",
			"DeserObjFileError_FacesBeforeObjectStart",
			"DeserObjFileError_FloatParseFailure",
			"DeserObjFileError_IndexOutOfBounds",
			"DeserObjFileError_IntParseFailure",
			"DeserObjFileError_LinePieceCountIsWrong",
			"DeserObjFileError_MaterialAttribBeforeNew",
			"DeserObjFileError_None",
			"DeserObjFileError_NumErrors",
			"DeserObjFileError_UnknownMaterial",
			"Dir2Ex_All",
			"Dir2Ex_BottomLeft",
			"Dir2Ex_BottomRight",
			"Dir2Ex_Cardinal",
			"Dir2Ex_Count",
			"Dir2Ex_Diagonal",
			"Dir2Ex_Down",
			"Dir2Ex_Left",
			"Dir2Ex_None",
			"Dir2Ex_Right",
			"Dir2Ex_TopLeft",
			"Dir2Ex_TopRight",
			"Dir2Ex_Up",
			"Dir2_All",
			"Dir2_Count",
			"Dir2_Down",
			"Dir2_Left",
			"Dir2_None",
			"Dir2_Right",
			"Dir2_Up",
			"Dir3Ex_All",
			"Dir3Ex_Backward",
			"Dir3Ex_BottomLeftBack",
			"Dir3Ex_BottomLeftFront",
			"Dir3Ex_BottomRightBack",
			"Dir3Ex_BottomRightFront",
			"Dir3Ex_Cardinal",
			"Dir3Ex_Count",
			"Dir3Ex_Diagonal",
			"Dir3Ex_Down",
			"Dir3Ex_Forward",
			"Dir3Ex_Left",
			"Dir3Ex_None",
			"Dir3Ex_Right",
			"Dir3Ex_TopLeftBack",
			"Dir3Ex_TopLeftFront",
			"Dir3Ex_TopRightBack",
			"Dir3Ex_TopRightFront",
			"Dir3Ex_Up",
			"Dir3_All",
			"Dir3_Backward",
			"Dir3_Count",
			"Dir3_Down",
			"Dir3_Forward",
			"Dir3_Left",
			"Dir3_None",
			"Dir3_Right",
			"Dir3_Up",
			"ENGINE_LAYER",
			"ENGINE_VERSION_BUILD",
			"ENGINE_VERSION_MAJOR",
			"ENGINE_VERSION_MINOR",
			"ERROR_OUTPUT_ENABLED",
			"EXPORT",
			"EXTERN_C_END",
			"EXTERN_C_START",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_EarlyInOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_None",
			"EasingStyle_NumStyles",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"FNV_HASH_BASE_U64",
			"FNV_HASH_PRIME_U64",
			"FRAGMENT_VERTEX_DIVIDER_STR",
			"FREQUENCY_A0",
			"FREQUENCY_A1",
			"FREQUENCY_A2",
			"FREQUENCY_A3",
			"FREQUENCY_A4",
			"FREQUENCY_A5",
			"FREQUENCY_A6",
			"FREQUENCY_A7",
			"FREQUENCY_A8",
			"FREQUENCY_Ab0",
			"FREQUENCY_Ab1",
			"FREQUENCY_Ab2",
			"FREQUENCY_Ab3",
			"FREQUENCY_Ab4",
			"FREQUENCY_Ab5",
			"FREQUENCY_Ab6",
			"FREQUENCY_Ab7",
			"FREQUENCY_Ab8",
			"FREQUENCY_B0",
			"FREQUENCY_B1",
			"FREQUENCY_B2",
			"FREQUENCY_B3",
			"FREQUENCY_B4",
			"FREQUENCY_B5",
			"FREQUENCY_B6",
			"FREQUENCY_B7",
			"FREQUENCY_B8",
			"FREQUENCY_Bb0",
			"FREQUENCY_Bb1",
			"FREQUENCY_Bb2",
			"FREQUENCY_Bb3",
			"FREQUENCY_Bb4",
			"FREQUENCY_Bb5",
			"FREQUENCY_Bb6",
			"FREQUENCY_Bb7",
			"FREQUENCY_Bb8",
			"FREQUENCY_C0",
			"FREQUENCY_C1",
			"FREQUENCY_C2",
			"FREQUENCY_C3",
			"FREQUENCY_C4",
			"FREQUENCY_C5",
			"FREQUENCY_C6",
			"FREQUENCY_C7",
			"FREQUENCY_C8",
			"FREQUENCY_D0",
			"FREQUENCY_D1",
			"FREQUENCY_D2",
			"FREQUENCY_D3",
			"FREQUENCY_D4",
			"FREQUENCY_D5",
			"FREQUENCY_D6",
			"FREQUENCY_D7",
			"FREQUENCY_D8",
			"FREQUENCY_Db0",
			"FREQUENCY_Db1",
			"FREQUENCY_Db2",
			"FREQUENCY_Db3",
			"FREQUENCY_Db4",
			"FREQUENCY_Db5",
			"FREQUENCY_Db6",
			"FREQUENCY_Db7",
			"FREQUENCY_Db8",
			"FREQUENCY_E0",
			"FREQUENCY_E1",
			"FREQUENCY_E2",
			"FREQUENCY_E3",
			"FREQUENCY_E4",
			"FREQUENCY_E5",
			"FREQUENCY_E6",
			"FREQUENCY_E7",
			"FREQUENCY_E8",
			"FREQUENCY_Eb0",
			"FREQUENCY_Eb1",
			"FREQUENCY_Eb2",
			"FREQUENCY_Eb3",
			"FREQUENCY_Eb4",
			"FREQUENCY_Eb5",
			"FREQUENCY_Eb6",
			"FREQUENCY_Eb7",
			"FREQUENCY_Eb8",
			"FREQUENCY_F0",
			"FREQUENCY_F1",
			"FREQUENCY_F2",
			"FREQUENCY_F3",
			"FREQUENCY_F4",
			"FREQUENCY_F5",
			"FREQUENCY_F6",
			"FREQUENCY_F7",
			"FREQUENCY_F8",
			"FREQUENCY_G0",
			"FREQUENCY_G1",
			"FREQUENCY_G2",
			"FREQUENCY_G3",
			"FREQUENCY_G4",
			"FREQUENCY_G5",
			"FREQUENCY_G6",
			"FREQUENCY_G7",
			"FREQUENCY_G8",
			"FREQUENCY_Gb0",
			"FREQUENCY_Gb1",
			"FREQUENCY_Gb2",
			"FREQUENCY_Gb3",
			"FREQUENCY_Gb4",
			"FREQUENCY_Gb5",
			"FREQUENCY_Gb6",
			"FREQUENCY_Gb7",
			"FREQUENCY_Gb8",
			"FREQUENCY_MIDDLE_C",
			"FontBakeFlag_All",
			"FontBakeFlag_IsColored",
			"FontBakeFlag_IsScalable",
			"FontBakeFlag_IsSpriteFont",
			"FontBakeFlag_IsValid",
			"FontBakeFlag_None",
			"FontBakeFlag_NumFlags",
			"FontFaceFlag_All",
			"FontFaceFlag_BoldItalic",
			"FontFaceFlag_IsActive",
			"FontFaceFlag_IsBold",
			"FontFaceFlag_IsDefault",
			"FontFaceFlag_IsItalic",
			"FontFaceFlag_IsValid",
			"FontFaceFlag_None",
			"FontFaceFlag_NumFlags",
			"FrameBufferChannel_All",
			"FrameBufferChannel_Default",
			"FrameBufferChannel_Depth",
			"FrameBufferChannel_None",
			"FrameBufferChannel_Opacity",
			"FrameBufferChannel_Stencil",
			"FrameBufferError_ApiError",
			"FrameBufferError_None",
			"FrameBufferError_NumErrors",
			"FrameBufferError_OutTextureError",
			"FrameBufferError_TextureError",
			"FrameBufferError_UnsupportedApi",
			"GAME_ANTI_ALIASING_SAMPLES",
			"GAME_DBG_BINDINGS_FILE_NAME",
			"GAME_DEFAULT_MASTER_VOLUME",
			"GAME_DEFAULT_MUSIC_VOLUME",
			"GAME_DEFAULT_SOUNDS_VOLUME",
			"GAME_FOLLOW_SAVED_SETTING_RESOLUTION",
			"GAME_INITIAL_APP_STATE",
			"GAME_LOAD_PERCENT",
			"GAME_PERMANANT_MEM_SIZE",
			"GAME_SETTINGS_FILE_NAME",
			"GAME_TEMP_ARENA_SIZE",
			"GAME_THREAD_POOL_SIZE",
			"GAME_THREAD_TEMP_ARENA_SIZE",
			"GAME_THREAD_TEMP_NUM_MARKS",
			"GAME_VERSION_BUILD",
			"GAME_VERSION_MAJOR",
			"GAME_VERSION_MINOR",
			"GAME_WINDOW_ALWAYS_ON_TOP",
			"GAME_WINDOW_DEFAULT_RESOLUTION",
			"GAME_WINDOW_TITLE",
			"GIF_FRAMERATE",
			"GYLIB_ASSERTIONS_ENABLED",
			"GYLIB_USE_ASSERT_FAILURE_FUNC",
			"GY_CUSTOM_STD_LIB",
			"GY_MAX_FLOAT_PARSE_LENGTH",
			"GY_WASM_STD_LIB",
			"GameTask_Base",
			"GameTask_NumTypes",
			"GameTask_Test",
			"Grey1",
			"Grey10",
			"Grey10_Value",
			"Grey11",
			"Grey11_Value",
			"Grey12",
			"Grey12_Value",
			"Grey13",
			"Grey13_Value",
			"Grey14",
			"Grey14_Value",
			"Grey1_Value",
			"Grey2",
			"Grey2_Value",
			"Grey3",
			"Grey3_Value",
			"Grey4",
			"Grey4_Value",
			"Grey5",
			"Grey5_Value",
			"Grey6",
			"Grey6_Value",
			"Grey7",
			"Grey7_Value",
			"Grey8",
			"Grey8_Value",
			"Grey9",
			"Grey9_Value",
			"GyDbgLevel_Debug",
			"GyDbgLevel_Error",
			"GyDbgLevel_Info",
			"GyDbgLevel_Warning",
			"HEXAGON_INNER_ANGLE32",
			"HEXAGON_INNER_ANGLE64",
			"HEXAGON_INNER_ANGLE_DEGREES",
			"HEXAGON_NUM_EDGES",
			"HEXAGON_NUM_VERTICES",
			"HalfPi32",
			"HalfPi64",
			"IMPORT",
			"INFO_OUTPUT_ENABLED",
			"INPUT_DISP_CHAR_0_CODEPOINT",
			"INPUT_DISP_CHAR_0_STR",
			"INPUT_DISP_CHAR_1_CODEPOINT",
			"INPUT_DISP_CHAR_1_STR",
			"INPUT_DISP_CHAR_2_CODEPOINT",
			"INPUT_DISP_CHAR_2_STR",
			"INPUT_DISP_CHAR_3_CODEPOINT",
			"INPUT_DISP_CHAR_3_STR",
			"INPUT_DISP_CHAR_4_CODEPOINT",
			"INPUT_DISP_CHAR_4_STR",
			"INPUT_DISP_CHAR_5_CODEPOINT",
			"INPUT_DISP_CHAR_5_STR",
			"INPUT_DISP_CHAR_6_CODEPOINT",
			"INPUT_DISP_CHAR_6_STR",
			"INPUT_DISP_CHAR_7_CODEPOINT",
			"INPUT_DISP_CHAR_7_STR",
			"INPUT_DISP_CHAR_8_CODEPOINT",
			"INPUT_DISP_CHAR_8_STR",
			"INPUT_DISP_CHAR_9_CODEPOINT",
			"INPUT_DISP_CHAR_9_STR",
			"INPUT_DISP_CHAR_ALT_CODEPOINT",
			"INPUT_DISP_CHAR_ALT_STR",
			"INPUT_DISP_CHAR_A_CODEPOINT",
			"INPUT_DISP_CHAR_A_STR",
			"INPUT_DISP_CHAR_BACK_CODEPOINT",
			"INPUT_DISP_CHAR_BACK_STR",
			"INPUT_DISP_CHAR_BLANK_CODEPOINT",
			"INPUT_DISP_CHAR_BLANK_SEMI_WIDE_CODEPOINT",
			"INPUT_DISP_CHAR_BLANK_SEMI_WIDE_STR",
			"INPUT_DISP_CHAR_BLANK_SQUARE_CODEPOINT",
			"INPUT_DISP_CHAR_BLANK_SQUARE_LARGE_CODEPOINT",
			"INPUT_DISP_CHAR_BLANK_SQUARE_LARGE_STR",
			"INPUT_DISP_CHAR_BLANK_SQUARE_STR",
			"INPUT_DISP_CHAR_BLANK_STR",
			"INPUT_DISP_CHAR_BLANK_WIDE_CODEPOINT",
			"INPUT_DISP_CHAR_BLANK_WIDE_STR",
			"INPUT_DISP_CHAR_B_CODEPOINT",
			"INPUT_DISP_CHAR_B_STR",
			"INPUT_DISP_CHAR_CAPS_CODEPOINT",
			"INPUT_DISP_CHAR_CAPS_STR",
			"INPUT_DISP_CHAR_CLOSE_BRACKET_CODEPOINT",
			"INPUT_DISP_CHAR_CLOSE_BRACKET_STR",
			"INPUT_DISP_CHAR_COLON_CODEPOINT",
			"INPUT_DISP_CHAR_COLON_STR",
			"INPUT_DISP_CHAR_COMMA_CODEPOINT",
			"INPUT_DISP_CHAR_COMMA_STR",
			"INPUT_DISP_CHAR_CONTROL_CODEPOINT",
			"INPUT_DISP_CHAR_CONTROL_STR",
			"INPUT_DISP_CHAR_C_CODEPOINT",
			"INPUT_DISP_CHAR_C_STR",
			"INPUT_DISP_CHAR_DELETE_CODEPOINT",
			"INPUT_DISP_CHAR_DELETE_STR",
			"INPUT_DISP_CHAR_DOWN_CODEPOINT",
			"INPUT_DISP_CHAR_DOWN_STR",
			"INPUT_DISP_CHAR_D_CODEPOINT",
			"INPUT_DISP_CHAR_D_STR",
			"INPUT_DISP_CHAR_END_CODEPOINT",
			"INPUT_DISP_CHAR_END_STR",
			"INPUT_DISP_CHAR_ENTER_CODEPOINT",
			"INPUT_DISP_CHAR_ENTER_STR",
			"INPUT_DISP_CHAR_ESCAPE_CODEPOINT",
			"INPUT_DISP_CHAR_ESCAPE_STR",
			"INPUT_DISP_CHAR_E_CODEPOINT",
			"INPUT_DISP_CHAR_E_STR",
			"INPUT_DISP_CHAR_F10_CODEPOINT",
			"INPUT_DISP_CHAR_F10_STR",
			"INPUT_DISP_CHAR_F11_CODEPOINT",
			"INPUT_DISP_CHAR_F11_STR",
			"INPUT_DISP_CHAR_F12_CODEPOINT",
			"INPUT_DISP_CHAR_F12_STR",
			"INPUT_DISP_CHAR_F1_CODEPOINT",
			"INPUT_DISP_CHAR_F1_STR",
			"INPUT_DISP_CHAR_F2_CODEPOINT",
			"INPUT_DISP_CHAR_F2_STR",
			"INPUT_DISP_CHAR_F3_CODEPOINT",
			"INPUT_DISP_CHAR_F3_STR",
			"INPUT_DISP_CHAR_F4_CODEPOINT",
			"INPUT_DISP_CHAR_F4_STR",
			"INPUT_DISP_CHAR_F5_CODEPOINT",
			"INPUT_DISP_CHAR_F5_STR",
			"INPUT_DISP_CHAR_F6_CODEPOINT",
			"INPUT_DISP_CHAR_F6_STR",
			"INPUT_DISP_CHAR_F7_CODEPOINT",
			"INPUT_DISP_CHAR_F7_STR",
			"INPUT_DISP_CHAR_F8_CODEPOINT",
			"INPUT_DISP_CHAR_F8_STR",
			"INPUT_DISP_CHAR_F9_CODEPOINT",
			"INPUT_DISP_CHAR_F9_STR",
			"INPUT_DISP_CHAR_F_CODEPOINT",
			"INPUT_DISP_CHAR_F_STR",
			"INPUT_DISP_CHAR_G_CODEPOINT",
			"INPUT_DISP_CHAR_G_STR",
			"INPUT_DISP_CHAR_HOME_CODEPOINT",
			"INPUT_DISP_CHAR_HOME_STR",
			"INPUT_DISP_CHAR_H_CODEPOINT",
			"INPUT_DISP_CHAR_H_STR",
			"INPUT_DISP_CHAR_INSERT_CODEPOINT",
			"INPUT_DISP_CHAR_INSERT_STR",
			"INPUT_DISP_CHAR_I_CODEPOINT",
			"INPUT_DISP_CHAR_I_STR",
			"INPUT_DISP_CHAR_J_CODEPOINT",
			"INPUT_DISP_CHAR_J_STR",
			"INPUT_DISP_CHAR_K_CODEPOINT",
			"INPUT_DISP_CHAR_K_STR",
			"INPUT_DISP_CHAR_LEFT_CODEPOINT",
			"INPUT_DISP_CHAR_LEFT_STR",
			"INPUT_DISP_CHAR_L_CODEPOINT",
			"INPUT_DISP_CHAR_L_STR",
			"INPUT_DISP_CHAR_MINUS_CODEPOINT",
			"INPUT_DISP_CHAR_MINUS_STR",
			"INPUT_DISP_CHAR_MOUSE_BLANK_CODEPOINT",
			"INPUT_DISP_CHAR_MOUSE_BLANK_STR",
			"INPUT_DISP_CHAR_MOUSE_LEFT_CODEPOINT",
			"INPUT_DISP_CHAR_MOUSE_LEFT_STR",
			"INPUT_DISP_CHAR_MOUSE_MIDDLE_CODEPOINT",
			"INPUT_DISP_CHAR_MOUSE_MIDDLE_STR",
			"INPUT_DISP_CHAR_MOUSE_RIGHT_CODEPOINT",
			"INPUT_DISP_CHAR_MOUSE_RIGHT_STR",
			"INPUT_DISP_CHAR_M_CODEPOINT",
			"INPUT_DISP_CHAR_M_STR",
			"INPUT_DISP_CHAR_NT_A_CODEPOINT",
			"INPUT_DISP_CHAR_NT_A_STR",
			"INPUT_DISP_CHAR_NT_B_CODEPOINT",
			"INPUT_DISP_CHAR_NT_B_STR",
			"INPUT_DISP_CHAR_NT_DOWN_CODEPOINT",
			"INPUT_DISP_CHAR_NT_DOWN_STR",
			"INPUT_DISP_CHAR_NT_DPAD_CODEPOINT",
			"INPUT_DISP_CHAR_NT_DPAD_STR",
			"INPUT_DISP_CHAR_NT_LEFT_CODEPOINT",
			"INPUT_DISP_CHAR_NT_LEFT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_NT_LEFT_STICK_STR",
			"INPUT_DISP_CHAR_NT_LEFT_STR",
			"INPUT_DISP_CHAR_NT_L_CODEPOINT",
			"INPUT_DISP_CHAR_NT_L_STR",
			"INPUT_DISP_CHAR_NT_MINUS_CODEPOINT",
			"INPUT_DISP_CHAR_NT_MINUS_STR",
			"INPUT_DISP_CHAR_NT_PLUS_CODEPOINT",
			"INPUT_DISP_CHAR_NT_PLUS_STR",
			"INPUT_DISP_CHAR_NT_RIGHT_CODEPOINT",
			"INPUT_DISP_CHAR_NT_RIGHT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_NT_RIGHT_STICK_STR",
			"INPUT_DISP_CHAR_NT_RIGHT_STR",
			"INPUT_DISP_CHAR_NT_R_CODEPOINT",
			"INPUT_DISP_CHAR_NT_R_STR",
			"INPUT_DISP_CHAR_NT_UNKNOWN_CODEPOINT",
			"INPUT_DISP_CHAR_NT_UNKNOWN_STR",
			"INPUT_DISP_CHAR_NT_UP_CODEPOINT",
			"INPUT_DISP_CHAR_NT_UP_STR",
			"INPUT_DISP_CHAR_NT_X_CODEPOINT",
			"INPUT_DISP_CHAR_NT_X_STR",
			"INPUT_DISP_CHAR_NT_Y_CODEPOINT",
			"INPUT_DISP_CHAR_NT_Y_STR",
			"INPUT_DISP_CHAR_NT_ZL_CODEPOINT",
			"INPUT_DISP_CHAR_NT_ZL_STR",
			"INPUT_DISP_CHAR_NT_ZR_CODEPOINT",
			"INPUT_DISP_CHAR_NT_ZR_STR",
			"INPUT_DISP_CHAR_N_CODEPOINT",
			"INPUT_DISP_CHAR_N_STR",
			"INPUT_DISP_CHAR_OPEN_BRACKET_CODEPOINT",
			"INPUT_DISP_CHAR_OPEN_BRACKET_STR",
			"INPUT_DISP_CHAR_O_CODEPOINT",
			"INPUT_DISP_CHAR_O_STR",
			"INPUT_DISP_CHAR_PAGE_DOWN_CODEPOINT",
			"INPUT_DISP_CHAR_PAGE_DOWN_STR",
			"INPUT_DISP_CHAR_PAGE_UP_CODEPOINT",
			"INPUT_DISP_CHAR_PAGE_UP_STR",
			"INPUT_DISP_CHAR_PERIOD_CODEPOINT",
			"INPUT_DISP_CHAR_PERIOD_STR",
			"INPUT_DISP_CHAR_PIPE_CODEPOINT",
			"INPUT_DISP_CHAR_PIPE_STR",
			"INPUT_DISP_CHAR_PLUS_CODEPOINT",
			"INPUT_DISP_CHAR_PLUS_STR",
			"INPUT_DISP_CHAR_PS_CIRCLE_CODEPOINT",
			"INPUT_DISP_CHAR_PS_CIRCLE_STR",
			"INPUT_DISP_CHAR_PS_CROSS_CODEPOINT",
			"INPUT_DISP_CHAR_PS_CROSS_STR",
			"INPUT_DISP_CHAR_PS_DOWN_CODEPOINT",
			"INPUT_DISP_CHAR_PS_DOWN_STR",
			"INPUT_DISP_CHAR_PS_DPAD_CODEPOINT",
			"INPUT_DISP_CHAR_PS_DPAD_STR",
			"INPUT_DISP_CHAR_PS_L1_CODEPOINT",
			"INPUT_DISP_CHAR_PS_L1_STR",
			"INPUT_DISP_CHAR_PS_L2_CODEPOINT",
			"INPUT_DISP_CHAR_PS_L2_STR",
			"INPUT_DISP_CHAR_PS_L3_CODEPOINT",
			"INPUT_DISP_CHAR_PS_L3_STR",
			"INPUT_DISP_CHAR_PS_LEFT_CODEPOINT",
			"INPUT_DISP_CHAR_PS_LEFT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_PS_LEFT_STICK_STR",
			"INPUT_DISP_CHAR_PS_LEFT_STR",
			"INPUT_DISP_CHAR_PS_OPTIONS_CODEPOINT",
			"INPUT_DISP_CHAR_PS_OPTIONS_STR",
			"INPUT_DISP_CHAR_PS_R1_CODEPOINT",
			"INPUT_DISP_CHAR_PS_R1_STR",
			"INPUT_DISP_CHAR_PS_R2_CODEPOINT",
			"INPUT_DISP_CHAR_PS_R2_STR",
			"INPUT_DISP_CHAR_PS_R3_CODEPOINT",
			"INPUT_DISP_CHAR_PS_R3_STR",
			"INPUT_DISP_CHAR_PS_RIGHT_CODEPOINT",
			"INPUT_DISP_CHAR_PS_RIGHT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_PS_RIGHT_STICK_STR",
			"INPUT_DISP_CHAR_PS_RIGHT_STR",
			"INPUT_DISP_CHAR_PS_SHARE_CODEPOINT",
			"INPUT_DISP_CHAR_PS_SHARE_STR",
			"INPUT_DISP_CHAR_PS_SQUARE_CODEPOINT",
			"INPUT_DISP_CHAR_PS_SQUARE_STR",
			"INPUT_DISP_CHAR_PS_TRIANGLE_CODEPOINT",
			"INPUT_DISP_CHAR_PS_TRIANGLE_STR",
			"INPUT_DISP_CHAR_PS_UNKNOWN_CODEPOINT",
			"INPUT_DISP_CHAR_PS_UNKNOWN_STR",
			"INPUT_DISP_CHAR_PS_UP_CODEPOINT",
			"INPUT_DISP_CHAR_PS_UP_STR",
			"INPUT_DISP_CHAR_P_CODEPOINT",
			"INPUT_DISP_CHAR_P_STR",
			"INPUT_DISP_CHAR_QUESTION_CODEPOINT",
			"INPUT_DISP_CHAR_QUESTION_STR",
			"INPUT_DISP_CHAR_QUOTE_CODEPOINT",
			"INPUT_DISP_CHAR_QUOTE_STR",
			"INPUT_DISP_CHAR_Q_CODEPOINT",
			"INPUT_DISP_CHAR_Q_STR",
			"INPUT_DISP_CHAR_RIGHT_CODEPOINT",
			"INPUT_DISP_CHAR_RIGHT_STR",
			"INPUT_DISP_CHAR_R_CODEPOINT",
			"INPUT_DISP_CHAR_R_STR",
			"INPUT_DISP_CHAR_SHIFT_CODEPOINT",
			"INPUT_DISP_CHAR_SHIFT_STR",
			"INPUT_DISP_CHAR_SPACE_CODEPOINT",
			"INPUT_DISP_CHAR_SPACE_STR",
			"INPUT_DISP_CHAR_S_CODEPOINT",
			"INPUT_DISP_CHAR_S_STR",
			"INPUT_DISP_CHAR_TAB_CODEPOINT",
			"INPUT_DISP_CHAR_TAB_STR",
			"INPUT_DISP_CHAR_TILDE_CODEPOINT",
			"INPUT_DISP_CHAR_TILDE_STR",
			"INPUT_DISP_CHAR_T_CODEPOINT",
			"INPUT_DISP_CHAR_T_STR",
			"INPUT_DISP_CHAR_UP_CODEPOINT",
			"INPUT_DISP_CHAR_UP_STR",
			"INPUT_DISP_CHAR_U_CODEPOINT",
			"INPUT_DISP_CHAR_U_STR",
			"INPUT_DISP_CHAR_V_CODEPOINT",
			"INPUT_DISP_CHAR_V_STR",
			"INPUT_DISP_CHAR_W_CODEPOINT",
			"INPUT_DISP_CHAR_W_STR",
			"INPUT_DISP_CHAR_XB_A_CODEPOINT",
			"INPUT_DISP_CHAR_XB_A_STR",
			"INPUT_DISP_CHAR_XB_BACK_CODEPOINT",
			"INPUT_DISP_CHAR_XB_BACK_STR",
			"INPUT_DISP_CHAR_XB_B_CODEPOINT",
			"INPUT_DISP_CHAR_XB_B_STR",
			"INPUT_DISP_CHAR_XB_DOWN_CODEPOINT",
			"INPUT_DISP_CHAR_XB_DOWN_STR",
			"INPUT_DISP_CHAR_XB_DPAD_CODEPOINT",
			"INPUT_DISP_CHAR_XB_DPAD_STR",
			"INPUT_DISP_CHAR_XB_L3_CODEPOINT",
			"INPUT_DISP_CHAR_XB_L3_STR",
			"INPUT_DISP_CHAR_XB_LB_CODEPOINT",
			"INPUT_DISP_CHAR_XB_LB_STR",
			"INPUT_DISP_CHAR_XB_LEFT_CODEPOINT",
			"INPUT_DISP_CHAR_XB_LEFT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_XB_LEFT_STICK_STR",
			"INPUT_DISP_CHAR_XB_LEFT_STR",
			"INPUT_DISP_CHAR_XB_LT_CODEPOINT",
			"INPUT_DISP_CHAR_XB_LT_STR",
			"INPUT_DISP_CHAR_XB_R3_CODEPOINT",
			"INPUT_DISP_CHAR_XB_R3_STR",
			"INPUT_DISP_CHAR_XB_RB_CODEPOINT",
			"INPUT_DISP_CHAR_XB_RB_STR",
			"INPUT_DISP_CHAR_XB_RIGHT_CODEPOINT",
			"INPUT_DISP_CHAR_XB_RIGHT_STICK_CODEPOINT",
			"INPUT_DISP_CHAR_XB_RIGHT_STICK_STR",
			"INPUT_DISP_CHAR_XB_RIGHT_STR",
			"INPUT_DISP_CHAR_XB_RT_CODEPOINT",
			"INPUT_DISP_CHAR_XB_RT_STR",
			"INPUT_DISP_CHAR_XB_START_CODEPOINT",
			"INPUT_DISP_CHAR_XB_START_STR",
			"INPUT_DISP_CHAR_XB_UNKNOWN_CODEPOINT",
			"INPUT_DISP_CHAR_XB_UNKNOWN_STR",
			"INPUT_DISP_CHAR_XB_UP_CODEPOINT",
			"INPUT_DISP_CHAR_XB_UP_STR",
			"INPUT_DISP_CHAR_XB_X_CODEPOINT",
			"INPUT_DISP_CHAR_XB_X_STR",
			"INPUT_DISP_CHAR_XB_Y_CODEPOINT",
			"INPUT_DISP_CHAR_XB_Y_STR",
			"INPUT_DISP_CHAR_X_CODEPOINT",
			"INPUT_DISP_CHAR_X_STR",
			"INPUT_DISP_CHAR_Y_CODEPOINT",
			"INPUT_DISP_CHAR_Y_STR",
			"INPUT_DISP_CHAR_Z_CODEPOINT",
			"INPUT_DISP_CHAR_Z_STR",
			"INTERNATIONAL_FONT_NAME",
			"ITALIC_TOGGLE_CHAR",
			"LINUX_COMPILATION",
			"LOAD_ALL_RESOURCES_ON_STARTUP",
			"LOCK_PERF_GRAPH_SCALE",
			"MAX_APP_STATE_STACK_SIZE",
			"MAX_GIF_SIZE",
			"MAX_NUM_RESOURCE_FONT_BAKES",
			"MAX_NUM_RESOURCE_FONT_FACES",
			"MAX_NUM_VERTEX_ATTRIBUTES",
			"MAX_PARTS_PARAM_COLOR_POSSIBLE_COLORS",
			"MMENU_BTN_MARGIN",
			"MMENU_BTN_PADDING",
			"MMENU_BTN_SIZE",
			"MMENU_BTN_SND_DEDUPLICATE_TIME",
			"MMENU_FADE_IN_ANIM_TIME",
			"MMENU_LOGO_ANIM_TIME",
			"MMENU_LOGO_CLICK_ANIM_TIME",
			"MMENU_MUSIC_FADE_TIME",
			"MMENU_TITLE_TEXT",
			"MainMenuBtn_AdventOfCode",
			"MainMenuBtn_Exit",
			"MainMenuBtn_NumButtons",
			"Mat4_Identity",
			"Matrix4x4_Identity",
			"MemArenaType_Alias",
			"MemArenaType_Buffer",
			"MemArenaType_FixedHeap",
			"MemArenaType_MarkedStack",
			"MemArenaType_None",
			"MemArenaType_PagedHeap",
			"MemArenaType_Redirect",
			"MemArenaType_StdHeap",
			"MonokaiBack",
			"MonokaiBack_Value",
			"MonokaiBlue",
			"MonokaiBlue_Value",
			"MonokaiBrown",
			"MonokaiBrown_Value",
			"MonokaiDarkGray",
			"MonokaiDarkGray_Value",
			"MonokaiDarkGreen",
			"MonokaiDarkGreen_Value",
			"MonokaiFadedYellow",
			"MonokaiFadedYellow_Value",
			"MonokaiGray1",
			"MonokaiGray1_Value",
			"MonokaiGray2",
			"MonokaiGray2_Value",
			"MonokaiGreen",
			"MonokaiGreen_Value",
			"MonokaiLightBlue",
			"MonokaiLightBlue_Value",
			"MonokaiLightGray",
			"MonokaiLightGray_Value",
			"MonokaiLightPurple",
			"MonokaiLightPurple_Value",
			"MonokaiLightRed",
			"MonokaiLightRed_Value",
			"MonokaiLightYellow",
			"MonokaiLightYellow_Value",
			"MonokaiMagenta",
			"MonokaiMagenta_Value",
			"MonokaiOrange",
			"MonokaiOrange_Value",
			"MonokaiPurple",
			"MonokaiPurple_Value",
			"MonokaiRed",
			"MonokaiRed_Value",
			"MonokaiWhite",
			"MonokaiWhite_Value",
			"MonokaiYellow",
			"MonokaiYellow_Value",
			"Month_April",
			"Month_August",
			"Month_December",
			"Month_February",
			"Month_January",
			"Month_July",
			"Month_June",
			"Month_March",
			"Month_May",
			"Month_November",
			"Month_NumMonths",
			"Month_October",
			"Month_September",
			"MusicFade_FadeInThenOut",
			"MusicFade_FadeOutThenIn",
			"MusicFade_Instant",
			"MusicFade_LinearCrossfade",
			"MusicFade_None",
			"MusicFade_NumTypes",
			"MusicFade_PartialCrossFade",
			"MusicFade_Step",
			"MyStr_Empty",
			"NOTIFY_OUTPUT_ENABLED",
			"NUM_DAYS_PER_4YEARS",
			"NUM_DAYS_PER_WEEK",
			"NUM_DAYS_PER_YEAR",
			"NUM_HOUR_PER_DAY",
			"NUM_INPUT_DISP_CHAR_CODEPOINTS",
			"NUM_MIN_PER_DAY",
			"NUM_MIN_PER_HOUR",
			"NUM_MIN_PER_WEEK",
			"NUM_MIN_PER_YEAR",
			"NUM_MS_PER_DAY",
			"NUM_MS_PER_HOUR",
			"NUM_MS_PER_MINUTE",
			"NUM_MS_PER_SECOND",
			"NUM_MS_PER_WEEK",
			"NUM_MS_PER_YEAR",
			"NUM_PREDEF_GREYSCALE_COLORS",
			"NUM_PREDEF_MONOKAI_COLORS",
			"NUM_PREDEF_PAL_COLORS",
			"NUM_PREDEF_PURE_COLORS",
			"NUM_SEC_PER_DAY",
			"NUM_SEC_PER_HOUR",
			"NUM_SEC_PER_MINUTE",
			"NUM_SEC_PER_WEEK",
			"NUM_SEC_PER_YEAR",
			"NoColor",
			"NoColor_Value",
			"OSX_COMPILATION",
			"OTHER_OUTPUT_ENABLED",
			"Obb2_Zero",
			"OggError_DecodeError",
			"OggError_EmptyFile",
			"OggError_InvalidChannelCount",
			"OggError_InvalidSampleRate",
			"OggError_NoDecodedData",
			"OggError_NoSamples",
			"OggError_None",
			"OggError_NotEnoughMemory",
			"OggError_NumCodes",
			"PARTICLES_FILE_PATH",
			"PAUSE_PERF_GRAPH_ONCE_FULL",
			"PENTAGON_ANGLE_STEP32",
			"PENTAGON_ANGLE_STEP64",
			"PENTAGON_INTERNAL_ANGLE32",
			"PENTAGON_INTERNAL_ANGLE64",
			"PENTAGON_NUM_EDGES",
			"PENTAGON_NUM_VERTICES",
			"PERF_GRAPH_DATA_WIDTH",
			"PERF_GRAPH_HEIGHT",
			"PERF_GRAPH_LENGTH",
			"PERF_GRAPH_MAX_SCALE",
			"PERF_GRAPH_MIN_SCALE",
			"PERF_GRAPH_PAUSE_LOCK_BTNS_MARGIN",
			"PERF_GRAPH_PAUSE_LOCK_BTNS_SIZE",
			"PIG_AUDIO_ARENA_PAGE_SIZE",
			"PIG_AUDIO_OUT_SAMPLES_BUFFER_LENGTH",
			"PIG_DBG_BINDINGS_CONTROLLER_BINDING_PREFIX",
			"PIG_DBG_BINDINGS_FILE_PREFIX_LENGTH",
			"PIG_DBG_BINDINGS_FILE_PREFIX_STR",
			"PIG_DBG_BINDINGS_MOUSE_BINDING_PREFIX",
			"PIG_DEFAULT_FRAMERATE",
			"PIG_DEFAULT_FRAME_TIME",
			"PIG_DOUBLE_CLICK_MAX_DIST",
			"PIG_DOUBLE_CLICK_TIME",
			"PIG_LARGE_ALLOC_ARENA_PAGE_SIZE",
			"PIG_MAIN_ARENA_PAGE_SIZE",
			"PIG_MAX_AUDIO_CHANNELS",
			"PIG_MAX_NUM_NOTIFICATIONS",
			"PIG_MAX_SOUND_INSTANCES",
			"PIG_MEM_GRAPH_ARENA_PADDING",
			"PIG_MEM_GRAPH_CHANGE_DISPLAY_TIME",
			"PIG_MEM_GRAPH_NUM_INFO_LINES",
			"PIG_MEM_GRAPH_PAGE_APPEAR_TIME",
			"PIG_MEM_GRAPH_PAGE_PADDING",
			"PIG_MEM_GRAPH_PAGE_WIDTH",
			"PIG_MEM_GRAPH_USED_DISPLAY_DELAY",
			"PIG_NOTIFICATIONS_ALPHA",
			"PIG_NOTIFICATIONS_DEFAULT_LIFESPAN",
			"PIG_NOTIFICATIONS_MARGIN",
			"PIG_NOTIFICATIONS_MARGIN_BETWEEN",
			"PIG_NOTIFICATIONS_MAX_WIDTH",
			"PIG_NOTIFICATIONS_MIN_HEIGHT",
			"PIG_NOTIFICATIONS_PADDING_LR",
			"PIG_NOTIFICATIONS_PADDING_UD",
			"PIG_NOTIFICATIONS_REPEAT_CNT_PADDING",
			"PIG_NOTIFICATIONS_REPEAT_CNT_ROUNDED_RADIUS",
			"PIG_NOTIFICATIONS_ROUNDED_RADIUS",
			"PIG_NOTIFICATIONS_SHOW_ANIM_TIME",
			"PIG_NOTIFICATIONS_SND_DEDUP_TIME",
			"PIG_NOTIFICATIONS_VOLUME",
			"PIG_PHYS_FRAMERATE",
			"PIG_PHYS_FRAME_TIME_SEC",
			"PIG_SETTINGS_FILE_PREFIX_LENGTH",
			"PIG_SETTINGS_FILE_PREFIX_STR",
			"PIG_TEMP_MAX_MARKS",
			"PIG_WINDOW_MIN_SIZE",
			"PalBackground",
			"PalBackgroundDark",
			"PalBackgroundDark_Value",
			"PalBackgroundDarker",
			"PalBackgroundDarker_Value",
			"PalBackgroundLight",
			"PalBackgroundLight_Value",
			"PalBackgroundLighter",
			"PalBackgroundLighter_Value",
			"PalBackground_Value",
			"PalBanana",
			"PalBananaDark",
			"PalBananaDark_Value",
			"PalBananaDarker",
			"PalBananaDarker_Value",
			"PalBananaLight",
			"PalBananaLight_Value",
			"PalBananaLighter",
			"PalBananaLighter_Value",
			"PalBanana_Value",
			"PalBlack",
			"PalBlackDark",
			"PalBlackDark_Value",
			"PalBlackDarker",
			"PalBlackDarker_Value",
			"PalBlackLight",
			"PalBlackLight_Value",
			"PalBlackLighter",
			"PalBlackLighter_Value",
			"PalBlack_Value",
			"PalBlue",
			"PalBlueDark",
			"PalBlueDark_Value",
			"PalBlueDarker",
			"PalBlueDarker_Value",
			"PalBlueLight",
			"PalBlueLight_Value",
			"PalBlueLighter",
			"PalBlueLighter_Value",
			"PalBlue_Value",
			"PalGrass",
			"PalGrassDark",
			"PalGrassDark_Value",
			"PalGrassDarker",
			"PalGrassDarker_Value",
			"PalGrassLight",
			"PalGrassLight_Value",
			"PalGrassLighter",
			"PalGrassLighter_Value",
			"PalGrass_Value",
			"PalGreen",
			"PalGreenDark",
			"PalGreenDark_Value",
			"PalGreenDarker",
			"PalGreenDarker_Value",
			"PalGreenLight",
			"PalGreenLight_Value",
			"PalGreenLighter",
			"PalGreenLighter_Value",
			"PalGreen_Value",
			"PalGrey",
			"PalGreyDark",
			"PalGreyDark_Value",
			"PalGreyDarker",
			"PalGreyDarker_Value",
			"PalGreyLight",
			"PalGreyLight_Value",
			"PalGreyLighter",
			"PalGreyLighter_Value",
			"PalGrey_Value",
			"PalHoney",
			"PalHoneyDark",
			"PalHoneyDark_Value",
			"PalHoneyDarker",
			"PalHoneyDarker_Value",
			"PalHoneyLight",
			"PalHoneyLight_Value",
			"PalHoneyLighter",
			"PalHoneyLighter_Value",
			"PalHoney_Value",
			"PalNeutral",
			"PalNeutralDark",
			"PalNeutralDark_Value",
			"PalNeutralDarker",
			"PalNeutralDarker_Value",
			"PalNeutralLight",
			"PalNeutralLight_Value",
			"PalNeutralLighter",
			"PalNeutralLighter_Value",
			"PalNeutral_Value",
			"PalOrange",
			"PalOrangeDark",
			"PalOrangeDark_Value",
			"PalOrangeDarker",
			"PalOrangeDarker_Value",
			"PalOrangeLight",
			"PalOrangeLight_Value",
			"PalOrangeLighter",
			"PalOrangeLighter_Value",
			"PalOrange_Value",
			"PalPink",
			"PalPinkDark",
			"PalPinkDark_Value",
			"PalPinkDarker",
			"PalPinkDarker_Value",
			"PalPinkLight",
			"PalPinkLight_Value",
			"PalPinkLighter",
			"PalPinkLighter_Value",
			"PalPink_Value",
			"PalPurple",
			"PalPurpleDark",
			"PalPurpleDark_Value",
			"PalPurpleDarker",
			"PalPurpleDarker_Value",
			"PalPurpleLight",
			"PalPurpleLight_Value",
			"PalPurpleLighter",
			"PalPurpleLighter_Value",
			"PalPurple_Value",
			"PalRed",
			"PalRedDark",
			"PalRedDark_Value",
			"PalRedDarker",
			"PalRedDarker_Value",
			"PalRedLight",
			"PalRedLight_Value",
			"PalRedLighter",
			"PalRedLighter_Value",
			"PalRed_Value",
			"PalSky",
			"PalSkyDark",
			"PalSkyDark_Value",
			"PalSkyDarker",
			"PalSkyDarker_Value",
			"PalSkyLight",
			"PalSkyLight_Value",
			"PalSkyLighter",
			"PalSkyLighter_Value",
			"PalSky_Value",
			"PalViolet",
			"PalVioletDark",
			"PalVioletDark_Value",
			"PalVioletDarker",
			"PalVioletDarker_Value",
			"PalVioletLight",
			"PalVioletLight_Value",
			"PalVioletLighter",
			"PalVioletLighter_Value",
			"PalViolet_Value",
			"PalYellow",
			"PalYellowDark",
			"PalYellowDark_Value",
			"PalYellowDarker",
			"PalYellowDarker_Value",
			"PalYellowLight",
			"PalYellowLight_Value",
			"PalYellowLighter",
			"PalYellowLighter_Value",
			"PalYellow_Value",
			"ParsingTokenType_Comment",
			"ParsingTokenType_FilePrefix",
			"ParsingTokenType_KeyValuePair",
			"ParsingTokenType_NumTypes",
			"ParsingTokenType_Unknown",
			"PartMovementType_Default",
			"PartMovementType_None",
			"PartMovementType_NumTypes",
			"ParticleFlag_Align",
			"ParticleFlag_Alive",
			"ParticleFlag_FlipX",
			"ParticleFlag_FlipY",
			"ParticleFlag_None",
			"ParticleFlag_ScreenSpace",
			"PartsPrefabCollectionError_InvalidFilePrefix",
			"PartsPrefabCollectionError_MultipleFilePrefix",
			"PartsPrefabCollectionError_None",
			"PartsPrefabCollectionError_NumErrors",
			"PartsPrefabCollectionError_TokenBeforeFilePrefix",
			"Pi32",
			"Pi64",
			"PigDebugBindingType_Controller",
			"PigDebugBindingType_Keyboard",
			"PigDebugBindingType_Mouse",
			"PigDebugBindingType_None",
			"PigDebugBindingType_NumTypes",
			"PigEntryPoint_Closing",
			"PigEntryPoint_GetStartupOptions",
			"PigEntryPoint_GetVersion",
			"PigEntryPoint_Initialize",
			"PigEntryPoint_None",
			"PigEntryPoint_PerformTask",
			"PigEntryPoint_PostReload",
			"PigEntryPoint_PreReload",
			"PigEntryPoint_ShouldWindowClose",
			"PigEntryPoint_Update",
			"PigTask_None",
			"PigTask_NumTypes",
			"PigTask_ReadFileContents",
			"PigTask_WriteEntireFile",
			"PigTryDeserDebugBindingsError_CantOpenFile",
			"PigTryDeserDebugBindingsError_InvalidFilePrefix",
			"PigTryDeserDebugBindingsError_MissingFilePrefix",
			"PigTryDeserDebugBindingsError_MultipleFilePrefix",
			"PigTryDeserDebugBindingsError_None",
			"PigTryDeserDebugBindingsError_NumErrors",
			"PigTryDeserDebugBindingsError_TokenBeforeFilePrefix",
			"PigTryDeserSettingsError_CantOpenFile",
			"PigTryDeserSettingsError_EmptyFile",
			"PigTryDeserSettingsError_InvalidFilePrefix",
			"PigTryDeserSettingsError_MissingFilePrefix",
			"PigTryDeserSettingsError_MultipleFilePrefix",
			"PigTryDeserSettingsError_None",
			"PigTryDeserSettingsError_NotEnoughMemoryForStrings",
			"PigTryDeserSettingsError_NumErrors",
			"PigTryDeserSettingsError_TokenBeforeFilePrefix",
			"PolygonFillMode_Default",
			"PolygonFillMode_NumModes",
			"PolygonFillMode_Points",
			"PolygonFillMode_Wireframe",
			"PrimeNumbersU32_Count",
			"PureBlue",
			"PureBlue_Value",
			"PureGreen",
			"PureGreen_Value",
			"PureOrange",
			"PureOrange_Value",
			"PurePurple",
			"PurePurple_Value",
			"PureRed",
			"PureRed_Value",
			"PureYellow",
			"PureYellow_Value",
			"QuarterPi32",
			"QuarterPi64",
			"Quat_Identity",
			"RAND_FLOAT_PRECISION_R32",
			"RAND_FLOAT_PRECISION_R64",
			"RC_SCRATCH_BUFFER_SIZE",
			"RC_SPHERE_BUFFER_RING_COUNTS",
			"RC_SPHERE_BUFFER_SEGMENT_COUNTS",
			"REGULAR_OUTPUT_ENABLED",
			"RESOURCES_LOAD_PERCENT",
			"RESOURCES_NUM_FONTS",
			"RESOURCES_NUM_MUSICS",
			"RESOURCES_NUM_SHADERS",
			"RESOURCES_NUM_SHEETS",
			"RESOURCES_NUM_SOUNDS",
			"RESOURCES_NUM_TEXTURES",
			"RESOURCES_NUM_VECTORS",
			"RESOURCE_FOLDER_FONTS",
			"RESOURCE_FOLDER_MODELS",
			"RESOURCE_FOLDER_MUSIC",
			"RESOURCE_FOLDER_SHADERS",
			"RESOURCE_FOLDER_SHEETS",
			"RESOURCE_FOLDER_SOUNDS",
			"RESOURCE_FOLDER_SPRITES",
			"RESOURCE_FOLDER_TEXT",
			"RESOURCE_FOLDER_TEXTURES",
			"RESOURCE_FOLDER_VECTOR",
			"RESOURCE_TEXTURE_MAX_NUM_LAYERS",
			"RandomSeriesType_Fixed",
			"RandomSeriesType_Incremental",
			"RandomSeriesType_LinearCongruential32",
			"RandomSeriesType_LinearCongruential64",
			"RandomSeriesType_NumTypes",
			"Rec_Default",
			"Rec_Zero",
			"Reci_Zero",
			"ResourceState_Error",
			"ResourceState_Loaded",
			"ResourceState_None",
			"ResourceState_NumStates",
			"ResourceState_Unloaded",
			"ResourceState_Warning",
			"ResourceType_Font",
			"ResourceType_Music",
			"ResourceType_None",
			"ResourceType_NumTypes",
			"ResourceType_Shader",
			"ResourceType_Sheet",
			"ResourceType_Sound",
			"ResourceType_Texture",
			"ResourceType_VectorImage",
			"SHOW_AUDIO_INSTANCES_ON_STARTUP",
			"SHOW_AUDIO_OUT_GRAPH_ON_STARTUP",
			"SHOW_MEM_GRAPH_ON_STARTUP",
			"SHOW_PERF_GRAPH_ON_STARTUP",
			"SHOW_PIE_GRAPHS_ON_STARTUP",
			"SPRITE_SHEET_META_FILE_PREFIX",
			"STEAM_CARD_MIN_ASPECT_RATIO",
			"SVG_TRIANGULATION_CURVE_VERT_COUNT",
			"ShaderError_ApiError",
			"ShaderError_CompilationNotSupported",
			"ShaderError_CouldntOpenFile",
			"ShaderError_Empty",
			"ShaderError_FragmentCompileFailed",
			"ShaderError_FragmentCreationFailed",
			"ShaderError_LinkingFailed",
			"ShaderError_MissingAttribute",
			"ShaderError_MissingDivider",
			"ShaderError_MissingUniform",
			"ShaderError_NoFragShaderPieces",
			"ShaderError_NoVertShaderPieces",
			"ShaderError_None",
			"ShaderError_NumErrors",
			"ShaderError_ShaderCreationFailed",
			"ShaderError_UnsupportedApi",
			"ShaderError_VertexArrayCreationFailed",
			"ShaderError_VertexCompileFailed",
			"ShaderError_VertexCreationFailed",
			"ShaderUniform_All",
			"ShaderUniform_Brightness",
			"ShaderUniform_CameraPosition",
			"ShaderUniform_CircleInnerRadius",
			"ShaderUniform_CircleRadius",
			"ShaderUniform_Color1",
			"ShaderUniform_Color2",
			"ShaderUniform_Count",
			"ShaderUniform_MaskRectangle",
			"ShaderUniform_None",
			"ShaderUniform_NumGenericValues",
			"ShaderUniform_NumPolygonPlanes",
			"ShaderUniform_PlayerPosition",
			"ShaderUniform_PolygonPlanes",
			"ShaderUniform_ProjectionMatrix",
			"ShaderUniform_ReplaceColors",
			"ShaderUniform_RequireCircle",
			"ShaderUniform_RequireMatrices",
			"ShaderUniform_RequireNone",
			"ShaderUniform_RequireTexture",
			"ShaderUniform_Saturation",
			"ShaderUniform_ShiftVec",
			"ShaderUniform_SourceRec1",
			"ShaderUniform_SourceRec2",
			"ShaderUniform_Texture1",
			"ShaderUniform_Texture1Size",
			"ShaderUniform_Texture2",
			"ShaderUniform_Texture2Size",
			"ShaderUniform_Time",
			"ShaderUniform_Value0",
			"ShaderUniform_Value1",
			"ShaderUniform_Value2",
			"ShaderUniform_Value3",
			"ShaderUniform_Value4",
			"ShaderUniform_Value5",
			"ShaderUniform_Value6",
			"ShaderUniform_Value7",
			"ShaderUniform_ViewMatrix",
			"ShaderUniform_WorldMatrix",
			"SoundInstanceHandle_Empty",
			"SoundInstanceType_None",
			"SoundInstanceType_NumTypes",
			"SoundInstanceType_Samples",
			"SoundInstanceType_SawWave",
			"SoundInstanceType_SineWave",
			"SoundInstanceType_SquareWave",
			"SoundInstanceType_StreamingSamples",
			"SphereQuality_Default",
			"SphereQuality_High",
			"SphereQuality_Low",
			"SphereQuality_NumQualities",
			"SphereQuality_SuperLow",
			"SpriteSheetError_AllocFailure",
			"SpriteSheetError_CouldntOpenFile",
			"SpriteSheetError_EmptyFile",
			"SpriteSheetError_None",
			"SpriteSheetError_NumErrors",
			"SpriteSheetError_ParseFailure",
			"SpriteSheetError_TextureError",
			"SpriteSheetMetaError_InvalidFilePrefix",
			"SpriteSheetMetaError_KeyValuePairBeforeFrameDefined",
			"SpriteSheetMetaError_MissingFilePrefix",
			"SpriteSheetMetaError_MultipleFilePrefix",
			"SpriteSheetMetaError_None",
			"SpriteSheetMetaError_NumErrors",
			"SpriteSheetMetaError_TokenBeforeFilePrefix",
			"SvgFillStyle_None",
			"SvgFillStyle_NumStyles",
			"SvgFillStyle_Solid",
			"SvgPathDataCmd_ClosePath",
			"SvgPathDataCmd_Cubic",
			"SvgPathDataCmd_Ellipse",
			"SvgPathDataCmd_Horizontal",
			"SvgPathDataCmd_Line",
			"SvgPathDataCmd_MoveTo",
			"SvgPathDataCmd_None",
			"SvgPathDataCmd_NumCommands",
			"SvgPathDataCmd_Quadratic",
			"SvgPathDataCmd_SmoothCubic",
			"SvgPathDataCmd_SmoothQuadratic",
			"SvgPathDataCmd_Vertical",
			"SvgShapeType_Circle",
			"SvgShapeType_None",
			"SvgShapeType_NumTypes",
			"SvgShapeType_Path",
			"SvgShapeType_Rectangle",
			"SvgStrokeStyle_None",
			"SvgStrokeStyle_NumStyles",
			"SvgStrokeStyle_Solid",
			"SvgTransformType_Matrix",
			"SvgTransformType_None",
			"SvgTransformType_NumTypes",
			"SvgTransformType_Rotate",
			"SvgTransformType_Scale",
			"SvgTransformType_Translate",
			"TOTAL_NUM_RESOURCES",
			"TextAlignment_Center",
			"TextAlignment_Left",
			"TextAlignment_NumOptions",
			"TextAlignment_Right",
			"Textbox_MoveCursorType_ByCharacter",
			"Textbox_MoveCursorType_ByLine",
			"Textbox_MoveCursorType_BySubword",
			"Textbox_MoveCursorType_ByWholeText",
			"Textbox_MoveCursorType_ByWord",
			"Textbox_MoveCursorType_NumTypes",
			"TextureError_ApiError",
			"TextureError_CouldntOpenFile",
			"TextureError_EmptyFile",
			"TextureError_None",
			"TextureError_NumErrors",
			"TextureError_ParseFailure",
			"TextureError_UnsupportedApi",
			"ThirdPi32",
			"ThirdPi64",
			"ThreeHalfsPi32",
			"ThreeHalfsPi64",
			"TimeUnit_Days",
			"TimeUnit_Hours",
			"TimeUnit_Milliseconds",
			"TimeUnit_Minutes",
			"TimeUnit_Months",
			"TimeUnit_NumUnits",
			"TimeUnit_Seconds",
			"TimeUnit_Years",
			"Transparent",
			"TransparentBlack",
			"TransparentBlack_Value",
			"TransparentWhite",
			"TransparentWhite_Value",
			"Transparent_Value",
			"TryDeserSvgFileError_EmptyFile",
			"TryDeserSvgFileError_GroupOutsideSvg",
			"TryDeserSvgFileError_GroupTransformIsInvalid",
			"TryDeserSvgFileError_MissingProperty",
			"TryDeserSvgFileError_None",
			"TryDeserSvgFileError_NumErrors",
			"TryDeserSvgFileError_PathFormatError",
			"TryDeserSvgFileError_ShapeOutsideGroup",
			"TryDeserSvgFileError_StyleFormatError",
			"TryDeserSvgFileError_TryParseError",
			"TryDeserSvgFileError_XmlParsingError",
			"TryGetSettingResult_Missing",
			"TryGetSettingResult_None",
			"TryGetSettingResult_NumTypes",
			"TryGetSettingResult_ParseError",
			"TryGetSettingResult_Success",
			"TryParseFailureReason_FloatParseFailure",
			"TryParseFailureReason_Infinity",
			"TryParseFailureReason_InvalidCharacter",
			"TryParseFailureReason_InvalidUtf8",
			"TryParseFailureReason_NoNumbers",
			"TryParseFailureReason_None",
			"TryParseFailureReason_NotEnoughCommas",
			"TryParseFailureReason_NumReasons",
			"TryParseFailureReason_Overflow",
			"TryParseFailureReason_StringOverflow",
			"TryParseFailureReason_TooManyCommas",
			"TryParseFailureReason_Underflow",
			"TryParseFailureReason_UnknownString",
			"TryParseFailureReason_WrongNumCharacters",
			"TwoPi32",
			"TwoPi64",
			"UNDERLINE_TOGGLE_CHAR",
			"UNICODE_CYRILLIC_COUNT",
			"UNICODE_CYRILLIC_END",
			"UNICODE_CYRILLIC_START",
			"UNICODE_HIRAGANA_COUNT",
			"UNICODE_HIRAGANA_END",
			"UNICODE_HIRAGANA_START",
			"UNICODE_KATAKANA_COUNT",
			"UNICODE_KATAKANA_END",
			"UNICODE_KATAKANA_START",
			"UNICODE_LATIN_EXT_COUNT",
			"UNICODE_LATIN_EXT_END",
			"UNICODE_LATIN_EXT_START",
			"UNIX_EPOCH_DATE",
			"UTF8_MAX_CHAR_SIZE",
			"UTF8_MAX_CODEPOINT",
			"ValueSliderStyle_Bar",
			"ValueSliderStyle_Default",
			"ValueSliderStyle_NumStyles",
			"Vec2_Down",
			"Vec2_Half",
			"Vec2_Left",
			"Vec2_One",
			"Vec2_Right",
			"Vec2_Up",
			"Vec2_Zero",
			"Vec2i_Down",
			"Vec2i_Left",
			"Vec2i_One",
			"Vec2i_Right",
			"Vec2i_Up",
			"Vec2i_Zero",
			"Vec3_Back",
			"Vec3_Backward",
			"Vec3_Bottom",
			"Vec3_Down",
			"Vec3_Forward",
			"Vec3_Front",
			"Vec3_Half",
			"Vec3_Left",
			"Vec3_One",
			"Vec3_Right",
			"Vec3_Top",
			"Vec3_Up",
			"Vec3_Zero",
			"Vec3i_Back",
			"Vec3i_Backward",
			"Vec3i_Bottom",
			"Vec3i_Down",
			"Vec3i_Forward",
			"Vec3i_Front",
			"Vec3i_Left",
			"Vec3i_One",
			"Vec3i_Right",
			"Vec3i_Top",
			"Vec3i_Up",
			"Vec3i_Zero",
			"Vec4_Back",
			"Vec4_Backward",
			"Vec4_Bottom",
			"Vec4_Down",
			"Vec4_Forward",
			"Vec4_Front",
			"Vec4_Half",
			"Vec4_Left",
			"Vec4_One",
			"Vec4_Right",
			"Vec4_Top",
			"Vec4_Up",
			"Vec4_Zero",
			"Vec4i_Back",
			"Vec4i_Backward",
			"Vec4i_Bottom",
			"Vec4i_Down",
			"Vec4i_Forward",
			"Vec4i_Front",
			"Vec4i_Left",
			"Vec4i_One",
			"Vec4i_Right",
			"Vec4i_Top",
			"Vec4i_Up",
			"Vec4i_Zero",
			"VectorImgError_CouldntOpenFile",
			"VectorImgError_EmptyFile",
			"VectorImgError_NoGroups",
			"VectorImgError_None",
			"VectorImgError_NumErrors",
			"VectorImgError_SvgError",
			"VectorImgError_XmlError",
			"VectorImgFillType_None",
			"VectorImgFillType_NumTypes",
			"VectorImgFillType_Solid",
			"VectorImgShapeType_Circle",
			"VectorImgShapeType_None",
			"VectorImgShapeType_NumTypes",
			"VectorImgShapeType_Path",
			"VectorImgShapeType_Rectangle",
			"VectorImgStrokeType_None",
			"VectorImgStrokeType_NumTypes",
			"VectorImgStrokeType_Solid",
			"VertBufferPrimitive_Lines",
			"VertBufferPrimitive_None",
			"VertBufferPrimitive_NumTypes",
			"VertBufferPrimitive_Quads",
			"VertBufferPrimitive_Triangles",
			"VertexType_All",
			"VertexType_Color1Bit",
			"VertexType_Color2Bit",
			"VertexType_Default2D",
			"VertexType_Default2D_Size",
			"VertexType_Default3D",
			"VertexType_Default3D_Size",
			"VertexType_None",
			"VertexType_Normal1Bit",
			"VertexType_Normal2Bit",
			"VertexType_PositionBit",
			"VertexType_Slug",
			"VertexType_SlugBit",
			"VertexType_TangentBit",
			"VertexType_TexCoord1Bit",
			"VertexType_TexCoord2Bit",
			"WARNING_OUTPUT_ENABLED",
			"WINDOWS_COMPILATION",
			"WORD_TREE_CHILD_COUNT",
			"WORD_TREE_FIRST_CHAR",
			"WavError_DataBeforeFormat",
			"WavError_EmptyFile",
			"WavError_InvalidDataChunkSize",
			"WavError_InvalidRIFF",
			"WavError_InvalidWAVE",
			"WavError_MissingDataChunks",
			"WavError_MissingFormatChunk",
			"WavError_None",
			"WavError_NumCodes",
			"WavError_UnsupportedFormat",
			"White",
			"White_Value",
			"WordBreakCharClass_AlphabeticLower",
			"WordBreakCharClass_AlphabeticUpper",
			"WordBreakCharClass_NumClasses",
			"WordBreakCharClass_Numeric",
			"WordBreakCharClass_Other",
			"WordBreakCharClass_Punctuation",
			"WordBreakCharClass_PunctuationClose",
			"WordBreakCharClass_PunctuationOpen",
			"WordBreakCharClass_Whitespace",
			"WordBreakCharClass_WordPunctuation",
			"XmlParseResultType_Comment",
			"XmlParseResultType_Contents",
			"XmlParseResultType_Directive",
			"XmlParseResultType_EndToken",
			"XmlParseResultType_Error",
			"XmlParseResultType_None",
			"XmlParseResultType_NumTypes",
			"XmlParseResultType_Token",
			"XmlParsingError_ClosingTokenMismatch",
			"XmlParsingError_ExpectedClosingAngleBracket",
			"XmlParsingError_InvalidCharInIdentifier",
			"XmlParsingError_InvalidCharacterOutsideToken",
			"XmlParsingError_InvalidPropertyFirstChar",
			"XmlParsingError_InvalidUtf8",
			"XmlParsingError_MissingClosingTokens",
			"XmlParsingError_MissingPropertyValue",
			"XmlParsingError_NoEqualsForProperty",
			"XmlParsingError_NoTypeFoundForToken",
			"XmlParsingError_None",
			"XmlParsingError_NumErrors",
			"XmlParsingError_UnexpectedClosingToken",
			"XmlParsingError_UnexpectedEol",
			"__func__",
			"e32",
			"e64",
		],
		"custom_functions":
		[
			"#define AllocArray(arena, structName, numItems)",
			"#define AllocBytes(arena, numBytes)",
			"#define AllocChars(arena, numBytes)",
			"#define AllocString(arena, strPntr)",
			"#define AllocStruct(arena, structName)",
			"#define AocCloseFile(fileVarName)",
			"#define AocLoopFile(fileVarName, lineParserVarName, lineVarName)",
			"#define AocOpenFile(fileVarName, fileName)",
			"#define AocParseEnumFunc(enumBaseName, numWhatSuffix)",
			"#define AocReturnI32(valueI32)",
			"#define AocReturnI64(valueI64)",
			"#define AocReturnU64(valueU64)",
			"#define AocVarArrayU64(arrayVarName)",
			"#define ArenaDelete(type, pntr, arena)",
			"#define ArenaNew(type, pntrToAssign, arena, ...)",
			"#define ArrayCount(Array)",
			"#define Assert(Expression)",
			"#define AssertFilledHandle(handlePntr)",
			"#define AssertIf(Precondition, Expression)",
			"#define AssertIfMsg(Precondition, Expression, message)",
			"#define AssertIfMsg_(Precondition, Expression, message)",
			"#define AssertIf_(Precondition, Expression)",
			"#define AssertMsg(Expression, message)",
			"#define AssertMsg_(Expression, message)",
			"#define AssertNoOpenGlError()",
			"#define AssertNormalEntry()",
			"#define AssertNormalEntry_()",
			"#define AssertNullTerm(strPntr)",
			"#define AssertNullTerm_(strPntr)",
			"#define AssertSingleThreaded()",
			"#define AssertSingleThreaded_()",
			"#define Assert_(Expression)",
			"#define BOOL_FUNC_DEF(functionName)",
			"#define BinDeser_IsMemberPresent(structSize, type, memberName)",
			"#define BinDeser_ReadI16(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI32(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI64(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI8(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadStruct(dataPntr, dataSize, byteIndexPntr, type)",
			"#define BinDeser_ReadStructDynamicSize(dataPntr, dataSize, byteIndexPntr, structSizeOut, type, sizeMemberName, firstOptionalMemberName)",
			"#define BinDeser_ReadU16(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU32(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU64(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU8(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinSer_WriteI16(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI32(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI64(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI8(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteStructure(result, resultSize, byteIndexPntr, type)",
			"#define BinSer_WriteU16(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU32(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU64(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU8(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteValue(result, resultSize, byteIndexPntr, type, value)",
			"#define BktArrayAdd(array, type)",
			"#define BktArrayAddBulk(array, type, numItems, mustBeConsecutive)",
			"#define BktArrayGet(array, type, index)",
			"#define BktArrayGetHard(array, type, index)",
			"#define BktArrayGetSoft(array, type, index)",
			"#define COMPARE_FUNC_DEFINITION(functionName)",
			"#define ChangeVertBufferVertices2D(buffer, startIndex, numVertices, verticesPntr)",
			"#define ChangeVertBufferVertices3D(buffer, startIndex, numVertices, verticesPntr)",
			"#define ClearArray(Array)",
			"#define ClearPointer(Pointer)",
			"#define ClearStruct(Structure)",
			"#define ControllerBtnDownAndHandle(controllerIndex, btn)",
			"#define ControllerBtnDownAndHandleExtended(controllerIndex, btn)",
			"#define ControllerBtnPressedAndHandle(controllerIndex, btn)",
			"#define ControllerBtnPressedAndHandleExtended(controllerIndex, btn)",
			"#define ControllerBtnReleasedAndHandle(controllerIndex, btn)",
			"#define CreateLinkedList(list, memArena, type)",
			"#define CreateStackBufferArena(arenaName, bufferName, size)",
			"#define CreateVertBuffer2D(memArena, bufferOut, dynamic, numVertices, verticesPntr, copyVertices)",
			"#define CreateVertBuffer3D(memArena, bufferOut, dynamic, numVertices, verticesPntr, copyVertices)",
			"#define CreateVertBufferWithIndices2D(memArena, bufferOut, dynamic, numVertices, verticesPntr, numIndices, indicesPntrI32, copyVertices, copyIndices)",
			"#define CreateVertBufferWithIndices3D(memArena, bufferOut, dynamic, numVertices, verticesPntr, numIndices, indicesPntrI32, copyVertices, copyIndices)",
			"#define Cube(value)",
			"#define DebugAssert(Expression)",
			"#define DebugAssertAndUnused(Expression, unusedVarInRelease)",
			"#define DebugAssertAndUnusedMsg(Expression, unusedVarInRelease, message)",
			"#define DebugAssertAndUnusedMsg_(Expression, unusedVarInRelease, message)",
			"#define DebugAssertAndUnused_(Expression, unusedVarInRelease)",
			"#define DebugAssertMsg(Expression, message)",
			"#define DebugAssertMsg_(Expression, message)",
			"#define DebugAssertNoOpenGlError()",
			"#define DebugAssert_(Expression)",
			"#define Decrement(variable)",
			"#define DecrementBy(variable, amount)",
			"#define END_PACK()",
			"#define EXPORT(returnType, functionName, ...)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define FlipEndianU32(variable)",
			"#define FreeBufferArena(bufferArena, sourceArena)",
			"#define FreeString(arena, strPntr)",
			"#define GYLIB_DEBUG_OUTPUT_HANDLER_DEF(functionName)",
			"#define GYLIB_DEBUG_PRINT_HANDLER_DEF(functionName)",
			"#define GYLIB_GET_TEMP_ARENA_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_AFTER_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_BEFORE_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_SORT_CALLBACK_DEF(functionName)",
			"#define GetFifoLineMetaStruct(linePntr, type)",
			"#define Gigabytes(value)",
			"#define GyLibPrintAt(level, formatString, ...)",
			"#define GyLibPrintLineAt(level, formatString, ...)",
			"#define GyLibPrintLine_D(formatString, ...)",
			"#define GyLibPrintLine_E(formatString, ...)",
			"#define GyLibPrintLine_I(formatString, ...)",
			"#define GyLibPrintLine_W(formatString, ...)",
			"#define GyLibPrint_D(formatString, ...)",
			"#define GyLibPrint_E(formatString, ...)",
			"#define GyLibPrint_I(formatString, ...)",
			"#define GyLibPrint_W(formatString, ...)",
			"#define GyLibWriteAt(level, message)",
			"#define GyLibWriteLineAt(level, message)",
			"#define GyLibWriteLine_D(message)",
			"#define GyLibWriteLine_E(message)",
			"#define GyLibWriteLine_I(message)",
			"#define GyLibWriteLine_W(message)",
			"#define GyLibWrite_D(message)",
			"#define GyLibWrite_E(message)",
			"#define GyLibWrite_I(message)",
			"#define GyLibWrite_W(message)",
			"#define HandleControllerBtn(controllerIndex, btn)",
			"#define HandleControllerBtnExtended(controllerIndex, btn)",
			"#define HandleControllerBtnRelease(controllerIndex, btn)",
			"#define HandleKey(key)",
			"#define HandleKeyExtended(key)",
			"#define HandleKeyRelease(key)",
			"#define HandleMouse(mouseBtn)",
			"#define HandleMouseExtended(mouseBtn)",
			"#define HandleMouseRelease(mouseBtn)",
			"#define HandleMouseScroll()",
			"#define HandleMouseScrollX()",
			"#define HandleMouseScrollY()",
			"#define HardFreeMem(arena, allocPntr)",
			"#define HardReallocMem(arena, allocPntr, newSize)",
			"#define I32_FUNC_DEF(functionName)",
			"#define IMPORT(returnType, functionName, ...)",
			"#define IS_VAR_IN_X_BYTES_OF_STRUCT(structureName, numBytes, variableName)",
			"#define InPlaceNew(type, pntrToClass, ...)",
			"#define Increment(variable, max)",
			"#define IncrementBy(variable, amount, max)",
			"#define IncrementU16(variable)",
			"#define IncrementU16By(variable, amount)",
			"#define IncrementU32(variable)",
			"#define IncrementU32By(variable, amount)",
			"#define IncrementU64(variable)",
			"#define IncrementU64By(variable, amount)",
			"#define IncrementU8(variable)",
			"#define IncrementU8By(variable, amount)",
			"#define IsAllocPrefixFilled(packedSize)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define KeyDownAndHandle(key)",
			"#define KeyDownAndHandleExtended(key)",
			"#define KeyPressedAndHandle(key)",
			"#define KeyPressedAndHandleExtended(key)",
			"#define KeyReleasedAndHandle(key)",
			"#define Kilobytes(value)",
			"#define LinkedListAdd(list, type)",
			"#define LinkedListClear(list, type)",
			"#define LinkedListFirst(list, type)",
			"#define LinkedListGet(list, type, index)",
			"#define LinkedListInsert(list, type, index)",
			"#define LinkedListLast(list, type)",
			"#define LinkedListNext(list, type, itemPntr)",
			"#define LinkedListPrev(list, type, itemPntr)",
			"#define LinkedListRemove(list, type, itemPntr)",
			"#define LinkedListUnlist(list, type, itemPntr)",
			"#define LogExitFailure(log, errorCode)",
			"#define LogExitSuccess(log)",
			"#define LogPrintLine_D(log, formatString, ...)",
			"#define LogPrintLine_Dx(log, flags, formatString, ...)",
			"#define LogPrintLine_E(log, formatString, ...)",
			"#define LogPrintLine_Ex(log, flags, formatString, ...)",
			"#define LogPrintLine_I(log, formatString, ...)",
			"#define LogPrintLine_Ix(log, flags, formatString, ...)",
			"#define LogPrintLine_N(log, formatString, ...)",
			"#define LogPrintLine_Nx(log, flags, formatString, ...)",
			"#define LogPrintLine_O(log, formatString, ...)",
			"#define LogPrintLine_Ox(log, flags, formatString, ...)",
			"#define LogPrintLine_R(log, formatString, ...)",
			"#define LogPrintLine_Rx(log, flags, formatString, ...)",
			"#define LogPrintLine_W(log, formatString, ...)",
			"#define LogPrintLine_Wx(log, flags, formatString, ...)",
			"#define LogPrint_D(log, formatString, ...)",
			"#define LogPrint_Dx(log, flags, formatString, ...)",
			"#define LogPrint_E(log, formatString, ...)",
			"#define LogPrint_Ex(log, flags, formatString, ...)",
			"#define LogPrint_I(log, formatString, ...)",
			"#define LogPrint_Ix(log, flags, formatString, ...)",
			"#define LogPrint_N(log, formatString, ...)",
			"#define LogPrint_Nx(log, flags, formatString, ...)",
			"#define LogPrint_O(log, formatString, ...)",
			"#define LogPrint_Ox(log, flags, formatString, ...)",
			"#define LogPrint_R(log, formatString, ...)",
			"#define LogPrint_Rx(log, flags, formatString, ...)",
			"#define LogPrint_W(log, formatString, ...)",
			"#define LogPrint_Wx(log, flags, formatString, ...)",
			"#define LogWriteLine_D(log, message)",
			"#define LogWriteLine_Dx(log, flags, message)",
			"#define LogWriteLine_E(log, message)",
			"#define LogWriteLine_Ex(log, flags, message)",
			"#define LogWriteLine_I(log, message)",
			"#define LogWriteLine_Ix(log, flags, message)",
			"#define LogWriteLine_N(log, message)",
			"#define LogWriteLine_Nx(log, flags, message)",
			"#define LogWriteLine_O(log, message)",
			"#define LogWriteLine_Ox(log, flags, message)",
			"#define LogWriteLine_R(log, message)",
			"#define LogWriteLine_Rx(log, flags, message)",
			"#define LogWriteLine_W(log, message)",
			"#define LogWriteLine_Wx(log, flags, message)",
			"#define LogWrite_D(log, message)",
			"#define LogWrite_Dx(log, flags, message)",
			"#define LogWrite_E(log, message)",
			"#define LogWrite_Ex(log, flags, message)",
			"#define LogWrite_I(log, message)",
			"#define LogWrite_Ix(log, flags, message)",
			"#define LogWrite_N(log, message)",
			"#define LogWrite_Nx(log, flags, message)",
			"#define LogWrite_O(log, message)",
			"#define LogWrite_Ox(log, flags, message)",
			"#define LogWrite_R(log, message)",
			"#define LogWrite_Rx(log, flags, message)",
			"#define LogWrite_W(log, message)",
			"#define LogWrite_Wx(log, flags, message)",
			"#define Mat3Determinant(a, b, c, d, e, f, g, h, i)",
			"#define Mat4ApplyLeft(matrix, transformation)",
			"#define Mat4Transform(matrix, transformation)",
			"#define Megabytes(value)",
			"#define MouseDownAndHandle(mouseBtn)",
			"#define MouseDownAndHandleExtended(mouseBtn)",
			"#define MouseHitPrint(formatString, ...)",
			"#define MouseHitPrintIndex(index, formatString, ...)",
			"#define MouseHitRecPrint(rectangle, formatString, ...)",
			"#define MouseHitRecPrintIndex(rectangle, index, formatString, ...)",
			"#define MousePressedAndHandle(mouseBtn)",
			"#define MousePressedAndHandleExtended(mouseBtn)",
			"#define MouseReleasedAndHandle(mouseBtn)",
			"#define MouseScrolledAndHandle()",
			"#define MouseScrolledXAndHandle()",
			"#define MouseScrolledYAndHandle()",
			"#define MyBreak()",
			"#define MyBufferPrintf(buffer, bufferSize, formatStr, ...)",
			"#define MyDebugBreak()",
			"#define MyFree(size)",
			"#define MyMalloc(size)",
			"#define MyMemCompare(ptr1, ptr2, length)",
			"#define MyMemCopy(dest, source, length)",
			"#define MyMemMove(dest, source, length)",
			"#define MyMemSet(dest, value, length)",
			"#define MyRealloc(pntr, newSize)",
			"#define MyStrCompare(str1, str2, length)",
			"#define MyStrCompareNt(str1, str2)",
			"#define MyStrCopyNt(dest, source)",
			"#define MyStrLength(str)",
			"#define MyStrLength32(str)",
			"#define MyStrLength64(str)",
			"#define MyStrStrNt(str1, str2)",
			"#define MyVaListPrintf(buffer, bufferSize, formatStr, vaList)",
			"#define MyWideStrLength(str)",
			"#define MyWideStrLength32(str)",
			"#define NewStringInArena(arena, length, charPntr)",
			"#define NewStringInArenaNt(arena, nullTermStr)",
			"#define NotEmptyStr(strPntr)",
			"#define NotEmptyStr_(strPntr)",
			"#define NotNull(variable)",
			"#define NotNull2(variable1, variable2)",
			"#define NotNull2Msg(variable1, variable2, message)",
			"#define NotNull2Msg_(variable1, variable2, message)",
			"#define NotNull2_(variable1, variable2)",
			"#define NotNull3(variable1, variable2, variable3)",
			"#define NotNull3Msg(variable1, variable2, variable3, message)",
			"#define NotNull3Msg_(variable1, variable2, variable3, message)",
			"#define NotNull3_(variable1, variable2, variable3)",
			"#define NotNull4(variable1, variable2, variable3, variable4)",
			"#define NotNull4Msg(variable1, variable2, variable3, variable4, message)",
			"#define NotNull4Msg_(variable1, variable2, variable3, variable4, message)",
			"#define NotNull4_(variable1, variable2, variable3, variable4)",
			"#define NotNullMsg(variable, message)",
			"#define NotNullMsg_(variable, message)",
			"#define NotNullStr(strPntr)",
			"#define NotNullStr_(strPntr)",
			"#define NotNull_(variable)",
			"#define NotifyPrint_D(formatString, ...)",
			"#define NotifyPrint_Dx(lifespan, formatString, ...)",
			"#define NotifyPrint_E(formatString, ...)",
			"#define NotifyPrint_Ex(lifespan, formatString, ...)",
			"#define NotifyPrint_I(formatString, ...)",
			"#define NotifyPrint_Ix(lifespan, formatString, ...)",
			"#define NotifyPrint_N(formatString, ...)",
			"#define NotifyPrint_Nx(lifespan, formatString, ...)",
			"#define NotifyPrint_O(formatString, ...)",
			"#define NotifyPrint_Ox(lifespan, formatString, ...)",
			"#define NotifyPrint_R(formatString, ...)",
			"#define NotifyPrint_Rx(lifespan, formatString, ...)",
			"#define NotifyPrint_W(formatString, ...)",
			"#define NotifyPrint_Wx(lifespan, formatString, ...)",
			"#define NotifyWrite_D(message)",
			"#define NotifyWrite_Dx(lifespan, message)",
			"#define NotifyWrite_E(message)",
			"#define NotifyWrite_Ex(lifespan, message)",
			"#define NotifyWrite_I(message)",
			"#define NotifyWrite_Ix(lifespan, message)",
			"#define NotifyWrite_N(message)",
			"#define NotifyWrite_Nx(lifespan, message)",
			"#define NotifyWrite_O(message)",
			"#define NotifyWrite_Ox(lifespan, message)",
			"#define NotifyWrite_R(message)",
			"#define NotifyWrite_Rx(lifespan, message)",
			"#define NotifyWrite_W(message)",
			"#define NotifyWrite_Wx(lifespan, message)",
			"#define OnesComplimentU32(variable)",
			"#define PACKED(class_to_pack)",
			"#define PackAllocPrefixSize(used, size)",
			"#define PrintAt(dbgLevel, formatString, ...)",
			"#define PrintAtx(flags, dbgLevel, formatString, ...)",
			"#define PrintInArenaVa(arena, resultName, resultLengthName, formatString)",
			"#define PrintLineAt(dbgLevel, formatString, ...)",
			"#define PrintLineAtx(flags, dbgLevel, formatString, ...)",
			"#define PrintLine_D(formatString, ...)",
			"#define PrintLine_Dx(flags, formatString, ...)",
			"#define PrintLine_E(formatString, ...)",
			"#define PrintLine_Ex(flags, formatString, ...)",
			"#define PrintLine_I(formatString, ...)",
			"#define PrintLine_Ix(flags, formatString, ...)",
			"#define PrintLine_N(formatString, ...)",
			"#define PrintLine_Nx(flags, formatString, ...)",
			"#define PrintLine_O(formatString, ...)",
			"#define PrintLine_Ox(flags, formatString, ...)",
			"#define PrintLine_R(formatString, ...)",
			"#define PrintLine_Rx(flags, formatString, ...)",
			"#define PrintLine_W(formatString, ...)",
			"#define PrintLine_Wx(flags, formatString, ...)",
			"#define Print_D(formatString, ...)",
			"#define Print_Dx(flags, formatString, ...)",
			"#define Print_E(formatString, ...)",
			"#define Print_Ex(flags, formatString, ...)",
			"#define Print_I(formatString, ...)",
			"#define Print_Ix(flags, formatString, ...)",
			"#define Print_N(formatString, ...)",
			"#define Print_Nx(flags, formatString, ...)",
			"#define Print_O(formatString, ...)",
			"#define Print_Ox(flags, formatString, ...)",
			"#define Print_R(formatString, ...)",
			"#define Print_Rx(flags, formatString, ...)",
			"#define Print_W(formatString, ...)",
			"#define Print_Wx(flags, formatString, ...)",
			"#define ReverseByteArray(array, size)",
			"#define START_PACK()",
			"#define STRUCT_VAR_END_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_SIZE(structureName, variableName)",
			"#define SWAP_POINTERS(varType, pntr1, pntr2)",
			"#define SWAP_VARIABLES(varType, var1, var2)",
			"#define SoftFreeMem(arena, allocPntr)",
			"#define SoftReallocMem(arena, allocPntr, newSize)",
			"#define Square(value)",
			"#define StrHashDictAdd(dict, key, type)",
			"#define StrHashDictAddEmpty(dict, key)",
			"#define StrHashDictAddEmptyHard(dict, key)",
			"#define StrHashDictAddEmptySoft(dict, key)",
			"#define StrHashDictAddHard(dict, key, type)",
			"#define StrHashDictAddSoft(dict, key, type)",
			"#define StrHashDictContains(dict, key, type)",
			"#define StrHashDictContainsEmpty(dict, key)",
			"#define StrHashDictGet(dict, key, type)",
			"#define StrHashDictGetHard(dict, key, type)",
			"#define StrHashDictGetIter(dict, type)",
			"#define StrHashDictGetSoft(dict, key, type)",
			"#define StrHashDictIter(iter, type, itemPntrOut)",
			"#define StrHashDictRemove(dict, key, type)",
			"#define StrHashDictRemoveEmpty(dict, key)",
			"#define StrHashDictRemoveEmptyHard(dict, key)",
			"#define StrHashDictRemoveEmptySoft(dict, key)",
			"#define StrHashDictRemoveHard(dict, key, type)",
			"#define StrHashDictRemoveSoft(dict, key, type)",
			"#define TIME_SCALED_ANIM(animTimeMs, timeScale)",
			"#define TempArray(structName, numItems)",
			"#define TempBytes(numBytes)",
			"#define TempPopMark()",
			"#define TempPopMarkIf(condition)",
			"#define TempPopMarkNotArena(memArenaPntrThatMightBeTempArena)",
			"#define TempPrint(formatString, ...)",
			"#define TempPrintStr(formatString, ...)",
			"#define TempPrintVa(resultName, resultLengthName, formatString)",
			"#define TempPushMark()",
			"#define TempPushMarkIf(condition)",
			"#define TempPushMarkNotArena(memArenaPntrThatMightBeTempArena)",
			"#define TempStruct(structName)",
			"#define ThreadSafeClaimByBool(variablePntr)",
			"#define ThreadSafeIncrement(variablePntr)",
			"#define ThreadingReadBarrier()",
			"#define ThreadingWriteBarrier()",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define UNREFERENCED(varName)",
			"#define UNUSED(varName)",
			"#define Unimplemented()",
			"#define Unimplemented_()",
			"#define UnpackAllocPrefixSize(packedSize)",
			"#define VOID_FUNC_DEF(functionName)",
			"#define VarArrayAdd(array, type)",
			"#define VarArrayAddRange(array, index, newItemsCount, type)",
			"#define VarArrayContains(array, itemPntr)",
			"#define VarArrayContainsTyped(array, itemPntr, type)",
			"#define VarArrayGet(array, index, type)",
			"#define VarArrayGetFirst(array, type)",
			"#define VarArrayGetFirstHard(array, type)",
			"#define VarArrayGetFirstSoft(array, type)",
			"#define VarArrayGetHard(array, index, type)",
			"#define VarArrayGetIndexOf(array, itemPntr, indexOutPntr, type)",
			"#define VarArrayGetLast(array, type)",
			"#define VarArrayGetLastHard(array, type)",
			"#define VarArrayGetLastSoft(array, type)",
			"#define VarArrayGetSoft(array, index, type)",
			"#define VarArrayInsert(array, index, type)",
			"#define VarArrayLoop(arrayPntr, indexName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, index)",
			"#define VarArrayMerge(destArray, sourceArray)",
			"#define VarArrayPop(array, type)",
			"#define VarArrayPopFront(array, type)",
			"#define VarArrayPush(array, type)",
			"#define VarArrayPushFront(array, type)",
			"#define VarArrayRemove(array, index, type)",
			"#define VarArrayRemoveByPntr(array, itemToRemove)",
			"#define VarArrayRemoveByPntrTyped(array, itemToRemove, type)",
			"#define VarArrayRemoveRange(array, index, numItemsToRemove, type)",
			"#define WAV_CHUNK_TYPE_ID(a, b, c, d)",
			"#define WriteAt(dbgLevel, message)",
			"#define WriteAtx(flags, dbgLevel, message)",
			"#define WriteLineAt(dbgLevel, message)",
			"#define WriteLineAtx(flags, dbgLevel, message)",
			"#define WriteLine_D(message)",
			"#define WriteLine_Dx(flags, message)",
			"#define WriteLine_E(message)",
			"#define WriteLine_Ex(flags, message)",
			"#define WriteLine_I(message)",
			"#define WriteLine_Ix(flags, message)",
			"#define WriteLine_N(message)",
			"#define WriteLine_Nx(flags, message)",
			"#define WriteLine_O(message)",
			"#define WriteLine_Ox(flags, message)",
			"#define WriteLine_R(message)",
			"#define WriteLine_Rx(flags, message)",
			"#define WriteLine_W(message)",
			"#define WriteLine_Wx(flags, message)",
			"#define Write_D(message)",
			"#define Write_Dx(flags, message)",
			"#define Write_E(message)",
			"#define Write_Ex(flags, message)",
			"#define Write_I(message)",
			"#define Write_Ix(flags, message)",
			"#define Write_N(message)",
			"#define Write_Nx(flags, message)",
			"#define Write_O(message)",
			"#define Write_Ox(flags, message)",
			"#define Write_R(message)",
			"#define Write_Rx(flags, message)",
			"#define Write_W(message)",
			"#define Write_Wx(flags, message)",
			"Aoc2022_02_Result_t GetAoc2022_02_ResultForChar(char c)",
			"Aoc2022_02_Result_t GetAoc2022_02_ResultForMoves(Aoc2022_02_t yourMove, Aoc2022_02_t opponentMove)",
			"Aoc2022_02_t GetAoc2022_02_ForChar(char c)",
			"Aoc2022_02_t GetAoc2022_02_Pair(Aoc2022_02_t enumValue, Aoc2022_02_Result_t otherShouldGetResult)",
			"Aoc_2021_02_Instruction_t ParseAoc_2021_02_Instruction(MyStr_t instructionStr)",
			"AppState_t GetCurrentAppState()",
			"Axis_t AxisFromIndex(u64 index)",
			"Axis_t GetDir2Axis(Dir2_t dir2)",
			"Axis_t GetDir3Axis(Dir3_t dir3)",
			"Basis_t BasisNormalize(Basis_t basis)",
			"Basis_t NewBasis(v3 right, v3 up, v3 forward, bool normalize = true)",
			"Basis_t NewBasisForwardUp(v3 forward, v3 up, bool normalize = true)",
			"Basis_t NewBasisRightUp(v3 right, v3 up, bool normalize = true)",
			"Basis_t QuatGetBasis(quat quaternion)",
			"Bezier3_t Bezier3Rotate(Bezier3_t curve, r32 rotation)",
			"Bezier3_t Bezier3RotateAround(Bezier3_t curve, r32 rotation, v2 rotationOrigin)",
			"Bezier3_t NewBezier3(v2 start, v2 control, v2 end)",
			"Bezier3_t ToBezier3(v2 startPos, BezierPathPart_t pathPart)",
			"Bezier4_t Bezier4Rotate(Bezier4_t curve, r32 rotation)",
			"Bezier4_t Bezier4RotateAround(Bezier4_t curve, r32 rotation, v2 rotationOrigin)",
			"Bezier4_t GetBezierCurveForQuarterCircle(v2 center, r32 radius, u8 dir = Dir2_Right|Dir2_Down)",
			"Bezier4_t NewBezier4(v2 start, v2 control1, v2 control2, v2 end)",
			"Bezier4_t ToBezier4(v2 startPos, BezierPathPart_t pathPart)",
			"BezierPathPart_t NewBezierPathPartCurve3(v2 control, v2 endPos)",
			"BezierPathPart_t NewBezierPathPartCurve4(v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t NewBezierPathPartLine(v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartCurve3(BezierPath_t* path, v2 control, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartCurve4(BezierPath_t* path, v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedCurve3(BezierPath_t* path, v2 startPos, v2 control, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedCurve4(BezierPath_t* path, v2 startPos, v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedLine(BezierPath_t* path, v2 startPos, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartLine(BezierPath_t* path, v2 endPos)",
			"BktArrayBucket_t* BktArrayGetLastUsedBucket(BktArray_t* array)",
			"Circle_t NewCircle(v2 center, r32 radius)",
			"ColorHSV_t ColorHSVFromRGB(Color_t color)",
			"Color_t ColorComplementary(Color_t color)",
			"Color_t ColorComplementaryOld(Color_t color)",
			"Color_t ColorDarken(Color_t color, u8 amount)",
			"Color_t ColorDesaturate(Color_t color, r32 saturation)",
			"Color_t ColorLerp(Color_t start, Color_t end, r32 amount)",
			"Color_t ColorLighten(Color_t color, u8 amount)",
			"Color_t ColorMultiply(Color_t color1, Color_t color2)",
			"Color_t ColorMultiplyAlpha(Color_t color, u8 alphaValue)",
			"Color_t ColorMultiplyAlphaR32(Color_t color, r32 amount)",
			"Color_t ColorOpposite(Color_t color)",
			"Color_t ColorRGBFromHSV(ColorHSV_t colorHsv)",
			"Color_t GetGreyscaleColorByIndex(u64 index)",
			"Color_t GetGutterBlockColorForFileName(MyStr_t fileName)",
			"Color_t GetPredefPalColorByIndex(u64 index)",
			"Color_t GetPureColorByIndex(u64 index)",
			"Color_t NewColor(u8 r, u8 g, u8 b)",
			"Color_t PartsParamColorChooseValue(RandomSeries_t* random, const PartsParamColor_t* param)",
			"Color_t ToColor(Colorf_t colorf)",
			"Colorf_t ColorfComplementary(Colorf_t color)",
			"Colorf_t ColorfDarken(Colorf_t color, r32 amount)",
			"Colorf_t ColorfDesaturate(Colorf_t color, r32 saturation)",
			"Colorf_t ColorfLerp(Colorf_t start, Colorf_t end, r32 amount)",
			"Colorf_t ColorfLighten(Colorf_t color, r32 amount)",
			"Colorf_t ColorfMultiply(Colorf_t color1, Colorf_t color2)",
			"Colorf_t ColorfMultiplyAlpha(Colorf_t color, r32 alphaValue)",
			"Colorf_t ColorfOpposite(Colorf_t color)",
			"Cone_t NewCone(v3 base, r32 height, r32 radius)",
			"ConfirmDialogBtn_t* AddConfirmDialogBtn(ConfirmDialog_t* dialog, MyStr_t buttonDisplayStr, u64 buttonValue)",
			"ConfirmDialogBtn_t* GetConfirmDialogBtn(ConfirmDialog_t* dialog, u64 buttonValue)",
			"ConfirmDialog_t* AllocConfirmDialog(MyStr_t message, MemArena_t* memArena)",
			"ConfirmDialog_t* GetConfirmDialogById(u64 dialogId)",
			"CyclicFunc2D_t NewCyclicFunc2D(CyclicFuncType_t type, v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DConstant(v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DCosine(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DCustom(CyclicFunc2DCallback_f* callback)",
			"CyclicFunc2D_t NewCyclicFunc2DSaw(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DSine(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DSquare(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DTangent(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc_t NewCyclicFunc(CyclicFuncType_t type, r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncConstant(r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncCosine(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncCustom(CyclicFuncCallback_f* callback)",
			"CyclicFunc_t NewCyclicFuncSaw(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncSine(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncSquare(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncTangent(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"Cylinder_t NewCylinder(v3 base, r32 height, r32 radius)",
			"DebugCommandInfoList_t CreateDebugCommandInfoList(const char** infoStrsArray, u64 numInfoStrs)",
			"DebugCommandInfoList_t GameGetDebugCommandInfoList()",
			"DebugCommandInfoList_t PigGetDebugCommandInfoList()",
			"Dir2Ex_t Dir2ExFromIndex(u64 index)",
			"Dir2Ex_t Dir2ExOpposite(Dir2Ex_t dir2ex)",
			"Dir2_t Dir2Clockwise(Dir2_t dir2, u64 numQuarterTurns = 1)",
			"Dir2_t Dir2CounterClockwise(Dir2_t dir2, u64 numQuarterTurns = 1)",
			"Dir2_t Dir2FromCcwIndex(u64 index)",
			"Dir2_t Dir2FromCcwIndexStartingWith(Dir2_t startingDir, u64 index)",
			"Dir2_t Dir2FromCwIndex(u64 index)",
			"Dir2_t Dir2FromCwIndexStartingWith(Dir2_t startingDir, u64 index)",
			"Dir2_t Dir2FromIndex(u64 index)",
			"Dir2_t Dir2Opposite(Dir2_t dir2)",
			"Dir2_t GetCardinalDir2sFromDir2Ex(Dir2Ex_t diagonalDir)",
			"Dir2_t ToDir2(v2 vector)",
			"Dir3Ex_t Dir3ExFromIndex(u64 index)",
			"Dir3Ex_t Dir3ExOpposite(Dir3Ex_t dir3ex)",
			"Dir3_t Dir3FromIndex(u64 index)",
			"Dir3_t Dir3Opposite(Dir3_t dir3)",
			"Dir3_t ToDir3(v3 vector)",
			"Directory_t* GetDirectory(Directory_t* root, MyStr_t path)",
			"Dodec_t NewDodec(v3 center, r32 sideLength, quat rotation)",
			"FontBake_t* AddSpriteSheetAsFontBake(Font_t* font, FontFace_t* face, SpriteSheet_t* spriteSheet, bool scalable, bool colored)",
			"FontBake_t* FontAddBakeToActiveFace(Font_t* font, FontFace_t* face, v2i bakeSize, u64 numRanges, PlatFontRange_t* ranges)",
			"FontBake_t* GetFontBakeForChar(Font_t* font, FontFace_t* face, u32 codepoint, FontCharInfo_t** infoOut = nullptr, FontRange_t** rangeOut = nullptr)",
			"FontCharInfo_t* GetFontCharInfoInBake(Font_t* font, FontFace_t* face, FontBake_t* bake, u32 codepoint, FontRange_t** rangeOut = nullptr)",
			"FontFaceSelector_t SelectDefaultFontFace()",
			"FontFaceSelector_t SelectFontFace(i32 fontSize, bool bold = false, bool italic = false)",
			"FontFace_t* FontStartFace(Font_t* font, MyStr_t fontName, i32 fontSize, bool bold, bool italic, u64 numBakesExpected = 0)",
			"FontFace_t* GetFontFace(Font_t* font, FontFaceSelector_t selector)",
			"FontHandle_t GetFontHandle(const Font_t* fontPointer)",
			"FrameBuffer_t* GetPostProcessingChainInputBuffer(PostProcessingChain_t* chain, u64 inputIndex)",
			"FrameBuffer_t* PostProcessingChainAddInputBuffer(PostProcessingChain_t* chain, u64 inputIndex)",
			"FrameBuffer_t* PostProcessingChainAddInputBufferEx(PostProcessingChain_t* chain, u64 inputIndex, bool hdrBuffer, u8 channelFlags)",
			"FrameBuffer_t* RenderToPostProcessingChainInput(PostProcessingChain_t* chain, u64 inputIndex)",
			"Frustum_t NewFrustum(v3 origin, v3 direction, v3 upVector, v2 fov, r32 zNear, r32 zFar)",
			"Hexagon_t NewHexagon(v2 center, r32 radiusOrSideLength, r32 rotation = 0.0f)",
			"LineParser_t NewLineParser(MyStr_t fileContents)",
			"MemArena_t AllocBufferArena(MemArena_t* sourceArena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"MemArena_t* GetTempArena()",
			"Model_t CreateModelFromObjModelData(ObjModelData_t* objData, MemArena_t* memArena)",
			"MusicHandle_t GetMusicHandle(const Sound_t* musicPointer)",
			"MyStr_t AocSolutionFunc(AocSolution_t solution, u64 dataSize, void* dataPntr)",
			"MyStr_t CombineStrs(MemArena_t* memArena, MyStr_t str1, MyStr_t str2)",
			"MyStr_t ConvertUcs2StrToUtf8(MemArena_t* memArena, const wchar_t* wideStrPntr, u64 wideStrLength)",
			"MyStr_t ConvertUcs2StrToUtf8Nt(MemArena_t* memArena, const wchar_t* nullTermWideStr)",
			"MyStr_t FindStrParensPart(MyStr_t target, char openParensChar = '[', char closeParensChar = ']')",
			"MyStr_t FormatBytes(u64 numBytes, MemArena_t* memArena)",
			"MyStr_t FormatMilliseconds(u64 milliseconds, MemArena_t* memArena)",
			"MyStr_t FormatRealTime(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t GetDebugConsoleLinesAsCopyText(DebugConsole_t* console, DebugConsoleTextPos_t startPos, DebugConsoleTextPos_t endPos, MemArena_t* memArena, bool includeLinePrefixes)",
			"MyStr_t GetDirectoryPart(MyStr_t filePath)",
			"MyStr_t GetElapsedString(MemArena_t* memArena, u64 timespanInSecs)",
			"MyStr_t GetFifoLineMetaString(const StringFifoLine_t* line)",
			"MyStr_t GetFifoLineText(const StringFifoLine_t* line)",
			"MyStr_t GetFileNamePart(MyStr_t filePath, bool includeExtension = true)",
			"MyStr_t NewStr(u64 length, char* pntr)",
			"MyStr_t ParseInputCharSyntax(MyStr_t input, MemArena_t* memArena, u64* numItemsParsedOut = nullptr)",
			"MyStr_t PigGetDebugBindingsFilePath(MemArena_t* memArena, MyStr_t applicationName, MyStr_t fileName)",
			"MyStr_t PigGetSettingStr(const PigSettings_t* settings, MyStr_t key, MyStr_t defaultValue, bool ignoreCase = true)",
			"MyStr_t PigGetSettingsFilePath(MemArena_t* tempArena, MemArena_t* memArena, MyStr_t applicationName, MyStr_t fileName, PlatApiGetSpecialFolderPath_f* getSpecialFolderPathFunc = nullptr)",
			"MyStr_t PigSerializeSettings(const PigSettings_t* settings, MemArena_t* memArena)",
			"MyStr_t PrintInArenaStr(MemArena_t* arena, const char* formatString, ...)",
			"MyStr_t SerializeSpriteSheetMeta(const SpriteSheet_t* sheet, MemArena_t* memArena)",
			"MyStr_t StrReplace(MyStr_t str, MyStr_t target, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSubstring(MyStr_t* target, u64 startIndex, u64 endIndex)",
			"MyStr_t StrSubstringLength(MyStr_t* target, u64 startIndex, u64 length)",
			"MyStr_t StringRepeat(MemArena_t* memArena, MyStr_t str, u64 numRepetitions)",
			"MyStr_t TempFormatMilliseconds(u64 milliseconds)",
			"MyStr_t TempFormatRealTime(const RealTime_t* realTime, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t TextboxGetSelectedText(Textbox_t* tb, bool giveWholeTextIfEmptySelection = false)",
			"MyStr_t UnescapeQuotedStringInArena(MemArena_t* memArena, MyStr_t target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"MyStr_t* SplitString(MemArena_t* memArena, MyStr_t target, MyStr_t delineator, u64* numPiecesOut = nullptr, bool ignoreCase = false)",
			"MyWideStr_t ConvertUtf8StrToUcs2(MemArena_t* memArena, MyStr_t utf8Str)",
			"Particle_t* AllocParticle(ParticleEngine_t* engine, u8 flags, const SpriteSheet_t* sheet,\n\tv2i sheetFrame, r32 frameTime, u32 numFrames, u32 frameOffset,\n\tr32 depth, r32 lifeSpan,\n\tv2 position, v2 velocity, v2 acceleration, r32 velocityDamping,\n\tr32 rotation, r32 rotationVelocity, r32 rotationAcceleration, r32 rotVelocityDamping,\n\tr32 scaleStart, r32 scaleEnd,\n\tColor_t colorStart, Color_t colorEnd)",
			"PartsParamColor_t NewPartsParamColor(PartsDistroFunc_t distroFunc, Color_t minColor, Color_t maxColor)",
			"PartsParamColor_t NewPartsParamColor(PartsDistroFunc_t distroFunc, u64 numPossibleColors, const Color_t* possibleColorsPntr)",
			"PartsParamI32_t NewPartsParamI32(PartsDistroFunc_t distroFunc, i32 minValue, i32 maxValue)",
			"PartsParamR32_t NewPartsParamR32(PartsDistroFunc_t distroFunc, r32 minValue, r32 maxValue)",
			"PartsParamVec2_t NewPartsParamVec2(bool isPolar, PartsDistroFunc_t distroFunc, v2 minValue, v2 maxValue)",
			"PartsParamVec2i_t NewPartsParamVec2i(PartsDistroFunc_t distroFunc, v2i minValue, v2i maxValue)",
			"PartsPrefab_t* CopyPartsPrefab(MemArena_t* memArena, const PartsPrefab_t* prefab)",
			"PartsPrefab_t* FindPartsPrefab(PartsPrefabCollection_t* collection, MyStr_t name, u64* prefabIndexOut = nullptr)",
			"PartsPrefab_t* FindPartsPrefab(PartsPrefabCollection_t* collection, const char* nameNullTerm)",
			"Pentagon_t NewPentagon(v2 center, r32 sideLength, r32 rotation = 0.0f)",
			"PigDebugBindingsEntry_t* PigAddDebugBindingsEntryController(PigDebugBindings_t* bindings, ControllerBtn_t controllerBtn, MyStr_t commandStr)",
			"PigDebugBindingsEntry_t* PigAddDebugBindingsEntryFromTemplate(PigDebugBindings_t* bindings, const PigDebugBindingsEntry_t* templateBinding, MyStr_t commandStr)",
			"PigDebugBindingsEntry_t* PigAddDebugBindingsEntryKey(PigDebugBindings_t* bindings, u8 modifiers, Key_t key, MyStr_t commandStr)",
			"PigDebugBindingsEntry_t* PigAddDebugBindingsEntryMouse(PigDebugBindings_t* bindings, MouseBtn_t mouseBtn, MyStr_t commandStr)",
			"PigDebugBindingsEntry_t* PigFindDebugBinding(PigDebugBindings_t* bindings, const PigDebugBindingsEntry_t* comparisonBinding, u64* indexOut = nullptr)",
			"PigNotification_t* PigAllocNotification(PigNotificationQueue_t* queue, MemArena_t* memArena, DbgLevel_t dbgLevel, const char* message)",
			"PigNotification_t* PigPushNotification(PigNotificationQueue_t* queue, const char* filePath, u32 fileLine, const char* functionName, DbgLevel_t dbgLevel, u64 lifespan, const char* message) //pre-declared in pig_notification_macros.cpp",
			"PigNotification_t* PigPushNotificationPrint(PigNotificationQueue_t* queue, const char* filePath, u32 fileLine, const char* functionName, DbgLevel_t dbgLevel, u64 lifespan, const char* formatString, ...) //pre-declared in pig_notification_macros.cpp",
			"PigSettingsEntry_t* PigGetSettingEntry(PigSettings_t* settings, MyStr_t key, bool ignoreCase = true, u64* indexOut = nullptr)",
			"PigSettingsEntry_t* PigSetSettingBool(PigSettings_t* settings, MyStr_t key, bool value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigSettingsEntry_t* PigSetSettingR32(PigSettings_t* settings, MyStr_t key, r32 value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigSettingsEntry_t* PigSetSettingStr(PigSettings_t* settings, MyStr_t key, MyStr_t value, bool ignoreCase = true)",
			"PigSettingsEntry_t* PigSetSettingU64(PigSettings_t* settings, MyStr_t key, u64 value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigSettingsEntry_t* PigSetSettingV2(PigSettings_t* settings, MyStr_t key, v2 value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigSettingsEntry_t* PigSetSettingV2i(PigSettings_t* settings, MyStr_t key, v2i value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigSettingsEntry_t* PigSetSettingV3(PigSettings_t* settings, MyStr_t key, v3 value, bool ignoreCase = true, MemArena_t* useArenaForPrint = nullptr)",
			"PigWindowState_t* GetWindowStateById(u64 windowId, bool createState = false)",
			"PigWindowState_t* Pig_AddNewWindowState(const PlatWindow_t* window)",
			"Plane_t NewPlane(v3 normal, r32 distance)",
			"PrimitiveIndex3D_t NewPrimitiveIndex3D(u64 index, u64 faceIndex, v3 normal, v2 texCoord)",
			"PrimitiveIndexedVerts_t GenerateVertsForBox(Box_t box, MemArena_t* memArena)",
			"PrimitiveIndexedVerts_t GenerateVertsForSphere(Sphere_t sphere, u64 numRings, u64 numSegments, bool smoothShading, MemArena_t* memArena)",
			"Pyramid_t NewPyramid(v3 base, r32 height, v2 baseSize)",
			"Ray2_t NewRay2(v2 origin, v2 direction)",
			"Ray3_t NewRay3(v3 origin, v3 direction)",
			"ResourceState_t ResourceStateWarnOrError(ResourceState_t state)",
			"ResourceStatus_t* GetResourceStatus(ResourceType_t type, u64 resourceIndex)",
			"ResourceType_t FindResourceByPathOrName(MyStr_t searchStr, u64* resourceIndexOut, bool allowEndingPortionPartial = false, bool ignoreCase = true)",
			"ResourceType_t GetResourceByPntr(const void* resourcePntr, u64* resourceIndexOut = nullptr)",
			"ResourceWatch_t* WatchFileForResource(ResourceType_t resourceType, u64 resourceIndex, MyStr_t filePath)",
			"ShaderDynamicUniform_t* GetDynamicUniform(Shader_t* shader, MyStr_t uniformName, bool searchForUniform)",
			"ShaderHandle_t GetShaderHandle(const Shader_t* shaderPointer)",
			"Simplex_t NewSimplex(v3 vert0, v3 vert1, v3 vert2, v3 vert3)",
			"SoundHandle_t GetSoundHandle(const Sound_t* soundPointer)",
			"SoundInstanceHandle_t NewSoundInstanceHandle(SoundInstance_t* instance)",
			"SoundInstanceHandle_t PlayMusic(Sound_t* sound, MusicFade_t fade = MusicFade_Instant, r32 fadeDuration = 0)",
			"SoundInstanceHandle_t PlayMusicAfterSound(Sound_t* sound, SoundInstanceHandle_t soundInstanceHandle, MusicFade_t fade = MusicFade_Instant, r32 fadeDuration = 0)",
			"SoundInstanceHandle_t PlayMusicAfterSound(Sound_t* sound, SoundInstance_t* soundInstance, MusicFade_t fade = MusicFade_Instant, r32 fadeDuration = 0)",
			"SoundInstanceHandle_t PlaySawNote(r32 volume, r64 frequency, u64 durationMs,\n\tu64 attackTime = 0, EasingStyle_t attackCurve = EasingStyle_None, u64 falloffTime = 0, EasingStyle_t falloffCurve = EasingStyle_None)",
			"SoundInstanceHandle_t PlaySineNote(SoundInstanceHandle_t soundToWaitFor, r32 volume, r64 frequency, u64 durationMs,\n\tu64 attackTime = 0, EasingStyle_t attackCurve = EasingStyle_None, u64 falloffTime = 0, EasingStyle_t falloffCurve = EasingStyle_None)",
			"SoundInstanceHandle_t PlaySound(const Sound_t* sound, r32 volume,\n\tu64 attackTime = 0, EasingStyle_t attackCurve = EasingStyle_None, u64 falloffTime = 0, EasingStyle_t falloffCurve = EasingStyle_None)",
			"SoundInstanceHandle_t PlaySquareNote(r32 volume, r64 frequency, u64 durationMs,\n\tu64 attackTime = 0, EasingStyle_t attackCurve = EasingStyle_None, u64 falloffTime = 0, EasingStyle_t falloffCurve = EasingStyle_None)",
			"SoundInstanceHandle_t SoftPlayMusic(Sound_t* sound, MusicFade_t fade = MusicFade_Instant, r32 fadeDuration = 0)",
			"SoundInstance_t* GetSoundInstanceFromHandle(SoundInstanceHandle_t handle)",
			"SoundInstance_t* NewSoundInstance(SoundInstanceType_t type, bool isMusic)",
			"Sphere_t NewSphere(v3 center, r32 radius)",
			"SpriteSheetFrame_t* TryGetSpriteSheetFrame(SpriteSheet_t* sheet, MyStr_t frameName)",
			"SpriteSheetHandle_t GetSpriteSheetHandle(const SpriteSheet_t* spriteSheetPointer)",
			"SteamAvatar_t* GetSteamAvatar(u64 friendId, PlatSteamFriendAvatarSize_t size, bool beginLoad = true)",
			"StringFifoLine_t* StringFifoPushLine(StringFifo_t* fifo, MyStr_t text)",
			"StringFifoLine_t* StringFifoPushLineExt(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"TextMeasure_t MeasureTextInFont(MyStr_t text, const Font_t* font, FontFaceSelector_t faceSelector, r32 scale = 1.0f, r32 maxWidth = 0.0f, FontFlowInfo_t* flowInfoOut = nullptr, FontFlowCallbacks_t* callbacks = nullptr)",
			"TextMeasure_t MeasureTextInFont(const char* nullptrText, const Font_t* font, FontFaceSelector_t faceSelector, r32 scale = 1.0f, r32 maxWidth = 0.0f, FontFlowInfo_t* flowInfoOut = nullptr, FontFlowCallbacks_t* callbacks = nullptr)",
			"TextMeasure_t RcMeasureText(MyStr_t text, r32 maxWidth = 0, FontFlowInfo_t* infoOut = nullptr)",
			"TextParser_t NewTextParser(MyStr_t fileContents)",
			"TextureHandle_t GetTextureHandle(const Texture_t* texturePointer)",
			"Texture_t* GetPointer(TextureHandle_t* handle)",
			"Triangle2D_t NewTriangle2D(v2 vert0, v2 vert1, v2 vert2)",
			"Triangle3D_t NewTriangle3D(v3 vert0, v3 vert1, v3 vert2)",
			"TriangulateVert_t* GetNextTriangulateVert(TriangulateVert_t* vertices, u64 totalNumVertices, u64 startIndex)",
			"TriangulateVert_t* GetPrevTriangulateVert(TriangulateVert_t* vertices, u64 totalNumVertices, u64 startIndex)",
			"TryGetSettingResult_t PigTryGetSettingBool(const PigSettings_t* settings, MyStr_t key, bool* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"TryGetSettingResult_t PigTryGetSettingR32(const PigSettings_t* settings, MyStr_t key, r32* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"TryGetSettingResult_t PigTryGetSettingU64(const PigSettings_t* settings, MyStr_t key, u64* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"TryGetSettingResult_t PigTryGetSettingV2(const PigSettings_t* settings, MyStr_t key, v2* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"TryGetSettingResult_t PigTryGetSettingV2i(const PigSettings_t* settings, MyStr_t key, v2i* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"TryGetSettingResult_t PigTryGetSettingV3(const PigSettings_t* settings, MyStr_t key, v3* valueOut = nullptr, bool ignoreCase = true, TryParseFailureReason_t* parseFailureReasonOut = nullptr)",
			"Vector2_t NewVec2(r32 x, r32 y)",
			"Vector2i_t NewVec2i(i32 x, i32 y)",
			"Vector3_t NewVec3(r32 x, r32 y, r32 z)",
			"Vector3i_t NewVec3i(i32 x, i32 y, i32 z)",
			"Vector4_t NewVec4(r32 x, r32 y, r32 z, r32 w)",
			"Vector4i_t NewVec4i(i32 x, i32 y, i32 z, i32 w)",
			"VectorImgFillType_t GetVectorImgFillTypeForSvgFillStyle(SvgFillStyle_t fillStyle)",
			"VectorImgHandle_t GetVectorImgHandle(const VectorImg_t* vectorImgPointer)",
			"VectorImgLoop_t CreateVectorImgLoop(VectorImgPart_t* part, bool loopShapes = true, bool loopParts = false, bool loopParentPart = false)",
			"VectorImgPart_t* FindVectorImgPartByName(VectorImgPart_t* base, MyStr_t targetName, bool ignoreCase = true, bool giveBaseIfNameMatches = false)",
			"VectorImgPart_t* GetVectorImgPartByIndexArray(VectorImgPart_t* base, u64 numIndices, u64* indices)",
			"VectorImgStrokeType_t GetVectorImgStrokeTypeForSvgStrokeStyle(SvgStrokeStyle_t strokeStyle)",
			"VertexArrayObject_t* RcGetVertexArrayObj(u64 windowId, VertexType_t vertexType)",
			"Wedge_t NewWedge(v3 bottomLeft, v3 size)",
			"WordBreakCharClass_t GetWordBreakCharClass(u32 codepoint)",
			"WordTreeLeaf_t* WordTreeAddLeaf(WordTree_t* tree, MyStr_t word)",
			"WordTreeLeaf_t* WordTreeAddPntr(WordTree_t* tree, MyStr_t word, void* valuePntr)",
			"WordTreeLeaf_t* WordTreeAddU64(WordTree_t* tree, MyStr_t word, u64 value64)",
			"WordTreeLeaf_t* WordTreeGetLeaf(WordTree_t* tree, MyStr_t word)",
			"WordTreeNode_t* WordTreeAddNode(WordTree_t* tree, WordTreeNode_t* node, char childChar, WordTreeLeaf_t** leafOut)",
			"XmlParser_t NewXmlParser(MemArena_t* arenaForLists, MyStr_t fileContents)",
			"XmlProperty_t* GetXmlProperty(XmlToken_t* token, MyStr_t propertyKey, bool ignoreCase = false)",
			"bool AocFindU64(VarArray_t* arrayPntr, u64 number, u64* foundIndexOut = nullptr)",
			"bool AreBasisEqual(Basis_t left, Basis_t right, r32 tolerance = 0.001f)",
			"bool AreCharsHexidecimal(u64 numChars, char* charsPntr)",
			"bool BasicallyEqualColorf(Colorf_t left, Colorf_t right, r32 tolerance = 0.001f)",
			"bool BoxBasicallyEqual(box left, box right, r32 tolerance = 0.001f)",
			"bool BoxesIntersect(box boundingBox1, box boundingBox2, bool inclusive = true)",
			"bool BoxiEqual(boxi left, boxi right)",
			"bool BoxisIntersect(boxi boundingBox1, boxi boundingBox2, bool inclusive = true)",
			"bool BufferIsNullTerminated(u64 bufferSize, const char* bufferPntr)",
			"bool CheckIfInputEventWasHandled(InputEvent_t* inputEvent)",
			"bool ControllerBtnDown(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnDownRaw(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnPressed(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnPressedPlatRepeating(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnPressedPlatRepeatingRaw(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnPressedRaw(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnPressedRepeating(i32 controllerIndex, ControllerBtn_t btn, u64 repeatDelay, u64 repeatPeriod)",
			"bool ControllerBtnReleased(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnReleasedRaw(i32 controllerIndex, ControllerBtn_t btn)",
			"bool ControllerBtnRepeatedRaw(i32 controllerIndex, ControllerBtn_t btn, u64 delay, u64 period)",
			"bool CreateFoldersForPath(MyStr_t folderOrFilePath)",
			"bool CreateFrameBuffer(MemArena_t* memArena, FrameBuffer_t* bufferOut, v2i size, u64 antialiasingNumSamples, bool isHdrBuffer = false, u8 channelFlags = FrameBufferChannel_Default)",
			"bool CreateShader(MemArena_t* memArena, Shader_t* shaderOut, MyStr_t shaderCode, VertexType_t vertexType, u32 requiredUniforms)",
			"bool CreateShaderMultiPieceEnd(Shader_t* shaderOut)",
			"bool CreateSpriteSheet(MemArena_t* memArena, SpriteSheet_t* sheetOut, const PlatImageData_t* imageData, v2i padding, v2i numFrames, bool pixelated, bool useTextureArray)",
			"bool CreateTexture(MemArena_t* memArena, Texture_t* textureOut, const PlatImageData_t* imageData, bool pixelated, bool repeating, bool reverseByteOrder = false, bool generateMipmap = true, u64 antialiasingNumSamples = 0)",
			"bool CreateTextureArray(MemArena_t* memArena, Texture_t* textureOut, u64 numLayers, const PlatImageData_t* layers, bool pixelated, bool repeating, bool reverseByteOrder = false, bool generateMipmaps = true)",
			"bool CreateVectorImgFromSvg(MemArena_t* memArena, VectorImg_t* imageOut, const SvgData_t* svgData)",
			"bool CreateVertBufferFromIndexedPrimitiveVerts3D(MemArena_t* memArena, VertBuffer_t* bufferOut, bool dynamic, const PrimitiveIndexedVerts_t* primVerts, Color_t color, bool copyVertices)",
			"bool DebugConsolePushInputHistory(DebugConsole_t* console, MyStr_t newInputStr)",
			"bool Deser_FindNamedColor(const VarArray_t* namedColorsArray, MyStr_t name, Color_t* colorOut)",
			"bool Deser_ParseDistroFuncPart(MyStr_t* strPntr, PartsDistroFunc_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool Deser_ParseTypeParamR32(ProcessLog_t* log, TextParser_t* parser, VarArray_t* previousKeys, PartsType_t* currentType, PartsParamR32_t* paramOut, ParsingToken_t* token)",
			"bool Deser_WasKeySeen(const VarArray_t* previousKeysArray, MyStr_t key)",
			"bool DidMouseMove()",
			"bool DoesAppStateCoverBelow(AppState_t appState)",
			"bool DoesMemArenaSupportFreeing(MemArena_t* arena)",
			"bool FindNextCharInStr(MyStr_t target, u64 startIndex, MyStr_t searchCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextUnknownCharInStr(MyStr_t target, u64 startIndex, MyStr_t knownCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextWhitespaceInStr(MyStr_t target, u64 startIndex, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindObjMaterialByName(ObjModelData_t* objData, MyStr_t materialName, u64* materialIndexOut, ObjModelDataMaterial_t** materialOut = nullptr)",
			"bool FindSubstring(MyStr_t target, MyStr_t substring, u64* indexOut = nullptr, bool ignoreCase = false, u64 startIndex = 0)",
			"bool FreeMem(MemArena_t* arena, void* allocPntr, u64 allocSize = 0, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"bool GameHandleDebugCommand(MyStr_t command, u64 numArguments, MyStr_t* arguments, MyStr_t fullInputStr)",
			"bool GameSaveSettings()",
			"bool GenerateVertBufferForSvgPathShape(SvgShape_t* shape, u64 numCurveVertices, v2** debugVerticesOut = nullptr, u64* debugNumVerticesOut = nullptr)",
			"bool GenerateVertBufferForVectorImgPathShape(VectorImgShape_t* shape, u64 numCurveVertices, v2** debugVerticesOut = nullptr, u64* debugNumVerticesOut = nullptr, bool ignoreFailures = false)",
			"bool GetBoolArrayValue(bool* boolArray, v2i index, v2i size)",
			"bool GetConfirmDialogResult(u64 dialogId, u64* resultOut, u64 resultOnFailure = 0)",
			"bool GetEllipseArcCurveCenterAndAngles(v2 start, v2 radius, r32 axisAngle, u8 arcFlags, v2 end, v2* centerOut = nullptr, r32* startAngleOut = nullptr, r32* angleDeltaOut = nullptr)",
			"bool GetFontInfoForCharAndSelector(Font_t* font, FontFaceSelector_t selector, u32 codepoint, FontFace_t** faceOut = nullptr, FontBake_t** bakeOut = nullptr, FontRange_t** rangeOut = nullptr, FontCharInfo_t** charInfoOut = nullptr)",
			"bool GetTextureData(Texture_t* texture, MemArena_t* memArena, PlatImageData_t* imageDataOut)",
			"bool GetTextureDataSubPart(Texture_t* texture, reci subPartRec, MemArena_t* memArena, PlatImageData_t* imageDataOut)",
			"bool HandleBasicTypingToEditString(MemArena_t* allocAndFreeArena, MyStr_t* editString)",
			"bool IsAlignedTo(const void* memoryPntr, AllocAlignment_t alignment)",
			"bool IsAppStateActive(AppState_t appState)",
			"bool IsAppStateInitialized(AppState_t appState)",
			"bool IsBasisLinearIndependent(Basis_t basis, r32 tolerance = 0.001f)",
			"bool IsCardinalDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsCardinalDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsCharAlphaNumeric(u32 codepoint)",
			"bool IsCharAlphabetic(u32 codepoint)",
			"bool IsCharAnsii(u32 codepoint)",
			"bool IsCharExtendedAnsii(u32 codepoint)",
			"bool IsCharHexadecimal(u32 codepoint)",
			"bool IsCharLowercaseAlphabet(u32 codepoint)",
			"bool IsCharNumeric(u32 codepoint)",
			"bool IsCharPairWordBreak(u32 prevCodepoint, u32 nextCodepoint, bool forward, bool subwords)",
			"bool IsCharPunctuationEnd(u32 codepoint)",
			"bool IsCharPunctuationStart(u32 codepoint)",
			"bool IsCharRenderableAnsii(u32 codepoint)",
			"bool IsCharSyntax(u32 codepoint)",
			"bool IsCharUppercaseAlphabet(u32 codepoint)",
			"bool IsCharWhitespace(u32 codepoint, bool includeNewLines = false)",
			"bool IsConfirmDialogDone(u64 dialogId, bool resultOnFailure = true)",
			"bool IsControllerBtnHandled(i32 controllerIndex, ControllerBtn_t btn, bool checkPress = true, bool checkRelease = true)",
			"bool IsControllerConnected(i32 controllerIndex)",
			"bool IsCurrentlyLostBetweenMonitors()",
			"bool IsDesktopRecLostBetweenMonitors(reci desktopRec)",
			"bool IsDiagonalDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsDiagonalDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsDialogOpen()",
			"bool IsDstActive(Month_t month, u8 day, u8 hour, DayOfWeek_t dayOfWeek)",
			"bool IsEmptyStr(MyStr_t target)",
			"bool IsFocused(const void* itemPntr)",
			"bool IsFocusedItemTyping()",
			"bool IsHandleFilled(const TextureHandle_t* handle)",
			"bool IsInsideBox(box boundingBox, v3 point)",
			"bool IsInsideBoxi(boxi boundingBox, v3i point, bool includePositiveEdges = false)",
			"bool IsInsideObb2D(obb2 rectangle, v2 point)",
			"bool IsInsideRec(rec rectangle, v2 point)",
			"bool IsInsideReci(reci rectangle, v2i point, bool includePositiveEdges = false)",
			"bool IsInsideTriangle(v2 p0, v2 p1, v2 p2, v2 test)",
			"bool IsItemInLinkedList(const LinkedList_t* list, const void* itemPntr, u64* indexOut = nullptr)",
			"bool IsKeyHandled(Key_t key, bool checkPress = true, bool checkRelease = true)",
			"bool IsKeyTypingRelated(Key_t key)",
			"bool IsMouseHandled(MouseBtn_t mouseBtn, bool checkPress = true, bool checkRelease = true)",
			"bool IsMouseInsideRec(rec rectangle)",
			"bool IsMouseInsideWindow()",
			"bool IsMouseOverAnything()",
			"bool IsMouseOverButton(Button_t* btn)",
			"bool IsMouseOverNamed(const char* expectedName, bool mustBeIndex0 = false)",
			"bool IsMouseOverNamedIndex(const char* expectedName, u64 index)",
			"bool IsMouseOverNamedPartial(const char* expectedName, bool mustBeIndex0 = false)",
			"bool IsMouseOverPrint(const char* formatString, ...)",
			"bool IsMouseOverTextbox(Textbox_t* tb)",
			"bool IsMusicQueuedAfterSound(const Sound_t* sound)",
			"bool IsNullStr(MyStr_t target)",
			"bool IsPlatImageDataPixelFilled(PlatImageData_t* imageData, v2i pixelPos, u8 minAlpha = 1, u8* alphaValueOut = nullptr)",
			"bool IsPntrInBktArray(const BktArray_t* array, const void* item, u64* indexOut = nullptr, bool lenient = false)",
			"bool IsPntrInsideRange(const void* testPntr, const void* rangeBase, u64 rangeSize)",
			"bool IsPolygonClockwise(u64 numVertices, v2* vertices)",
			"bool IsPostMeridian(u16 twentyFourHourValue)",
			"bool IsResourcePinned(ResourceType_t type, u64 resourceIndex)",
			"bool IsResourceReady(const void* resourcePntr)",
			"bool IsSequenceAllUnique(u64 numChars, char* charPntr)",
			"bool IsSingleDir2(Dir2_t dir2, bool allowNone = false)",
			"bool IsSingleDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsSingleDir3(Dir3_t dir3, bool allowNone = false)",
			"bool IsSingleDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsSomethingFocused()",
			"bool IsSoundInstanceHandleDonePlaying(SoundInstanceHandle_t handle)",
			"bool IsSoundInstanceTypeGenerated(SoundInstanceType_t instanceType)",
			"bool IsStrNullTerminated(MyStr_t target)",
			"bool IsStringValidIdentifier(u64 strLength, const char* strPntr, bool allowUnderscores = true, bool allowNumbers = true, bool allowLeadingNumbers = false, bool allowEmpty = false, bool allowSpaces = false)",
			"bool IsToDir3Ambiguous(v3i vector)",
			"bool IsTriangleClockwise(v2 p0, v2 p1, v2 p2)",
			"bool IsWindowLostBetweenMonitors(const PlatWindow_t* window)",
			"bool KeyDown(Key_t key)",
			"bool KeyDownRaw(Key_t key)",
			"bool KeyPressed(Key_t key)",
			"bool KeyPressedPlatRepeating(Key_t key)",
			"bool KeyPressedPlatRepeatingRaw(Key_t key)",
			"bool KeyPressedRaw(Key_t key)",
			"bool KeyPressedRepeating(Key_t key, u64 repeatDelay, u64 repeatPeriod)",
			"bool KeyReleased(Key_t key)",
			"bool KeyReleasedRaw(Key_t key)",
			"bool KeyRepeatedRaw(Key_t key, u64 delay, u64 period)",
			"bool LineParserGetLine(LineParser_t* parser, MyStr_t* lineOut)",
			"bool LoadShader(MemArena_t* memArena, Shader_t* shaderOut, MyStr_t filePath, VertexType_t vertexType, u32 requiredUniforms)",
			"bool LoadSpriteSheet(MemArena_t* memArena, SpriteSheet_t* sheetOut, MyStr_t filePath, v2i padding, v2i numFrames, bool pixelated, bool useTextureArray)",
			"bool LoadSteamAvatarForFriend(u64 friendId, PlatSteamFriendAvatarSize_t size)",
			"bool LoadTexture(MemArena_t* memArena, Texture_t* textureOut, MyStr_t filePath, bool pixelated, bool repeating, PlatImageData_t* imageDataOut = nullptr)",
			"bool LoadTextureArrayFromMultipleFiles(MemArena_t* memArena, Texture_t* textureOut, u64 numFiles, const MyStr_t* filePaths, bool pixelated, bool repeating)",
			"bool MemArenaVerify(MemArena_t* arena, bool assertOnFailure = false)",
			"bool MinNoInfinitiesR32(r32 value1, r32 value2, r32 value3, r32* outValue, u8* whichIsMaxOut = nullptr)",
			"bool MinNoInfinitiesR64(r64 value1, r64 value2, r64 value3, r64* outValue, u8* whichIsMaxOut = nullptr)",
			"bool MouseDown(MouseBtn_t mouseBtn)",
			"bool MouseDownRaw(MouseBtn_t mouseBtn)",
			"bool MouseHitNamed(const char* hitItemName, u64 priority = 1)",
			"bool MouseHitNamedIndex(const char* hitItemName, u64 index, u64 priority = 1)",
			"bool MouseHitPntr(const void* hitItemPntr, u64 priority = 1)",
			"bool MouseHitPntrIndex(const void* hitItemPntr, u64 index, u64 priority = 1)",
			"bool MouseHitPrintIndexPriority(u64 index, u64 priority, const char* formatString, ...)",
			"bool MouseHitRecNamed(rec rectangle, const char* hitItemName, u64 priority = 1)",
			"bool MouseHitRecNamedIndex(rec rectangle, const char* hitItemName, u64 index, u64 priority = 1)",
			"bool MouseHitRecPntr(rec rectangle, const void* hitItemPntr, u64 priority = 1)",
			"bool MouseHitRecPntrIndex(rec rectangle, const void* hitItemPntr, u64 index, u64 priority = 1)",
			"bool MouseHitRecPrintIndexPriority(rec rectangle, u64 index, u64 priority, const char* formatString, ...)",
			"bool MousePressed(MouseBtn_t mouseBtn)",
			"bool MousePressedRaw(MouseBtn_t mouseBtn)",
			"bool MousePressedRepeating(MouseBtn_t mouseBtn, u64 repeatDelay, u64 repeatPeriod)",
			"bool MouseReleased(MouseBtn_t mouseBtn)",
			"bool MouseReleasedRaw(MouseBtn_t mouseBtn)",
			"bool MouseRepeatedRaw(MouseBtn_t mouseBtn, u64 delay, u64 period)",
			"bool MouseScrolled()",
			"bool MouseScrolledRaw()",
			"bool MouseScrolledX()",
			"bool MouseScrolledXRaw()",
			"bool MouseScrolledY()",
			"bool MouseScrolledYRaw()",
			"bool Obb2DBasicallyEqual(obb2 left, obb2 right, r32 tolerance = 0.001f)",
			"bool PigDoBindingEntriesMatch(const PigDebugBindingsEntry_t* left, const PigDebugBindingsEntry_t* right)",
			"bool PigGetSettingBool(const PigSettings_t* settings, MyStr_t key, bool defaultValue, bool ignoreCase = true)",
			"bool PigHandleDebugCommand(MyStr_t command, u64 numArguments, MyStr_t* arguments, MyStr_t fullInputStr)",
			"bool PigIsSettingSet(const PigSettings_t* settings, MyStr_t key, bool ignoreCase = true)",
			"bool PigIsSettingSet(const PigSettings_t* settings, const char* keyNullTerm, bool ignoreCase = true)",
			"bool PigParseDebugCommand(MyStr_t commandStr) //pre-declared in pig_func_defs.h",
			"bool PigShouldWindowClose(const PlatWindow_t* window)",
			"bool PigTryDeserBindingStr(MyStr_t bindingStr, PigDebugBindingsEntry_t* bindingOut, ProcessLog_t* log = nullptr)",
			"bool PigTryDeserDebugBindings(MyStr_t fileContents, ProcessLog_t* log, PigDebugBindings_t* bindingsOut)",
			"bool PigTryDeserSettings(MyStr_t fileContents, ProcessLog_t* log, PigSettings_t* settingsOut, MemArena_t* memArena)",
			"bool PigTryGetSettingStr(const PigSettings_t* settings, MyStr_t key, MyStr_t* valueOut, bool ignoreCase = true)",
			"bool PigTryLoadDebugBindings(MyStr_t filePath, ProcessLog_t* log, PigDebugBindings_t* bindingsOut)",
			"bool PigTryLoadSettings(MyStr_t filePath, ProcessLog_t* log, PigSettings_t* settingsOut, MemArena_t* memArena, PlatApiReadFileContents_f* readFileFunc = nullptr, PlatApiFreeFileContents_f* freeFileFunc = nullptr)",
			"bool PigTrySaveSettings(MyStr_t filePath, const PigSettings_t* settings, MemArena_t* serializeArena)",
			"bool PigUnsetSetting(PigSettings_t* settings, MyStr_t key, bool ignoreCase = true)",
			"bool RayVsBox(Ray3_t ray, box boundingBox, RayVsBoxResult_t* result, bool giveNegativeTimes = false)",
			"bool RayVsObb2D(Ray2_t ray, obb2 boundingBox, RayVsObb2DResult_t* result, bool giveNegativeTimes = false)",
			"bool RayVsRectangle2D(Ray2_t ray, rec rectangle, RayVsRectangle2DResult_t* result, bool giveNegativeTimes = false)",
			"bool RcSetDynamicUniformMat4(MyStr_t uniformName, mat4 value)",
			"bool RcSetDynamicUniformMat4(const char* nullTermStr, mat4 value)",
			"bool RcSetDynamicUniformR32(MyStr_t uniformName, r32 value)",
			"bool RcSetDynamicUniformR32(const char* nullTermStr, r32 value)",
			"bool RcSetDynamicUniformVec2(MyStr_t uniformName, v2 value)",
			"bool RcSetDynamicUniformVec2(const char* nullTermStr, v2 value)",
			"bool RcSetDynamicUniformVec3(MyStr_t uniformName, v3 value)",
			"bool RcSetDynamicUniformVec3(const char* nullTermStr, v3 value)",
			"bool RcSetDynamicUniformVec4(MyStr_t uniformName, v4 value)",
			"bool RcSetDynamicUniformVec4(const char* nullTermStr, v4 value)",
			"bool RecBasicallyEqual(rec left, rec right, r32 tolerance = 0.001f)",
			"bool ReciEqual(reci left, reci right)",
			"bool RecsIntersect(rec rectangle1, rec rectangle2, bool inclusive = true)",
			"bool SplitDebugLineFileAndFuncStr(MyStr_t filePathAndFuncName, bool fullPath, MyStr_t* filePathOut, MyStr_t* funcNameOut)",
			"bool StrEndsWith(MyStr_t str, MyStr_t suffix, bool ignoreCase = false)",
			"bool StrEquals(MyStr_t target, MyStr_t comparison)",
			"bool StrEqualsIgnoreCase(MyStr_t target, MyStr_t comparison)",
			"bool StrHashExpand(StrHashDict_t* dict, u64 numItemsRequired)",
			"bool StrStartsWith(MyStr_t str, MyStr_t prefix, bool ignoreCase = false)",
			"bool TextParserGetToken(TextParser_t* parser, ParsingToken_t* tokenOut)",
			"bool Textbox_CharactersTyped(Textbox_t* tb, MyStr_t newCharacters)",
			"bool Textbox_MakeSpaceForBytes(Textbox_t* tb, u64 numNewBytes)",
			"bool Textbox_MoveCursor(Textbox_t* tb, bool forward, bool extendSelection, Textbox_MoveCursorType_t type)",
			"bool Textbox_RemoveCharacters(Textbox_t* tb, bool forwardRemove)",
			"bool TryDeserObjFile(MyStr_t objFileContents, ProcessLog_t* log, ObjModelData_t* objData, MemArena_t* memArena)",
			"bool TryDeserObjMaterialLibFile(MyStr_t matLibFileContents, ProcessLog_t* log, ObjModelData_t* objData, ObjModelDataMaterialLibrary_t* matLib)",
			"bool TryDeserOggFile(u64 oggFileSize, const void* oggFilePntr, ProcessLog_t* log, OggAudioData_t* oggDataOut, MemArena_t* memArena)",
			"bool TryDeserPartsPrefabCollection(MyStr_t fileContents, MemArena_t* memArena, ProcessLog_t* log, PartsPrefabCollection_t* collectionOut)",
			"bool TryDeserSpriteSheetMeta(MyStr_t fileContents, SpriteSheet_t* sheet, ProcessLog_t* log)",
			"bool TryDeserSvgFile(MyStr_t fileContents, ProcessLog_t* log, SvgData_t* dataOut, MemArena_t* memArena)",
			"bool TryDeserWavFile(u64 wavFileSize, const void* wavFilePntr, ProcessLog_t* log, WavAudioData_t* wavDataOut, MemArena_t* memArena)",
			"bool TryLoadSpriteSheetAndMeta(MemArena_t* memArena, MyStr_t filePath, MyStr_t metaFilePath, v2i sheetSize, v2i padding, bool pixelated, SpriteSheet_t* spriteSheetOut, bool dumpLogOnFailure = true)",
			"bool TryParseBool(MyStr_t str, bool* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseDir2(MyStr_t str, Dir2_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseDir3(MyStr_t str, Dir3_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseI16(MyStr_t str, i16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseI32(MyStr_t str, i32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseI64(MyStr_t str, i64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseI8(MyStr_t str, i8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseNamedColor(const VarArray_t* namedColorsArray, MyStr_t str, Color_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParsePartsEmissionShape(MyStr_t str, PartsEmissionShape_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParsePartsParamColor(const VarArray_t* namedColorsArray, MyStr_t str, PartsParamColor_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr, MyStr_t* failedColorStrOut = nullptr)",
			"bool TryParsePartsParamI32(MyStr_t str, PartsParamI32_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParsePartsParamR32(MyStr_t str, PartsParamR32_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParsePartsParamVec2(MyStr_t str, PartsParamVec2_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParsePartsParamVec2i(MyStr_t str, PartsParamVec2i_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseR32(MyStr_t str, r32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowSuffix = true, bool allowInfinity = false)",
			"bool TryParseR64(MyStr_t str, r64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowInfinity = false)",
			"bool TryParseReci(MyStr_t str, reci* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseSvgPathDataString(ProcessLog_t* log, MyStr_t dataStr, BezierPath_t* pathOut)",
			"bool TryParseSvgShapeStyleString(ProcessLog_t* log, MyStr_t styleStr, SvgFill_t* fillOut, SvgStroke_t* strokeOut)",
			"bool TryParseSvgTransformString(ProcessLog_t* log, MyStr_t transformStr, SvgTransform_t* transformOut)",
			"bool TryParseU16(MyStr_t str, u16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseU32(MyStr_t str, u32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseU64(MyStr_t str, u64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseU8(MyStr_t str, u8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true)",
			"bool TryParseV2(MyStr_t str, v2* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseV2i(MyStr_t str, v2i* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool UpdateAnimationDown(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationDownTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool UpdateAnimationUp(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationUpTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool VarArrayExpand(VarArray_t* array, u64 capacityRequired)",
			"bool Vec2BasicallyEqual(v2 left, v2 right, r32 tolerance = 0.001f)",
			"bool Vec2iEqual(v2i left, v2i right)",
			"bool Vec3BasicallyEqual(v3 left, v3 right, r32 tolerance = 0.001f)",
			"bool Vec3iEqual(v3i left, v3i right)",
			"bool Vec4BasicallyEqual(v4 left, v4 right, r32 tolerance = 0.001f)",
			"bool Vec4iEqual(v4i left, v4i right)",
			"bool VectorImgLoop(VectorImgLoop_t* loop)",
			"bool WasUnfocused(const void* itemPntr)",
			"bool XmlParserCheckIdentifierHasValidChars(XmlParser_t* parser, MyStr_t identifierStr, XmlParseResult_t* result, ProcessLog_t* log)",
			"bool XmlParserGetToken(XmlParser_t* parser, XmlParseResult_t* result, ProcessLog_t* log)",
			"bool* GetBoolArrayPntr(bool* boolArray, v2i index, v2i size)",
			"box BoxCubify(box boundingBox, bool makeLarger = true, bool center = true)",
			"box BoxDeflate(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxDeflateX(box boundingBox, r32 subWidth)",
			"box BoxDeflateY(box boundingBox, r32 subHeight)",
			"box BoxDeflateZ(box boundingBox, r32 subDepth)",
			"box BoxExpand(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxExpandX(box boundingBox, r32 extraWidth)",
			"box BoxExpandY(box boundingBox, r32 extraHeight)",
			"box BoxExpandZ(box boundingBox, r32 extraDepth)",
			"box BoxInflate(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxInflateX(box boundingBox, r32 extraWidth)",
			"box BoxInflateY(box boundingBox, r32 extraHeight)",
			"box BoxInflateZ(box boundingBox, r32 extraDepth)",
			"box BoxInvert(box boundingBox)",
			"box BoxInvertX(box boundingBox)",
			"box BoxInvertY(box boundingBox)",
			"box BoxInvertZ(box boundingBox)",
			"box BoxRetract(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxRetractX(box boundingBox, r32 subWidth)",
			"box BoxRetractY(box boundingBox, r32 subHeight)",
			"box BoxRetractZ(box boundingBox, r32 subDepth)",
			"box BoxScale(box boundingBox, r32 scalar)",
			"box BoxScale3(box boundingBox, r32 scaleX, r32 scaleY, r32 scaleZ)",
			"box BoxShift(box boundingBox, r32 amountX, r32 amountY, r32 amountZ)",
			"box BoxUninvert(box boundingBox)",
			"box GetSpriteSheetFrameArraySourceRec(const SpriteSheet_t* sheet, MyStr_t frameName, bool assertOnFailure = true)",
			"box NewBox(v3 bottomLeft, v3 size)",
			"box NewBoxCentered(v3 center, v3 size)",
			"box ToBox(boxi boundingBox)",
			"boxi BoxiBoth(boxi boundingBox1, boxi boundingBox2)",
			"boxi BoxiCubify(boxi boundingBox, bool makeLarger = true)",
			"boxi BoxiDeflate(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiDeflateX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiDeflateY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiDeflateZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiExpand(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiExpandToVec3i(boxi boundingBox, v3i newPoint)",
			"boxi BoxiExpandX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiExpandY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiExpandZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInflate(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiInflateX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiInflateY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiInflateZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInvert(boxi boundingBox)",
			"boxi BoxiInvertX(boxi boundingBox)",
			"boxi BoxiInvertY(boxi boundingBox)",
			"boxi BoxiInvertZ(boxi boundingBox)",
			"boxi BoxiRetract(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiRetractX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiRetractY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiRetractZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiScale(boxi boundingBox, i32 scalar)",
			"boxi BoxiScale3(boxi boundingBox, i32 scaleX, i32 scaleY, i32 scaleZ)",
			"boxi BoxiShift(boxi boundingBox, i32 amountX, i32 amountY, i32 amountZ)",
			"boxi BoxiUninvert(boxi boundingBox)",
			"boxi NewBoxi(v3i bottomLeft, v3i size)",
			"boxi NewBoxiBetween(v3i point1, v3i point2)",
			"char GetDir2Char(Dir2_t dir2)",
			"char GetHexChar(u8 hexValue, bool upperCase = true)",
			"char GetLowercaseAnsiiChar(char c)",
			"char GetUppercaseAnsiiChar(char c)",
			"char* AllocCharsAndFill(MemArena_t* arena, u64 numChars, const char* dataForFill, bool addNullTerm = true)",
			"char* AllocCharsAndFillNt(MemArena_t* arena, const char* nullTermStr, bool addNullTerm = true)",
			"char* PrintInArena(MemArena_t* arena, const char* formatString, ...)",
			"const FontCharInfo_t* FontFlow_FindCharInfo(FontFlowState_t* flowState, u32 codepoint)",
			"const FontFace_t* RcGetFontFace()",
			"const PartsPrefab_t* FindPartsPrefab(const PartsPrefabCollection_t* collection, MyStr_t name) //const variant",
			"const PartsPrefab_t* FindPartsPrefab(const PartsPrefabCollection_t* collection, const char* nameNullTerm) //const variant",
			"const PlatMonitorInfo_t* GetCurrentMonitorInfo(u64* monitorIndexOut = nullptr)",
			"const PlatMonitorInfo_t* GetCurrentMonitorInfoForDesktopRec(reci desktopRec, u64* monitorIndexOut = nullptr)",
			"const PlatMonitorInfo_t* GetCurrentMonitorInfoForWindow(const PlatWindow_t* window, u64* monitorIndexOut = nullptr)",
			"const PlatMonitorInfo_t* GetMonitorInfoByNumber(u64 designatedNumber)",
			"const PlatMonitorInfo_t* GetPrimaryMonitorInfo(u64* monitorIndexOut = nullptr)",
			"const PlatMonitorVideoMode_t* GetVideoModeWithResolution(const PlatMonitorInfo_t* monitorInfo, v2i resolution, bool giveClosestFit = false)",
			"const PlatWindow_t* GetWindowById(u64 windowId)",
			"const PlatWindow_t* GetWindowByIdHard(u64 windowId)",
			"const char* CheckOpenGlError(bool printUnkown = false)",
			"const char* FormatBytesNt(u64 numBytes, MemArena_t* memArena)",
			"const char* FormatMillisecondsNt(u64 milliseconds, MemArena_t* memArena)",
			"const char* FormatRealTimeNt(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const char* GetAoc2022_02Str(Aoc2022_02_t enumValue)",
			"const char* GetAocSolutionStr(AocSolution_t solution)",
			"const char* GetAoc_2021_02_InstructionStr(Aoc_2021_02_Instruction_t instruction)",
			"const char* GetAppStateChangeStr(AppStateChange_t stateChange)",
			"const char* GetAppStateStr(AppState_t appState)",
			"const char* GetButtonStyleStr(ButtonStyle_t style)",
			"const char* GetCyclicFuncTypeStr(CyclicFuncType_t funcType)",
			"const char* GetDayOfMonthString(u16 dayOfMonth)",
			"const char* GetDayOfWeekStr(DayOfWeek_t dayOfWeek, bool shortened = false)",
			"const char* GetDir2ExString(Dir2Ex_t dir2ex)",
			"const char* GetDir2String(Dir2_t dir2)",
			"const char* GetDir3ExString(Dir3Ex_t dir3ex)",
			"const char* GetDir3SideString(Dir3_t dir3)",
			"const char* GetDir3String(Dir3_t dir3)",
			"const char* GetDisplayCharStrForControllerBtn(ControllerType_t type, ControllerBtn_t controllerBtn)",
			"const char* GetDisplayCharStrForKey(Key_t key)",
			"const char* GetDisplayCharStrForMouseBtn(MouseBtn_t mouseBtn)",
			"const char* GetEasingStyleStr(EasingStyle_t style)",
			"const char* GetFileNamePartNt(const char* filePath)",
			"const char* GetFrameBufferErrorStr(FrameBufferError_t error)",
			"const char* GetGyDbgLevelStr(GyDbgLevel_t gyDbgLevel)",
			"const char* GetInputCharNameByCodepoint(u32 codepoint)",
			"const char* GetMainMenuBtnDisplayStr(MainMenuBtn_t mainMenuBtn)",
			"const char* GetMainMenuBtnStr(MainMenuBtn_t mainMenuBtn)",
			"const char* GetMemArenaTypeStr(MemArenaType_t arenaType)",
			"const char* GetMonthStr(Month_t month)",
			"const char* GetMusicFadeStr(MusicFade_t musicFade)",
			"const char* GetOggErrorStr(OggError_t wavError)",
			"const char* GetOpenGlErrorStr(GLenum glError, bool printUnkown = false)",
			"const char* GetParsingTokenTypeStr(ParsingTokenType_t type)",
			"const char* GetPartMovementTypeStr(PartMovementType_t movementType)",
			"const char* GetPartsDistroFuncStr(PartsDistroFunc_t func)",
			"const char* GetPartsEmissionShapeStr(PartsEmissionShape_t shape)",
			"const char* GetPartsTypeFlagStr(u8 flag)",
			"const char* GetPathOrNameForResource(ResourceType_t type, u64 resourceIndex)",
			"const char* GetPigDebugBindingTypeStr(PigDebugBindingType_t bindingType)",
			"const char* GetPigTryDeserDebugBindingsErrorStr(PigTryDeserDebugBindingsError_t error)",
			"const char* GetPigTryDeserSettingsErrorStr(PigTryDeserSettingsError_t error)",
			"const char* GetPolygonFillModeStr(PolygonFillMode_t mode)",
			"const char* GetRandomSeriesTypeStr(RandomSeriesType_t seriesType)",
			"const char* GetResourceSheetName(u64 sheetIndex)",
			"const char* GetResourceStateStr(ResourceState_t resourceState)",
			"const char* GetResourceTypeStr(ResourceType_t resourceType)",
			"const char* GetShaderErrorStr(ShaderError_t error)",
			"const char* GetSoundInstanceTypeStr(SoundInstanceType_t instanceType)",
			"const char* GetSpriteSheetErrorStr(SpriteSheetError_t error)",
			"const char* GetSpriteSheetMetaErrorStr(SpriteSheetMetaError_t error)",
			"const char* GetSvgFillStyleStr(SvgFillStyle_t fillStyle)",
			"const char* GetSvgPathDataCmdStr(SvgPathDataCmd_t pathDataCmd)",
			"const char* GetSvgShapeTypeStr(SvgShapeType_t shapeType)",
			"const char* GetSvgStrokeStyleStr(SvgStrokeStyle_t strokeStyle)",
			"const char* GetTextAlignmentStr(TextAlignment_t alignment)",
			"const char* GetTextureErrorStr(TextureError_t error)",
			"const char* GetTimeUnitStr(TimeUnit_t timeUnit, bool shortened = false)",
			"const char* GetTryDeserSvgFileErrorStr(TryDeserSvgFileError_t error)",
			"const char* GetTryDeserializeObjFileErrorStr(TryDeserializeObjFileError_t error)",
			"const char* GetTryGetSettingResultStr(TryGetSettingResult_t result)",
			"const char* GetTryParseFailureReasonStr(TryParseFailureReason_t reason)",
			"const char* GetValueSliderStyleStr(ValueSliderStyle_t sliderStyle)",
			"const char* GetVectorImgErrorStr(VectorImgError_t error)",
			"const char* GetVertBufferPrimitiveStr(VertBufferPrimitive_t primitive)",
			"const char* GetWavErrorStr(WavError_t wavError)",
			"const char* GetXmlParsingErrorStr(XmlParsingError_t error)",
			"const char* ParseAoc_2021_02_InstructionStr(Aoc_2021_02_Instruction_t enumValue)",
			"const char* PrintFrameBufferError(const FrameBuffer_t* buffer)",
			"const char* PrintTextureError(const Texture_t* texture)",
			"const char* Resources_GetPathForMusic(u64 musicIndex)",
			"const char* Resources_GetPathForShader(u64 shaderIndex, ResourceShaderMetaInfo_t* metaInfo = nullptr)",
			"const char* Resources_GetPathForSheet(u64 sheetIndex, ResourceSheetMetaInfo_t* metaInfo)",
			"const char* Resources_GetPathForSound(u64 soundIndex)",
			"const char* Resources_GetPathForTexture(u64 textureIndex, ResourceTextureMetaInfo_t* metaInfo)",
			"const char* Resources_GetPathForVectorImg(u64 vectorImgIndex)",
			"const char* Resources_GetPathOrNameForFont(u64 fontIndex, ResourceFontMetaInfo_t* metaInfo)",
			"const char* TempFormatMillisecondsNt(u64 milliseconds)",
			"const char* TempFormatRealTimeNt(const RealTime_t* realTime, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const void* GetFifoLineEndPntr(const StringFifoLine_t* line)",
			"const void* GetFocusedItemPntr()",
			"i32 CompareCodepoints(u32 codepoint1, u32 codepoint2)",
			"i32 CompareFuncI16(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI8(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncMyStr(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncR32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncR64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU16(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU8(const void* left, const void* right, void* contextPntr)",
			"i32 DebugConsoleTextPosCompare(DebugConsoleTextPos_t textPosLeft, DebugConsoleTextPos_t textPosRight)",
			"i32 GetRandI32(RandomSeries_t* series)",
			"i32 GetRandI32(RandomSeries_t* series, i32 min, i32 max)",
			"i32 PartsParamI32ChooseValue(RandomSeries_t* random, const PartsParamI32_t* param)",
			"i32 RoundUpToI32(i32 value, i32 chunkSize)",
			"i32 StrCompareIgnoreCase(MyStr_t str1, MyStr_t str2)",
			"i32 Vec2iDeterminant(v2i left, v2i right)",
			"i32 Vec2iDot(v2i left, v2i right)",
			"i32 Vec3iAmountInDir(v3i vector, Dir3_t direction)",
			"i32 Vec3iDeterminant(v3i left, v3i right)",
			"i32 Vec3iDot(v3i left, v3i right)",
			"i32 Vec4iDeterminant(v4i left, v4i right)",
			"i32 Vec4iDot(v4i left, v4i right)",
			"i64 FindCursorIndexInFlowedText(MyStr_t text, const Font_t* font, FontFaceSelector_t faceSelector, v2 relativePixelPos, r32 scale = 1.0f, r32 maxWidth = 0.0f, v2* foundPixelPosOut = nullptr, FontFlowInfo_t* flowInfoOut = nullptr)",
			"i64 FindVideoModeFramerateIndex(const PlatMonitorVideoMode_t* videoMode, i64 framerate, bool giveClosestFit = false)",
			"i64 QuickSortPartition(void* arrayPntr, u64 numElements, u64 elementSize, void* workingSpace, CompareFunc_f* compareFunc, void* contextPntr = nullptr)",
			"i64 RoundUpToI64(i64 value, i64 chunkSize)",
			"i8 GetRandI8(RandomSeries_t* series)",
			"i8 GetRandI8(RandomSeries_t* series, i8 min, i8 max)",
			"inline ColorHSV_t NewColorHsv(r32 hue, r32 saturation, r32 value)",
			"inline ColorHSV_t ToColorHsv(v3 vector3)",
			"inline Color_t ColorTransparent(Color_t color, r32 alpha)",
			"inline Colorf_t NewColorf(r32 r, r32 g, r32 b)",
			"inline Colorf_t ToColorf(Color_t color)",
			"inline WAV_RiffIterator_t WAV_NextChunk(WAV_RiffIterator_t iter)",
			"inline WAV_RiffIterator_t WAV_ParseChunkAt(void* dataPntr, void* stop)",
			"inline bool BasicallyEqualR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyEqualR64(r64 value1, r64 value2, r64 tolerance = 0.001f)",
			"inline bool IsInfiniteR32(r32 value)",
			"inline bool IsInfiniteR64(r64 value)",
			"inline bool32 WAV_IsValid(WAV_RiffIterator_t iter)",
			"inline i16 AbsDiffI16(i16 value1, i16 value2)",
			"inline i16 AbsI16(i16 value)",
			"inline i16 ClampI16(i16 value, i16 min, i16 max)",
			"inline i16 ClampI32toI16(i32 value)",
			"inline i16 ClampR32toI16(r32 value)",
			"inline i16 ConvertSampleR64ToI16(r64 sample)",
			"inline i16 SignOfI16(i16 value)",
			"inline i32 AbsDiffI32(i32 value1, i32 value2)",
			"inline i32 AbsI32(i32 value)",
			"inline i32 CeilDivI32(i32 dividend, i32 divisor)",
			"inline i32 CeilR32i(r32 value)",
			"inline i32 CeilToI32(i32 value, i32 chunkSize)",
			"inline i32 ClampI32(i32 value, i32 min, i32 max)",
			"inline i32 ClampU32toI32(u32 value)",
			"inline i32 ConvertSampleR64ToI32(r64 sample)",
			"inline i32 FloorR32i(r32 value)",
			"inline i32 MaxI32(i32 value1, i32 value2)",
			"inline i32 MinI32(i32 value1, i32 value2)",
			"inline i32 RandI32(i32 min, i32 max)",
			"inline i32 RoundR32i(r32 value)",
			"inline i32 SignOfI32(i32 value)",
			"inline i64 AbsDiffI64(i64 value1, i64 value2)",
			"inline i64 AbsI64(i64 value)",
			"inline i64 CeilR64i(r64 value)",
			"inline i64 ClampI64(i64 value, i64 min, i64 max)",
			"inline i64 FloorR64i(r64 value)",
			"inline i64 MaxI64(i64 value1, i64 value2)",
			"inline i64 MinI64(i64 value1, i64 value2)",
			"inline i64 RandI64(i64 min, i64 max)",
			"inline i64 RoundR64i(r64 value)",
			"inline i64 SignOfI64(i64 value)",
			"inline i8 AbsDiffI8(i8 value1, i8 value2)",
			"inline i8 AbsI8(i8 value)",
			"inline i8 ClampI32toI8(i32 value)",
			"inline i8 ClampI8(i8 value, i8 min, i8 max)",
			"inline i8 ConvertSampleR64ToI8(r64 sample)",
			"inline i8 ReadI8FromU8(u8 value)",
			"inline i8 SignOfI8(i8 value)",
			"inline r32 AbsR32(r32 value)",
			"inline r32 AcosR32(r32 value)",
			"inline r32 AsinR32(r32 value)",
			"inline r32 AtanJoinedR32(r32 value)",
			"inline r32 AtanR32(r32 y, r32 x)",
			"inline r32 CbrtR32(r32 value)",
			"inline r32 CeilR32(r32 value)",
			"inline r32 ClampR32(r32 value, r32 min, r32 max)",
			"inline r32 CosR32(r32 angle)",
			"inline r32 DecimalPartR32(r32 value)",
			"inline r32 FloorR32(r32 value)",
			"inline r32 LerpClampR32(r32 val1, r32 val2, r32 amount)",
			"inline r32 LerpR32(r32 val1, r32 val2, r32 amount)",
			"inline r32 MaxR32(r32 value1, r32 value2)",
			"inline r32 MinR32(r32 value1, r32 value2)",
			"inline r32 ModR32(r32 numerator, r32 denominator)",
			"inline r32 PowR32(r32 value, r32 power)",
			"inline r32 RandR32(r32 min, r32 max)",
			"inline r32 RoundR32(r32 value)",
			"inline r32 SawR32(r32 angle)",
			"inline r32 SignOfR32(r32 value)",
			"inline r32 SinR32(r32 angle)",
			"inline r32 SqrtR32(r32 value)",
			"inline r32 TanR32(r32 angle)",
			"inline r64 AbsR64(r64 value)",
			"inline r64 AcosR64(r64 value)",
			"inline r64 AsinR64(r64 value)",
			"inline r64 AtanJoinedR64(r64 value)",
			"inline r64 AtanR64(r64 y, r64 x)",
			"inline r64 CbrtR64(r64 value)",
			"inline r64 CeilR64(r64 value)",
			"inline r64 ClampR64(r64 value, r64 min, r64 max)",
			"inline r64 ConvertSampleI16ToR64(i16 sampleI16)",
			"inline r64 ConvertSampleI32ToR64(i32 sampleI32)",
			"inline r64 ConvertSampleI8ToR64(i8 sampleI8)",
			"inline r64 CosR64(r64 angle)",
			"inline r64 DecimalPartR64(r64 value)",
			"inline r64 FloorR64(r64 value)",
			"inline r64 LerpClampR64(r64 val1, r64 val2, r64 amount)",
			"inline r64 LerpR64(r64 val1, r64 val2, r64 amount)",
			"inline r64 MaxR64(r64 value1, r64 value2)",
			"inline r64 MinR64(r64 value1, r64 value2)",
			"inline r64 ModR64(r64 numerator, r64 denominator)",
			"inline r64 PowR64(r64 value, r64 power)",
			"inline r64 RandR64(r64 min, r64 max)",
			"inline r64 RoundR64(r64 value)",
			"inline r64 SawR64(r64 angle)",
			"inline r64 SignOfR64(r64 value)",
			"inline r64 SinR64(r64 angle)",
			"inline r64 SqrtR64(r64 value)",
			"inline r64 TanR64(r64 angle)",
			"inline u16 AbsDiffU16(u16 value1, u16 value2)",
			"inline u16 ClampU16(u16 value, u16 min, u16 max)",
			"inline u32 AbsDiffU32(u32 value1, u32 value2)",
			"inline u32 CeilDivU32(u32 dividend, u32 divisor)",
			"inline u32 CeilToU32(u32 value, u32 chunkSize)",
			"inline u32 ClampI32toU32(i32 value)",
			"inline u32 ClampU32(u32 value, u32 min, u32 max)",
			"inline u32 MaxU32(u32 value1, u32 value2)",
			"inline u32 MinU32(u32 value1, u32 value2)",
			"inline u32 RandU32(u32 min, u32 max)",
			"inline u32 WAV_GetChunkDataSize(WAV_RiffIterator_t iter)",
			"inline u32 WAV_GetType(WAV_RiffIterator_t iter)",
			"inline u64 AbsDiffU64(u64 value1, u64 value2)",
			"inline u64 CeilDivU64(u64 dividend, u64 divisor)",
			"inline u64 ClampU64(u64 value, u64 min, u64 max)",
			"inline u64 MaxU64(u64 value1, u64 value2)",
			"inline u64 MinU64(u64 value1, u64 value2)",
			"inline u8 AbsDiffU8(u8 value1, u8 value2)",
			"inline u8 ClampI32toU8(i32 value)",
			"inline u8 ClampU8(u8 value, u8 min, u8 max)",
			"inline u8 FlagsDiffU8(u8 flags1, u8 flags2)",
			"inline u8 StoreI8inU8(i8 value)",
			"inline void* WAV_GetChunkData(WAV_RiffIterator_t iter)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"mat4 Mat4Adjoint(mat4 matrix)",
			"mat4 Mat4Cofactor(mat4 matrix)",
			"mat4 Mat4Diagonal(r32 r0c0, r32 r1c1, r32 r2c2, r32 r3c3, r32 other = 0.0f)",
			"mat4 Mat4Fill(r32 all)",
			"mat4 Mat4Inverse(mat4 matrix, bool* successOut = nullptr)",
			"mat4 Mat4LookAt(v3 position, v3 lookAt, v3 upVector)",
			"mat4 Mat4Multiply(mat4 left, mat4 right)",
			"mat4 Mat4Orthographic(r32 left, r32 right, r32 top, r32 bottom, r32 zNear, r32 zFar)",
			"mat4 Mat4Perspective(r32 fovy, r32 aspectRatio, r32 zNear, r32 zFar)",
			"mat4 Mat4Quaternion(quat q)",
			"mat4 Mat4Rotate(v3 axis, r32 angle)",
			"mat4 Mat4RotateX(r32 angle)",
			"mat4 Mat4RotateY(r32 angle)",
			"mat4 Mat4RotateZ(r32 angle)",
			"mat4 Mat4Scale2(r32 x, r32 y)",
			"mat4 Mat4Scale3(r32 x, r32 y, r32 z)",
			"mat4 Mat4ScaleW(r32 scale)",
			"mat4 Mat4ScaleX(r32 scale)",
			"mat4 Mat4ScaleY(r32 scale)",
			"mat4 Mat4ScaleZ(r32 scale)",
			"mat4 Mat4Translate2(r32 x, r32 y)",
			"mat4 Mat4Translate3(r32 x, r32 y, r32 z)",
			"mat4 Mat4TranslateX(r32 x)",
			"mat4 Mat4TranslateY(r32 y)",
			"mat4 Mat4TranslateZ(r32 z)",
			"mat4 Mat4Transpose(mat4 matrix)",
			"mat4 NewMat4(r32 r0c0, r32 r0c1, r32 r0c2, r32 r0c3, r32 r1c0, r32 r1c1, r32 r1c2, r32 r1c3, r32 r2c0, r32 r2c1, r32 r2c2, r32 r2c3, r32 r3c0, r32 r3c1, r32 r3c2, r32 r3c3)",
			"obb2 NewObb2D(v2 center, v2 size, r32 rotation)",
			"obb2 Obb2DDeflate(obb2 rectangle, r32 subWidth, r32 subHeight)",
			"obb2 Obb2DDeflateX(obb2 rectangle, r32 subWidth)",
			"obb2 Obb2DDeflateY(obb2 rectangle, r32 subHeight)",
			"obb2 Obb2DInflate(obb2 rectangle, r32 extraWidth, r32 extraHeight)",
			"obb2 Obb2DInflateX(obb2 rectangle, r32 extraWidth)",
			"obb2 Obb2DInflateY(obb2 rectangle, r32 extraHeight)",
			"obb2 Obb2DInvert(obb2 rectangle)",
			"obb2 Obb2DInvertX(obb2 rectangle)",
			"obb2 Obb2DInvertY(obb2 rectangle)",
			"obb2 Obb2DScale(obb2 boundingBox, r32 scalar)",
			"obb2 Obb2DShift(obb2 boundingBox, r32 amountX, r32 amountY)",
			"obb2 Obb2DSquarify(obb2 rectangle, bool makeLarger = true)",
			"obb2 Obb2DUninvert(obb2 rectangle)",
			"obb2 Obb2Line(v2 start, v2 end, r32 thickness)",
			"obb2 ToObb2D(rec rectangle)",
			"obb3 ToObb3D(box boundingBox)",
			"quat NewQuat(r32 x, r32 y, r32 z, r32 w, bool normalize = true)",
			"quat NewQuatFromBasis(Basis_t basis)",
			"quat NewQuatFromEuler(v3 eulerAngles, EulerOrder_t order = EulerOrder_XYZ)",
			"quat QuatEquivalent(const quat& quaternion)",
			"quat QuatGlobalRot(quat q, v3 axis, r32 angle)",
			"quat QuatLerp(const quat& start, const quat& end, r32 amount, bool linearly = true, bool normalizeResult = true)",
			"quat QuatLocalRot(quat q, v3 axis, r32 angle)",
			"quat QuatMult(const quat& left, const quat& right, bool normalize = true)",
			"quat QuatNormalize(const quat& quaternion)",
			"quat QuatOpposite(const quat& quaternion)",
			"quat ToQuat(mat4 matrix, bool assertOnFailure = true)",
			"r32 AngleDiffR32(r32 left, r32 right)",
			"r32 AngleFixR32(r32 angle)",
			"r32 AngleFlipHorizontalR32(r32 angle, bool normalize = true)",
			"r32 AngleFlipVerticalR32(r32 angle, bool normalize = true)",
			"r32 AngleFromVec2(r32 x, r32 y)",
			"r32 AngleFromVec2(v2 vector)",
			"r32 AngleLerpR32(r32 angleFrom, r32 angleTo, r32 amount)",
			"r32 AngleOppositeR32(r32 angle)",
			"r32 Animate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 AnimateAndPauseBy(u64 timeSource, r32 min, r32 max, u64 animationTime, u64 pauseTime, u64 offset = 0)",
			"r32 AnimateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 ButtonGetAutoHeight(Button_t* btn)",
			"r32 CYCLIC_FUNC2D_CALLBACK_DEF(CyclicFunc2D_t func, v2 t)",
			"r32 CYCLIC_FUNC_CALLBACK_DEF(CyclicFunc_t func, r32 t)",
			"r32 ColorChannelToR32(u8 valueU8)",
			"r32 ConvertLoudnessToVolume(r32 loudness)",
			"r32 ConvertSampleIndexToScreenSpace(PigAudioOutGraph_t* graph, u64 sampleIndex)",
			"r32 ConvertVolumeToLoudness(r32 volume)",
			"r32 CyclicFunc2DGetValue(CyclicFunc2D_t func, v2 t)",
			"r32 CyclicFuncGetValue(CyclicFunc_t func, r32 t)",
			"r32 DodecGetFaceRadius(Dodec_t dodec)",
			"r32 DodecGetVertexRadius(Dodec_t dodec)",
			"r32 Ease(EasingStyle_t style, r32 p)",
			"r32 EaseBackIn(r32 p)",
			"r32 EaseBackInOut(r32 p)",
			"r32 EaseBackOut(r32 p)",
			"r32 EaseBounceIn(r32 p)",
			"r32 EaseBounceInOut(r32 p)",
			"r32 EaseBounceOut(r32 p)",
			"r32 EaseCircularIn(r32 p)",
			"r32 EaseCircularInOut(r32 p)",
			"r32 EaseCircularOut(r32 p)",
			"r32 EaseCubicIn(r32 p)",
			"r32 EaseCubicInOut(r32 p)",
			"r32 EaseCubicOut(r32 p)",
			"r32 EaseEarlyInOut(r32 p)",
			"r32 EaseElasticIn(r32 p)",
			"r32 EaseElasticInOut(r32 p)",
			"r32 EaseElasticOut(r32 p)",
			"r32 EaseExponentialIn(r32 p)",
			"r32 EaseExponentialInOut(r32 p)",
			"r32 EaseExponentialOut(r32 p)",
			"r32 EaseLinear(r32 p)",
			"r32 EaseQuadraticIn(r32 p)",
			"r32 EaseQuadraticInOut(r32 p)",
			"r32 EaseQuadraticOut(r32 p)",
			"r32 EaseQuarticIn(r32 p)",
			"r32 EaseQuarticInOut(r32 p)",
			"r32 EaseQuarticOut(r32 p)",
			"r32 EaseQuinticIn(r32 p)",
			"r32 EaseQuinticInOut(r32 p)",
			"r32 EaseQuinticOut(r32 p)",
			"r32 EaseSineIn(r32 p)",
			"r32 EaseSineInOut(r32 p)",
			"r32 EaseSineOut(r32 p)",
			"r32 GetDir2AngleR32(Dir2_t dir2)",
			"r32 GetDir2ExAngleR32(Dir2Ex_t dir2ex)",
			"r32 GetMouseScrollDeltaX()",
			"r32 GetMouseScrollDeltaY()",
			"r32 GetRandR32(RandomSeries_t* series)",
			"r32 GetRandR32(RandomSeries_t* series, r32 min, r32 max)",
			"r32 InverseEase(EasingStyle_t style, r32 y)",
			"r32 InverseEaseLinear(r32 y)",
			"r32 InverseEaseQuadraticIn(r32 y)",
			"r32 InverseEaseQuadraticInOut(r32 y)",
			"r32 InverseEaseQuadraticOut(r32 y)",
			"r32 Mat4Determinant(mat4 matrix)",
			"r32 Oscillate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillatePhase(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillatePhaseBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateSaw(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateSawBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 PartsParamR32ChooseValue(RandomSeries_t* random, const PartsParamR32_t* param)",
			"r32 PentagonGetHeight(Pentagon_t pentagon)",
			"r32 PentagonGetHeight(r32 sideLength)",
			"r32 PentagonGetRadius(Pentagon_t pentagon)",
			"r32 PentagonGetRadius(r32 sideLength)",
			"r32 PigGetSettingR32(const PigSettings_t* settings, MyStr_t key, r32 defaultValue, bool ignoreCase = true)",
			"r32 QuatGetAngle(const quat& quaternion)",
			"r32 RcGetLineHeight()",
			"r32 RcGetMaxAscend()",
			"r32 RcGetMaxDescend()",
			"r32 RcGetRealDepth()",
			"r32 RcGetRealDepth(r32 depth)",
			"r32 SimplexGradient1D(i32 hash, r32 x)",
			"r32 SimplexGradient2D(i32 hash, r32 x, r32 y)",
			"r32 SimplexGradient3D(i32 hash, r32 x, r32 y, r32 z)",
			"r32 SimplexNoise1D(r32 x)",
			"r32 SimplexNoise2D(r32 x, r32 y)",
			"r32 SimplexNoise2DIter(r32 x, r32 y, u64 numIterations, r32 scale = 1.0f)",
			"r32 SubAnimAmountR32(r32 animAmount, r32 subPieceStart, r32 subPieceEnd)",
			"r32 SubAnimAmountTwoWayR32(r32 animAmount, r32 subPieceStart, r32 subPieceEnd)",
			"r32 TextboxGetAutoHeight(Textbox_t* tb)",
			"r32 Vec2AngleBetween(v2 vecLeft, v2 vecRight)",
			"r32 Vec2Determinant(v2 left, v2 right)",
			"r32 Vec2Dot(v2 left, v2 right)",
			"r32 Vec2Inner(v2 left, v2 right)",
			"r32 Vec2Length(v2 vector)",
			"r32 Vec2LengthSquared(v2 vector)",
			"r32 Vec2iLength(v2i vector)",
			"r32 Vec3AngleBetween(v3 vecLeft, v3 vecRight)",
			"r32 Vec3Determinant(v3 left, v3 right)",
			"r32 Vec3Dot(v3 left, v3 right)",
			"r32 Vec3Inner(v3 left, v3 right)",
			"r32 Vec3Length(v3 vector)",
			"r32 Vec3iLength(v3i vector)",
			"r32 Vec4Determinant(v4 left, v4 right)",
			"r32 Vec4Dot(v4 left, v4 right)",
			"r32 Vec4Inner(v4 left, v4 right)",
			"r32 Vec4Length(v4 vector)",
			"r32 Vec4iLength(v4i vector)",
			"r64 AngleDiffR64(r64 left, r64 right)",
			"r64 AngleFixR64(r64 angle)",
			"r64 AngleFlipHorizontalR64(r64 angle, bool normalize = true)",
			"r64 AngleFlipVerticalR64(r64 angle, bool normalize = true)",
			"r64 AngleLerpR64(r64 angleFrom, r64 angleTo, r64 amount)",
			"r64 AngleOppositeR64(r64 angle)",
			"r64 ConvertLoudnessToVolume(r64 loudness)",
			"r64 ConvertVolumeToLoudness(r64 volume)",
			"r64 GetDir2AngleR64(Dir2_t dir2)",
			"r64 GetDir2ExAngleR64(Dir2Ex_t dir2ex)",
			"r64 GetRandR64(RandomSeries_t* series)",
			"r64 GetRandR64(RandomSeries_t* series, r64 min, r64 max)",
			"r64 GetSoundInstanceCurrentVolume(SoundInstance_t* instance, PlatAudioFormat_t format, r64 instanceTime, r32 masterVolume, r32 musicVolume, r32 soundsVolume)",
			"r64 GetSoundInstanceSample(SoundInstance_t* instance, PlatAudioFormat_t format, u8 channelIndex, bool advanceFrameIndex, u64 globalSampleIndex, r32 masterVolume, r32 musicVolume, r32 soundsVolume)",
			"r64 SubAnimAmountR64(r64 animAmount, r64 subPieceStart, r64 subPieceEnd)",
			"r64 SubAnimAmountTwoWayR64(r64 animAmount, r64 subPieceStart, r64 subPieceEnd)",
			"rec GetBoundsForBezierPath(const BezierPath_t* path)",
			"rec GetBoundsForBezierPathPart(v2 currentPos, const BezierPathPart_t* part)",
			"rec GetObb2DAlignedBounds(obb2 boundingBox)",
			"rec GetSpriteSheetFrameArrayEncodedSourceRec(const SpriteSheet_t* sheet, MyStr_t frameName, bool assertOnFailure = true)",
			"rec GetSpriteSheetFrameSourceRec(const SpriteSheet_t* sheet, MyStr_t frameName, bool assertOnFailure = true)",
			"rec NewRec(v2 topLeft, v2 size)",
			"rec NewRecBetween(r32 point1X, r32 point1Y, r32 point2X, r32 point2Y)",
			"rec NewRecCentered(v2 center, v2 size)",
			"rec RcGetTextRec(MyStr_t text, v2 position)",
			"rec RecBoth(rec rectangle1, rec rectangle2)",
			"rec RecDeflate(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecDeflateX(rec rectangle, r32 subWidth)",
			"rec RecDeflateY(rec rectangle, r32 subHeight)",
			"rec RecExpand(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecExpandDown(rec rectangle, r32 extraDown)",
			"rec RecExpandLeft(rec rectangle, r32 extraLeft)",
			"rec RecExpandRight(rec rectangle, r32 extraRight)",
			"rec RecExpandToVec2(rec rectangle, v2 newPoint)",
			"rec RecExpandUp(rec rectangle, r32 extraUp)",
			"rec RecExpandX(rec rectangle, r32 extraWidth)",
			"rec RecExpandY(rec rectangle, r32 extraHeight)",
			"rec RecInflate(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecInflateX(rec rectangle, r32 extraWidth)",
			"rec RecInflateY(rec rectangle, r32 extraHeight)",
			"rec RecInvert(rec rectangle)",
			"rec RecInvertX(rec rectangle)",
			"rec RecInvertY(rec rectangle)",
			"rec RecOverlap(rec rectangle1, rec rectangle2)",
			"rec RecRetract(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecRetractX(rec rectangle, r32 subWidth)",
			"rec RecRetractY(rec rectangle, r32 subHeight)",
			"rec RecScale(rec rectangle, r32 scalar)",
			"rec RecScale2(rec rectangle, r32 scaleX, r32 scaleY)",
			"rec RecShift(rec rectangle, r32 amountX, r32 amountY)",
			"rec RecSquarify(rec rectangle, bool makeLarger = true, bool center = true)",
			"rec RecUninvert(rec rectangle)",
			"rec ToRec(reci rectangle)",
			"reci NewReci(v2i topLeft, v2i size)",
			"reci ReciBoth(reci rectangle1, reci rectangle2)",
			"reci ReciDeflate(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciDeflateX(reci rectangle, i32 subWidth)",
			"reci ReciDeflateY(reci rectangle, i32 subHeight)",
			"reci ReciExpand(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciExpandDown(reci rectangle, i32 extraDown)",
			"reci ReciExpandLeft(reci rectangle, i32 extraLeft)",
			"reci ReciExpandRight(reci rectangle, i32 extraRight)",
			"reci ReciExpandToVec2i(reci rectangle, v2i newPoint)",
			"reci ReciExpandUp(reci rectangle, i32 extraUp)",
			"reci ReciExpandX(reci rectangle, i32 extraWidth)",
			"reci ReciExpandY(reci rectangle, i32 extraHeight)",
			"reci ReciInflate(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciInflateX(reci rectangle, i32 extraWidth)",
			"reci ReciInflateY(reci rectangle, i32 extraHeight)",
			"reci ReciInvert(reci rectangle)",
			"reci ReciInvertX(reci rectangle)",
			"reci ReciInvertY(reci rectangle)",
			"reci ReciOverlap(reci rectangle1, reci rectangle2)",
			"reci ReciRetract(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciRetractX(reci rectangle, i32 subWidth)",
			"reci ReciRetractY(reci rectangle, i32 subHeight)",
			"reci ReciScale(reci rectangle, i32 scalar)",
			"reci ReciScale2(reci rectangle, i32 scaleX, i32 scaleY)",
			"reci ReciShift(reci rectangle, i32 amountX, i32 amountY)",
			"reci ReciSquarify(reci rectangle, bool makeLarger = true)",
			"reci ReciUninvert(reci rectangle)",
			"u16 Convert24HourTo12Hour(u16 twentyFourHourValue)",
			"u16 FnvHashU16(const void* bufferPntr, u64 numBytes)",
			"u16 GetRandU16(RandomSeries_t* series)",
			"u16 GetRandU16(RandomSeries_t* series, u16 min, u16 max)",
			"u32 CharToU32(char c)",
			"u32 FnvHashU32(const void* bufferPntr, u64 numBytes)",
			"u32 GetDisplayCharCodepointForControllerBtn(ControllerType_t type, ControllerBtn_t controllerBtn)",
			"u32 GetDisplayCharCodepointForKey(Key_t key)",
			"u32 GetDisplayCharCodepointForMouseBtn(MouseBtn_t mouseBtn)",
			"u32 GetInputCharCodepointByIndex(u64 index)",
			"u32 GetLowercaseCodepoint(u32 codepoint)",
			"u32 GetRandU32(RandomSeries_t* series)",
			"u32 GetRandU32(RandomSeries_t* series, u32 min, u32 max)",
			"u32 GetUppercaseCodepoint(u32 codepoint)",
			"u32 RoundUpToU32(u32 value, u32 chunkSize)",
			"u64 AnimateAndPauseByU64(u64 timeSource, u64 min, u64 max, u64 animationTime, u64 pauseTime, u64 offset = 0, bool useFirstFrameForPause = false)",
			"u64 AnimateByU64(u64 timeSource, u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 AnimateU64(u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 Aoc2022_03_GetItemPriority(char item)",
			"u64 Aoc2022_03_IsItemCharInStr(MyStr_t bagStr, char itemChar)",
			"u64 AocFindMaxU64(VarArray_t* arrayPntr, u64* foundIndexOut = nullptr)",
			"u64 Deser_FindPartsBurstByName(const VarArray_t* burstsArray, MyStr_t name)",
			"u64 Deser_FindPartsPrefabByName(const VarArray_t* prefabsArray, MyStr_t name)",
			"u64 Deser_FindPartsTypeByName(const VarArray_t* typesArray, MyStr_t name)",
			"u64 DoPartsPrefab(ParticleEngine_t* engine, RandomSeries_t* random, const PartsPrefab_t* prefab, v2 position, v2 spawnScale, r32 scale, r32 rotation, v2 addVelocity, DoPartsPrefabCallback_f* callback = nullptr, void* userPntr = nullptr)",
			"u64 FindFragmentShaderDivider(MyStr_t shaderCode)",
			"u64 FindNextWordBreakInString(MyStr_t str, u64 startIndex, bool forward, bool subwords, bool includeBreakAtStartIndex = false)",
			"u64 FnvHashU64(const void* bufferPntr, u64 numBytes, u64 startingState = FNV_HASH_BASE_U64)",
			"u64 FontFlow_FindNextLineBreak(const FontFlowState_t* flowState, r32* widthOut = nullptr, bool* consumeNextCharOut = nullptr)",
			"u64 GetAoc2022_02_ResultScore(Aoc2022_02_Result_t result)",
			"u64 GetAoc2022_02_Score(Aoc2022_02_t enumValue)",
			"u64 GetAocSolutionDay(AocSolution_t solution)",
			"u64 GetAocSolutionStructSize(AocSolution_t solution)",
			"u64 GetAocSolutionYear(AocSolution_t solution)",
			"u64 GetFifoLineMetaSize(const StringFifoLine_t* line)",
			"u64 GetFifoLineTotalSize(const StringFifoLine_t* line)",
			"u64 GetGreyscaleColorIndex(Color_t color)",
			"u64 GetItemIndexInLinkedList(const LinkedList_t* list, const void* itemPntr)",
			"u64 GetMaxNumTextureArrayLayers()",
			"u64 GetNumMarks(MemArena_t* arena)",
			"u64 GetNumMemMarks(MemArena_t* arena)",
			"u64 GetNumResourcesOfType(ResourceType_t resourceType)",
			"u64 GetNumSubPathsInBezierPath(const BezierPath_t* path)",
			"u64 GetNumVerticesInBezierPath(const BezierPath_t* path)",
			"u64 GetPredefPalColorIndex(Color_t color)",
			"u64 GetPureColorIndex(Color_t color)",
			"u64 GetRandU64(RandomSeries_t* series)",
			"u64 GetRandU64(RandomSeries_t* series, u64 min, u64 max)",
			"u64 GetStringFifoHeadIndex(const StringFifo_t* fifo)",
			"u64 GetStringFifoPntrIndex(const StringFifo_t* fifo, const void* pntr)",
			"u64 GetStringFifoTailIndex(const StringFifo_t* fifo)",
			"u64 PigGetSettingU64(const PigSettings_t* settings, MyStr_t key, u64 defaultValue, bool ignoreCase = true)",
			"u64 PigMemGraphGetNumPagesForArena(MemArena_t* arenaPntr)",
			"u64 RemoveColinearAndDuplicateVertices(u64 numVertices, v2* vertices)",
			"u64 RoundUpToU64(u64 value, u64 chunkSize)",
			"u64 ShowCustomAndCancelDialog(MyStr_t message, MyStr_t confirmBtnStr, u64 confirmBtnValue, bool confirmOnRight, ConfirmDialogCallback_f* callback = nullptr, void* callbackContext = nullptr)",
			"u64 ShowDialog2(MyStr_t message, MyStr_t leftBtnStr, u64 leftBtnValue, MyStr_t rightBtnStr, u64 rightBtnValue, ConfirmDialogCallback_f* callback = nullptr, void* callbackContext = nullptr)",
			"u64 ShowYesNoDialog(MyStr_t message, bool yesOnRight, ConfirmDialogCallback_f* callback = nullptr, void* callbackContext = nullptr)",
			"u64 StrReplaceInPlace(MyStr_t str, MyStr_t target, MyStr_t replacement, bool ignoreCase = false)",
			"u64 TimeSince(u64 programTimeSnapshot)",
			"u64 TimeSinceBy(u64 timeSource, u64 programTimeSnapshot)",
			"u64 TrimLeadingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimTrailingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 UnescapeQuotedStringInPlace(MyStr_t* target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"u64 WordTreeGetU64(WordTree_t* tree, MyStr_t word)",
			"u64* Triangulate2DEarClip(MemArena_t* memArena, MemArena_t* tempArena, u64 numVertices, const v2* vertices, u64* numIndicesOut = nullptr, bool debugDontDeallocate = false)",
			"u8 CharToU8(char c)",
			"u8 ColorChannelToU8(r32 valueR32)",
			"u8 Dir2BitwiseCount(Dir2_t dir2)",
			"u8 Dir2ExBitwiseCount(Dir2Ex_t dir2ex)",
			"u8 Dir3BitwiseCount(Dir3_t dir3)",
			"u8 Dir3ExBitwiseCount(Dir3Ex_t dir3ex)",
			"u8 FnvHashU8(const void* bufferPntr, u64 numBytes)",
			"u8 GetAxisIndex(Axis_t axis)",
			"u8 GetCcwTurnsBetweenDir2(Dir2_t start, Dir2_t end)",
			"u8 GetCodepointBeforeIndex(const char* strPntr, u64 startIndex, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUcs2(u64 maxNumWords, const u16* strPntr, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUtf8(u64 maxNumBytes, const char* strPntr, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUtf8Str(MyStr_t str, u64 index, u32* codepointOut)",
			"u8 GetCwTurnsBetweenDir2(Dir2_t start, Dir2_t end)",
			"u8 GetDiceValueForDodecFace(u64 faceIndex)",
			"u8 GetDir2ExIndex(Dir2Ex_t dir2ex)",
			"u8 GetDir2Index(Dir2_t dir2)",
			"u8 GetDir3ExIndex(Dir3Ex_t dir3ex)",
			"u8 GetDir3Index(Dir3_t dir3)",
			"u8 GetHexCharValue(char hexChar)",
			"u8 GetLowerNibble(u8 value)",
			"u8 GetRandU8(RandomSeries_t* series)",
			"u8 GetRandU8(RandomSeries_t* series, u8 min, u8 max)",
			"u8 GetTurnsBetweenDir3(Dir3_t start, Dir3_t end)",
			"u8 GetUcs2WordsForCode(u32 codepoint, u16* wordBufferOut, bool doAssertions = true)",
			"u8 GetUpperNibble(u8 value)",
			"u8 GetUtf8BytesForCode(u32 codepoint, u8* byteBufferOut = nullptr, bool doAssertions = true)",
			"u8 MultiplyColorChannelR32(u8 left, r32 rightR32)",
			"u8 MultiplyColorChannelU8(u8 left, u8 right)",
			"u8 NumDaysInMonth(Month_t month, bool isLeapYear)",
			"u8 NumDecimalDigitsU32(u32 number)",
			"u8 NumDecimalDigitsU64(u64 number)",
			"u8 OffsetToAlign(const void* memoryPntr, AllocAlignment_t alignment)",
			"u8 SimplexHash(i32 input)",
			"v2 ApplySvgTransformToPosition(const SvgTransform_t* transform, v2 position)",
			"v2 ApplySvgTransformToScalars(const SvgTransform_t* transform, v2 scalars)",
			"v2 ApplySvgTransformToVector(const SvgTransform_t* transform, v2 vector)",
			"v2 BezierCurve3(v2 start, v2 control, v2 end, r32 time)",
			"v2 BezierCurve4(v2 start, v2 control1, v2 control2, v2 end, r32 time)",
			"v2 ClosestPointOnLine(v2 lineStart, v2 lineEnd, v2 point)",
			"v2 EllipseArcCurve(v2 center, v2 radius, r32 axisAngle, r32 startAngle, r32 angleDelta, r32 time)",
			"v2 EllipseArcCurveStartEnd(v2 start, v2 radius, r32 axisAngle, u8 arcFlags, v2 end, r32 time)",
			"v2 Get2DCornerVecByIndex(u64 cornerIndex)",
			"v2 GetBlueNoisePosInRec(u64 seed, rec bounds, u64 numOfPositions, u64 index)",
			"v2 GetHexagonVertex(Hexagon_t hexagon, u64 index)",
			"v2 GetMouseScrollDelta()",
			"v2 GetObb2DBottomLeft(obb2 boundingBox)",
			"v2 GetObb2DBottomRight(obb2 boundingBox)",
			"v2 GetObb2DDownVec(obb2 boundingBox)",
			"v2 GetObb2DLeftVec(obb2 boundingBox)",
			"v2 GetObb2DRelativePos(obb2 boundingBox, v2 point)",
			"v2 GetObb2DRightVec(obb2 boundingBox)",
			"v2 GetObb2DTopLeft(obb2 boundingBox)",
			"v2 GetObb2DTopRight(obb2 boundingBox)",
			"v2 GetObb2DUpVec(obb2 boundingBox)",
			"v2 GetObb2DWorldPoint(obb2 boundingBox, v2 relativeOffset)",
			"v2 GetPointOnBezierPathPart(v2 currentPos, const BezierPathPart_t* part, r32 time)",
			"v2 Mat4MultiplyVec2(mat4 matrix, v2 vector, bool includeTranslation = true)",
			"v2 ParemetricLine(v2 start, v2 end, r32 time)",
			"v2 PartsParamVec2ChooseValue(RandomSeries_t* random, const PartsParamVec2_t* param)",
			"v2 PentagonGetDrawCenter(Pentagon_t pentagon)",
			"v2 PentagonGetEdgeCenter(Pentagon_t pentagon, u64 index)",
			"v2 PentagonGetVertex(Pentagon_t pentagon, u64 index)",
			"v2 PigGetSettingV2(const PigSettings_t* settings, MyStr_t key, v2 defaultValue, bool ignoreCase = true)",
			"v2 RcDrawSteamFriendCard(u64 friendId, v2 position, v2 minSize, v2 maxSize, r32 scale, bool measureOnly = false)",
			"v2 RotateVec2NumTurnsClockwise(v2 vector, u64 numQuarterTurns)",
			"v2 ToVec2(v2i vector)",
			"v2 Vec2Abs(v2 vector)",
			"v2 Vec2Add(v2 left, v2 right)",
			"v2 Vec2Ceil(v2 vector)",
			"v2 Vec2Clamp(v2 vector, v2 min, v2 max)",
			"v2 Vec2Divide(v2 left, v2 right)",
			"v2 Vec2Fill(r32 value)",
			"v2 Vec2Floor(v2 vector)",
			"v2 Vec2FromAngle(r32 angle, r32 radius = 1.0f)",
			"v2 Vec2Lerp(v2 start, v2 end, r32 amount)",
			"v2 Vec2Max(v2 left, v2 right)",
			"v2 Vec2Min(v2 left, v2 right)",
			"v2 Vec2Multiply(v2 left, v2 right)",
			"v2 Vec2Normalize(v2 vector)",
			"v2 Vec2PerpLeft(v2 vector)",
			"v2 Vec2PerpRight(v2 vector)",
			"v2 Vec2Rotate(v2 vector, r32 angle)",
			"v2 Vec2Round(v2 vector)",
			"v2 Vec2Scale(v2 vector, r32 scalar)",
			"v2 Vec2Shrink(v2 vector, r32 divisor)",
			"v2 Vec2Subtract(v2 left, v2 right)",
			"v2 Vec2iNormalize(v2i vector)",
			"v2i FrameIndexToSheetIndex(u64 frameIndex, v2i numFrames)",
			"v2i GetSpriteSheetFrame(const SpriteSheet_t* sheet, MyStr_t frameName, bool assertOnFailure = false)",
			"v2i PartsParamVec2iChooseValue(RandomSeries_t* random, const PartsParamVec2i_t* param)",
			"v2i PigGetSettingV2i(const PigSettings_t* settings, MyStr_t key, v2i defaultValue, bool ignoreCase = true)",
			"v2i RotateVec2iNumTurnsClockwise(v2i vector, u64 numQuarterTurns)",
			"v2i Vec2Ceili(v2 vector)",
			"v2i Vec2Floori(v2 vector)",
			"v2i Vec2Roundi(v2 vector)",
			"v2i Vec2iAbs(v2i vector)",
			"v2i Vec2iAdd(v2i left, v2i right)",
			"v2i Vec2iClamp(v2i vector, v2i min, v2i max)",
			"v2i Vec2iFill(i32 value)",
			"v2i Vec2iMax(v2i left, v2i right)",
			"v2i Vec2iMin(v2i left, v2i right)",
			"v2i Vec2iMultiply(v2i left, v2i right)",
			"v2i Vec2iPerpLeft(v2i vector)",
			"v2i Vec2iPerpRight(v2i vector)",
			"v2i Vec2iScale(v2i vector, i32 scalar)",
			"v2i Vec2iSubtract(v2i left, v2i right)",
			"v3 ApplyBasis(Basis_t toBasis, v3 vector)",
			"v3 ChangeBasis(Basis_t fromBasis, Basis_t toBasis, v3 vector)",
			"v3 DodecGetVertex(Dodec_t dodec, u64 index)",
			"v3 Mat4MultiplyRightVec3(v3 vector, mat4 matrix, r32* wOut = nullptr)",
			"v3 Mat4MultiplyVec3(mat4 matrix, v3 vector, bool includeTranslation = true, r32* wOut = nullptr)",
			"v3 PigGetSettingV3(const PigSettings_t* settings, MyStr_t key, v3 defaultValue, bool ignoreCase = true)",
			"v3 QuatGetAxis(const quat& quaternion)",
			"v3 QuatGetAxisVec(quat quaternion, Axis_t axis)",
			"v3 QuatGetForwardVec(quat quaternion)",
			"v3 QuatGetRightVec(quat quaternion)",
			"v3 QuatGetUpVec(quat quaternion)",
			"v3 RemoveBasis(Basis_t fromBasis, v3 vector)",
			"v3 ToVec3(v3i vector)",
			"v3 Vec3Abs(v3 vector)",
			"v3 Vec3Add(v3 left, v3 right)",
			"v3 Vec3Ceil(v3 vector)",
			"v3 Vec3Clamp(v3 vector, v3 min, v3 max)",
			"v3 Vec3Cross(v3 left, v3 right)",
			"v3 Vec3Divide(v3 left, v3 right)",
			"v3 Vec3Fill(r32 value)",
			"v3 Vec3Floor(v3 vector)",
			"v3 Vec3From2Angles(r32 facingDirection, r32 rotationUpDown, r32 radius = 1.0f)",
			"v3 Vec3FromVec2(v2 vector, r32 z)",
			"v3 Vec3Lerp(v3 start, v3 end, r32 amount)",
			"v3 Vec3Max(v3 left, v3 right)",
			"v3 Vec3Min(v3 left, v3 right)",
			"v3 Vec3Multiply(v3 left, v3 right)",
			"v3 Vec3Normalize(v3 vector)",
			"v3 Vec3Round(v3 vector)",
			"v3 Vec3Scale(v3 vector, r32 scalar)",
			"v3 Vec3Shrink(v3 vector, r32 divisor)",
			"v3 Vec3Subtract(v3 left, v3 right)",
			"v3 Vec3iNormalize(v3i vector)",
			"v3i Vec3Ceili(v3 vector)",
			"v3i Vec3Floori(v3 vector)",
			"v3i Vec3Roundi(v3 vector)",
			"v3i Vec3iAbs(v3i vector)",
			"v3i Vec3iAdd(v3i left, v3i right)",
			"v3i Vec3iClamp(v3i vector, v3i min, v3i max)",
			"v3i Vec3iCross(v3i left, v3i right)",
			"v3i Vec3iFill(i32 value)",
			"v3i Vec3iFromVec2i(v2i vector, i32 z)",
			"v3i Vec3iMax(v3i left, v3i right)",
			"v3i Vec3iMin(v3i left, v3i right)",
			"v3i Vec3iMultiply(v3i left, v3i right)",
			"v3i Vec3iScale(v3i vector, i32 scalar)",
			"v3i Vec3iSubtract(v3i left, v3i right)",
			"v4 Mat4MultiplyVec4(mat4 matrix, v4 vector)",
			"v4 ToVec4(v4i vector)",
			"v4 Vec4Abs(v4 vector)",
			"v4 Vec4Add(v4 left, v4 right)",
			"v4 Vec4Ceil(v4 vector)",
			"v4 Vec4Clamp(v4 vector, v4 min, v4 max)",
			"v4 Vec4Divide(v4 left, v4 right)",
			"v4 Vec4Fill(r32 value)",
			"v4 Vec4Floor(v4 vector)",
			"v4 Vec4FromVec3(v3 vector, r32 w)",
			"v4 Vec4Lerp(v4 start, v4 end, r32 amount)",
			"v4 Vec4Max(v4 left, v4 right)",
			"v4 Vec4Min(v4 left, v4 right)",
			"v4 Vec4Multiply(v4 left, v4 right)",
			"v4 Vec4Normalize(v4 vector)",
			"v4 Vec4Round(v4 vector)",
			"v4 Vec4Scale(v4 vector, r32 scalar)",
			"v4 Vec4Shrink(v4 vector, r32 divisor)",
			"v4 Vec4Subtract(v4 left, v4 right)",
			"v4 Vec4iNormalize(v4i vector)",
			"v4i Vec4Ceili(v4 vector)",
			"v4i Vec4Floori(v4 vector)",
			"v4i Vec4Roundi(v4 vector)",
			"v4i Vec4iAbs(v4i vector)",
			"v4i Vec4iAdd(v4i left, v4i right)",
			"v4i Vec4iClamp(v4i vector, v4i min, v4i max)",
			"v4i Vec4iFill(i32 value)",
			"v4i Vec4iFromVec3i(v3i vector, i32 w)",
			"v4i Vec4iMax(v4i left, v4i right)",
			"v4i Vec4iMin(v4i left, v4i right)",
			"v4i Vec4iMultiply(v4i left, v4i right)",
			"v4i Vec4iScale(v4i vector, i32 scalar)",
			"v4i Vec4iSubtract(v4i left, v4i right)",
			"void AccessResource(const Texture_t* texture)",
			"void AocAppStateAccessResources()",
			"void AocAppState_RunAocSolution(AocSolution_t solution)",
			"void AocOpenFile_(MyStr_t filePath, PlatFileContents_t* inputFile)",
			"void AppDebugOutput(u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* message)",
			"void AppDebugPrint(u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* formatString, ...)",
			"void ApplyTransformToSvgGroup(SvgGroup_t* group, const SvgTransform_t* transform)",
			"void ApplyTransformToSvgShape(SvgShape_t* shape, const SvgTransform_t* transform)",
			"void BindPostProcessingChainInputTexture(PostProcessingChain_t* chain, u64 inputIndex, bool bindToTexture2 = false)",
			"void BktArrayClear(BktArray_t* array, bool reduceToSingleBucket = false)",
			"void BktArrayExpand(BktArray_t* array, u64 numNewItemsRequired)",
			"void BktArrayMoveEmptyBucketToEnd(BktArray_t* array, u64 bucketIndex)",
			"void BktArrayRefreshLastUsedBucket(BktArray_t* array)",
			"void BktArrayRemoveAt(BktArray_t* array, u64 index)",
			"void BktArrayRemoveLast(BktArray_t* array)",
			"void BktArraySolidify(BktArray_t* array, bool deallocateEmptyBuckets = false, bool singleBucket = false)",
			"void BktArraySort(BktArray_t* array, CompareFunc_f* compareFunc, void* contextPntr)",
			"void ButtonCaptureMouse(Button_t* btn)",
			"void ButtonCaptureMouse(Button_t* btn, v2 renderOffset)",
			"void ButtonLayout(Button_t* btn)",
			"void ButtonMove(Button_t* btn, rec targetRec)",
			"void ButtonSetMouseCapturePrefix(Button_t* btn, MyStr_t prefixStr)",
			"void CaptureMouseAocAppState()",
			"void ChangeAppState(AppState_t newState)",
			"void ChangeFontFileForActiveFace(Font_t* font, FontFace_t* face, MyStr_t fontName, i32 fontSize, bool bold, bool italic)",
			"void CheckboxCaptureMouse(Checkbox_t* cb)",
			"void CheckboxLayout(Checkbox_t* cb)",
			"void CheckboxMove(Checkbox_t* cb, rec targetRec)",
			"void ClearFlowStateCache(FontFlowState_t* flowState)",
			"void ClearFocus()",
			"void ClearMemArena(MemArena_t* arena)",
			"void ConfirmDialogBegin(u64 dialogId)",
			"void ConfirmDialogCaptureMouse(ConfirmDialog_t* dialog)",
			"void ConfirmDialogLayout(ConfirmDialog_t* dialog)",
			"void ConfirmDialogSetAutoDispose(u64 dialogId, bool autoDispose)",
			"void ConfirmDialogSetButtonColor(u64 dialogId, u64 buttonValue, Color_t backColor, Color_t textColor, Color_t borderColor)",
			"void ConfirmDialogSetEscapeBtn(u64 dialogId, u64 buttonValue)",
			"void ConvertTimestampToRealTime(u64 timestamp, RealTime_t* realTimeOut, bool applyDst = true)",
			"void CopyStringFifo(StringFifo_t* destFifo, const StringFifo_t* srcFifo, MemArena_t* memArena, bool shrinkBufferToMatchContents)",
			"void CreateBezierPath(BezierPath_t* pathOut, MemArena_t* memArena, u64 numPartsExpected = 0)",
			"void CreateBktArray(BktArray_t* array, MemArena_t* memArena, u64 itemSize, u64 minBucketSize = 64, u64 initialSizeRequirement = 0)",
			"void CreateButton(Button_t* btn, MemArena_t* memArena, ButtonStyle_t style, MyStr_t text)",
			"void CreateCheckbox(Checkbox_t* cb, MemArena_t* memArena, bool initialState)",
			"void CreateDefaultProcessLog(ProcessLog_t* logOut)",
			"void CreateMouseHitInfo(const PlatWindow_t* window, u64 priority, MyStr_t name, const void* pntr, u64 index, MouseHitInfo_t* infoOut)",
			"void CreateParticleEngine(ParticleEngine_t* engine, MemArena_t* memArena, u64 maxParticles = 0, u64 minBucketSize = 64, u64 initialSizeRequirement = 0)",
			"void CreatePostProcessingChain(PostProcessingChain_t* chain, MemArena_t* memArena, v2i size, u64 antialiasingNumSamples, u8 channelFlags = FrameBufferChannel_Default)",
			"void CreateProcessLog(ProcessLog_t* logOut, u64 fifoSize, MemArena_t* fifoArena, MemArena_t* logArena)",
			"void CreateProcessLogStub(ProcessLog_t* logOut)",
			"void CreateRandomSeries(RandomSeries_t* series, RandomSeriesType_t type = RandomSeriesType_LinearCongruential64, u64 defaultIncrement = 1)",
			"void CreateShaderMultiPieceFragment(Shader_t* shaderOut, MyStr_t fragmentPiece)",
			"void CreateShaderMultiPieceStart(MemArena_t* memArena, Shader_t* shaderOut, VertexType_t vertexType, u32 requiredUniforms, u64 numVertexPieces = 0, u64 numFragmentPieces = 0)",
			"void CreateShaderMultiPieceVertex(Shader_t* shaderOut, MyStr_t vertexPiece)",
			"void CreateSoundFromOggAudioData(const OggAudioData_t* oggData, PlatAudioFormat_t outFormat, Sound_t* soundOut, MemArena_t* memArena)",
			"void CreateSoundFromWavAudioData(const WavAudioData_t* wavData, PlatAudioFormat_t outFormat, Sound_t* soundOut, MemArena_t* memArena)",
			"void CreateStrHashDict(StrHashDict_t* dict, MemArena_t* memArena, u64 itemSize, u64 initialRequiredCapacity = 0)",
			"void CreateStringFifo(StringFifo_t* fifo, u64 bufferSize, u8* bufferPntr)",
			"void CreateStringFifoInArena(StringFifo_t* fifo, MemArena_t* memArena, u64 bufferSize)",
			"void CreateSubImageData(const PlatImageData_t* sourceImageData, reci sourceRec, PlatImageData_t* imageDataOut, MemArena_t* allocArena)",
			"void CreateTextbox(Textbox_t* tb, MemArena_t* memArena, u64 textBufferSize, bool fixedTextBuffer, bool isMultiline)",
			"void CreateValueSlider(ValueSlider_t* slider, MemArena_t* memArena, ValueSliderStyle_t style, r32 minValue, r32 maxValue, r32 notchSize, r32 initialValue)",
			"void CreateVarArray(VarArray_t* array, MemArena_t* memArena, u64 itemSize, u64 initialRequiredCapacity = 0, bool exponentialChunkSize = true, u64 allocChunkSize = 8)",
			"void CreateVectorImgPartFromSvgGroup(VectorImg_t* image, VectorImgPart_t* partOut, VectorImgPart_t* parent, const SvgData_t* svgData, const SvgGroup_t* svgGroup, u64 groupIndex)",
			"void CreateWordTree(WordTree_t* tree, MemArena_t* memArena, u64 initialRequiredCapacity = 0, bool exponentialChunkSize = true, u64 allocChunkSize = 8)",
			"void DebugConsoleAddSelectionRec(DebugConsoleSelectionRecsContext_t* context, FontFlowState_t* state)",
			"void DebugConsoleCaptureMouse(DebugConsole_t* console)",
			"void DebugConsoleClampScroll(DebugConsole_t* console)",
			"void DebugConsoleClearAutocompleteItems(DebugConsole_t* console, bool resetAnimation = true)",
			"void DebugConsoleClearInputHistory(DebugConsole_t* console)",
			"void DebugConsoleClose(DebugConsole_t* console)",
			"void DebugConsoleDismissAutocomplete(DebugConsole_t* console)",
			"void DebugConsoleLayout(DebugConsole_t* console)",
			"void DebugConsoleLineAdded(DebugConsole_t* console, StringFifoLine_t* newLine) //pre-declared in pig_func_defs.h",
			"void DebugConsoleLineLayout(DebugConsole_t* console, StringFifoLine_t* fifoLine, DebugConsoleLine_t* dbgLine)",
			"void DebugConsoleRegisterCommand(DebugConsole_t* console, MyStr_t command, MyStr_t description, u64 numArguments, MyStr_t* arguments) //pre-declared in pig_func_defs.h",
			"void DebugConsoleRenderGutterBlock(rec gutterRec, MyStr_t text, rec nextLineMainRec, r32 blockStartY, rec viewRec, Color_t gutterColor, Color_t textColor, r32 textOffsetY)",
			"void DebugConsoleUpdateAutocompleteItems(DebugConsole_t* console, bool forceShowAllItems = false)",
			"void DebugPrintArenaInfo(MemArena_t* memArena, const char* arenaName)",
			"void DebugPrintDebugBindingEntry(const char* indentation, const PigDebugBindingsEntry_t* binding)",
			"void DestroyFont(Font_t* font)",
			"void DestroyFrameBuffer(FrameBuffer_t* buffer)",
			"void DestroyModel(Model_t* model)",
			"void DestroyPostProcessingChain(PostProcessingChain_t* chain)",
			"void DestroyShader(Shader_t* shader)",
			"void DestroySpriteSheet(SpriteSheet_t* sheet)",
			"void DestroyStringFifo(StringFifo_t* fifo)",
			"void DestroyTexture(Texture_t* texture)",
			"void DestroyVectorImg(VectorImg_t* image)",
			"void DestroyVectorImgPart(VectorImg_t* image, VectorImgPart_t* part)",
			"void DestroyVectorImgShape(VectorImg_t* image, VectorImgPart_t* part, VectorImgShape_t* shape)",
			"void DestroyVertBuffer(VertBuffer_t* buffer)",
			"void DisposeConfirmDialog(ConfirmDialog_t* dialog)",
			"void DisposeConfirmDialog(u64 dialogId)",
			"void DoFullscreenOnMonitor(const PlatWindow_t* window, const PlatMonitorInfo_t* monitor, v2i resolution, i64 framerate, bool doDebugOutput = false)",
			"void DoubleBindPostProcessingChainInputTexture(PostProcessingChain_t* chain, u64 inputIndex1, u64 inputIndex2)",
			"void DumpProcessLog(const ProcessLog_t* log, const char* headerAndFooterStr = nullptr, DbgLevel_t minLevel = DbgLevel_Debug)",
			"void EndFont(Font_t* font)",
			"void FocusItem(const void* itemPntr, MyStr_t itemName)",
			"void FocusItem(const void* itemPntr, const char* itemName)",
			"void FocusItemPrint(const void* itemPntr, const char* formatString, ...)",
			"void FocusTextbox(Textbox_t* tb)",
			"void FontFinishFace(Font_t* font, FontFace_t* face)",
			"void FontFlow_DoLineBreak(FontFlowState_t* flowState, FontFlowCallbacks_t* callbacks = nullptr)",
			"void FontFlow_Initialize(FontFlowState_t* flowStateOut, MyStr_t text, const Font_t* font, FontFaceSelector_t selector, Color_t color, v2 position,\n\tTextAlignment_t alignment = TextAlignment_Left, r32 scale = 1.0f, r32 maxWidth = 0.0f)",
			"void FontFlow_Main(FontFlowState_t* flowState, FontFlowCallbacks_t* callbacks = nullptr, FontFlowInfo_t* infoOut = nullptr)",
			"void FontFlow_RenderText(MyStr_t text, const Font_t* font, FontFaceSelector_t selector, Color_t color, v2 position,\n\tTextAlignment_t alignment = TextAlignment_Left, r32 scale = 1.0f, r32 maxWidth = 0.0f,\n\tFontFlowCallbacks_t* callbacks = nullptr, FontFlowInfo_t* infoOut = nullptr)",
			"void FreeBezierPath(BezierPath_t* path)",
			"void FreeBktArray(BktArray_t* array)",
			"void FreeButton(Button_t* btn)",
			"void FreeCheckbox(Checkbox_t* cb)",
			"void FreeConfirmDialog(ConfirmDialog_t* dialog)",
			"void FreeCopiedPartsPrefab(MemArena_t* allocArena, PartsPrefab_t* prefab)",
			"void FreeLinkedList(LinkedList_t* list)",
			"void FreeMemArena(MemArena_t* arena)",
			"void FreeMouseHitInfo(MouseHitInfo_t* info)",
			"void FreeObjModelData(ObjModelData_t* objFile)",
			"void FreeOggAudioData(OggAudioData_t* oggData)",
			"void FreeParticleEngine(ParticleEngine_t* engine)",
			"void FreePartsPrefabCollection(PartsPrefabCollection_t* collection)",
			"void FreePigNotification(PigNotification_t* notification)",
			"void FreePrimitiveIndexedVerts(PrimitiveIndexedVerts_t* indexedVerts)",
			"void FreeProcessLog(ProcessLog_t* log)",
			"void FreeSound(Sound_t* sound)",
			"void FreeStrHashDict(StrHashDict_t* dict)",
			"void FreeSvgData(SvgData_t* data)",
			"void FreeTextbox(Textbox_t* tb)",
			"void FreeValueSlider(ValueSlider_t* slider)",
			"void FreeVarArray(VarArray_t* array)",
			"void FreeWavAudioData(WavAudioData_t* wavData)",
			"void FreeWordTree(WordTree_t* tree)",
			"void FreeXmlParser(XmlParser_t* parser)",
			"void GameAllocateAppStateStructs(AppStateStructs_t* appStateStructs)",
			"void GameGeneralInit()",
			"void GameGeneralUpdate()",
			"void GameGetStartupOptions(const StartupInfo_t* info, StartupOptions_t* options)",
			"void GameHandleCompletedTask(PlatTask_t* task)",
			"void GameHandleReload()",
			"void GameHandleTask(const PlatformInfo_t* info, const PlatformApi_t* api, PlatThreadPoolThread_t* thread, PlatTask_t* task)",
			"void GameInitAppGlobals(AppGlobals_t* globals)",
			"void GameLoadDebugBindings(PigDebugBindings_t* bindings)",
			"void GameLoadSettings(PigSettings_t* settingsOut, MemArena_t* memArena)",
			"void GameParseSettings()",
			"void GamePinResources()",
			"void GamePrepareForClose()",
			"void GameUpdateGlobals()",
			"void GenerateBezierPathForCircle(MemArena_t* arena, v2 center, r32 radius, BezierPath_t* pathOut)",
			"void GenerateBezierPathForObb2(MemArena_t* arena, obb2 boundingBox, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRectangle(MemArena_t* arena, rec rectangle, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRoundedObb2(MemArena_t* arena, obb2 boundingBox, r32 cornerRadius, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRoundedRectangle(MemArena_t* arena, rec rectangle, r32 cornerRadius, BezierPath_t* pathOut)",
			"void GetMusicVolumesForFade(MusicFade_t fade, r32 progress, r32* currentVolumeOut, r32* previousVolumeOut)",
			"void GyLibAssertFailure(const char* filePath, int lineNumber, const char* funcName, const char* expressionStr, const char* messageStr)",
			"void HandleInputEvent(InputEvent_t* inputEvent, bool extended = false)",
			"void InitMemArena_Alias(MemArena_t* arena, MemArena_t* sourceArena)",
			"void InitMemArena_Buffer(MemArena_t* arena, u64 bufferSize, void* bufferPntr, bool singleAlloc = false, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_FixedHeap(MemArena_t* arena, u64 size, void* memoryPntr, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_MarkedStack(MemArena_t* arena, u64 size, void* memoryPntr, u64 maxNumMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapArena(MemArena_t* arena, u64 pageSize, MemArena_t* sourceArena, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapFuncs(MemArena_t* arena, u64 pageSize, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_Redirect(MemArena_t* arena, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc)",
			"void InitMemArena_StdHeap(MemArena_t* arena)",
			"void InitPigAudioOutGraph(PigAudioOutGraph_t* graph)",
			"void InitRenderContext()",
			"void InitResourceStatus(ResourceStatus_t* status)",
			"void InitializeDebugConsole(DebugConsole_t* console, u64 fifoSize, u8* fifoSpace, u64 buildSize, u8* buildSpace)",
			"void InitializePigDebugOverlay(PigDebugOverlay_t* overlay)",
			"void InitializePigMemGraph(PigMemGraph_t* graph)",
			"void InitializePigPerfGraph(PigPerfGraph_t* graph)",
			"void InsertProcessLogInOrder(const ProcessLog_t* log, const char* headerAndFooterStr = nullptr, DbgLevel_t minLevel = DbgLevel_Debug)",
			"void InvertPrimitiveVerts(PrimitiveIndexedVerts_t* indexedVerts)",
			"void LayoutAocAppState()",
			"void MakeFontFaceDefault(Font_t* font, FontFace_t* face)",
			"void ParticleEngineClear(ParticleEngine_t* engine)",
			"void PigAudioOutGraphCaptureMouse(PigAudioOutGraph_t* graph)",
			"void PigAudioOutGraphLayout(PigAudioOutGraph_t* graph)",
			"void PigAudioOutGraphLoadIcons(PigAudioOutGraph_t* graph)",
			"void PigAudioService(AudioServiceInfo_t* audioInfo)",
			"void PigCaptureMouseConfirmDialogs()",
			"void PigClearDebugBindings(PigDebugBindings_t* bindings)",
			"void PigClearGlobals()",
			"void PigClosing()",
			"void PigDebugOverlayCaptureMouse(PigDebugOverlay_t* overlay)",
			"void PigDebugOverlayLayout(PigDebugOverlay_t* overlay)",
			"void PigEntryPoint(PigEntryPoint_t entryPoint, const PlatformInfo_t* info, const PlatformApi_t* api, EngineMemory_t* memory, EngineInput_t* input, EngineOutput_t* output)",
			"void PigExitPoint(PigEntryPoint_t entryPoint)",
			"void PigFreeDebugBindingsEntry(PigDebugBindingsEntry_t* entry, MemArena_t* memArena)",
			"void PigFreeSettings(PigSettings_t* settings)",
			"void PigHandlePlatformDebugLines(const StringFifo_t* platDebugLines)",
			"void PigHandleTaskCompletedInputEvents()",
			"void PigInitAudioOutput()",
			"void PigInitConfirmDialogs()",
			"void PigInitDebugBindings(PigDebugBindings_t* bindings, MemArena_t* memArena)",
			"void PigInitGlad()",
			"void PigInitMusicSystem(MusicSystemState_t* music)",
			"void PigInitNotifications(PigNotificationQueue_t* queue)",
			"void PigInitSettings(PigSettings_t* settings, MemArena_t* memArena, u64 numEntriesExpected = 0)",
			"void PigInitSounds()",
			"void PigInitialize(EngineMemory_t* memory)",
			"void PigLoadDebugBindingsFullService(PigDebugBindings_t* bindingsOut, MyStr_t filePath)",
			"void PigMemGraphAddArena(PigMemGraph_t* graph, MemArena_t* arenaPntr, MyStr_t name, Color_t fillColor)",
			"void PigMemGraphCaptureMouse(PigMemGraph_t* graph)",
			"void PigMemGraphGetPageInfo(MemArena_t* arenaPntr, u64 pageIndex, PigMemGraphArena_t* arena, PigMemGraphArenaPage_t* page)",
			"void PigMemGraphLayout(PigMemGraph_t* graph)",
			"void PigNotificationsCaptureMouse(PigNotificationQueue_t* queue)",
			"void PigNotificationsLayout(PigNotificationQueue_t* queue)",
			"void PigPerfGraphCaptureMouse(PigPerfGraph_t* graph)",
			"void PigPerfGraphLayout(PigPerfGraph_t* graph)",
			"void PigPerfGraphMark_(PigPerfGraph_t* graph)",
			"void PigPostReload(Version_t oldVersion)",
			"void PigPreReload(Version_t newVersion)",
			"void PigRegisterDebugCommands()",
			"void PigRenderConfirmDialogs()",
			"void PigRenderDebugOverlays()",
			"void PigRenderForcedOverlays()",
			"void PigRenderNotifications(PigNotificationQueue_t* queue)",
			"void PigRenderOutOfScreenshotOverlays()",
			"void PigUpdate()",
			"void PigUpdateConfirmDialogs()",
			"void PigUpdateMainWindow()",
			"void PigUpdateMusicSystem(MusicSystemState_t* music)",
			"void PigUpdateNotifications(PigNotificationQueue_t* queue)",
			"void PigUpdateSounds()",
			"void Pig_CaptureScreenshot()",
			"void Pig_CaptureScreenshotSub(reci subPartRec)",
			"void Pig_ChangeWindow(const PlatWindow_t* window)",
			"void Pig_FinishGif()",
			"void Pig_HandleAppStateChanges(bool initialAppState)",
			"void Pig_HandleDebugBindings(PigDebugBindings_t* bindings)",
			"void Pig_HandleResourcesOnReload()",
			"void Pig_HandleScreenshotHotkeys()",
			"void Pig_InitResources()",
			"void Pig_InitializeAppStateStack()",
			"void Pig_InitializeInput()",
			"void Pig_InitializeSteamAvatars()",
			"void Pig_InitializeWindowStates()",
			"void Pig_InputRenderDebugInfo()",
			"void Pig_LoadAllFonts(bool onlyPinned = false)",
			"void Pig_LoadAllMusics(bool onlyPinned = false)",
			"void Pig_LoadAllResources(bool onlyPinned = false)",
			"void Pig_LoadAllShaders(bool onlyPinned = false)",
			"void Pig_LoadAllSounds(bool onlyPinned = false)",
			"void Pig_LoadAllSpriteSheets(bool onlyPinned = false)",
			"void Pig_LoadAllTextures(bool onlyPinned = false)",
			"void Pig_LoadAllVectorImgs(bool onlyPinned = false)",
			"void Pig_LoadFontResource(u64 fontIndex)",
			"void Pig_LoadMusicResource(u64 musicIndex)",
			"void Pig_LoadResource(ResourceType_t type, u64 resourceIndex)",
			"void Pig_LoadResourceAtStartup(bool onlyPinned, r32 loadingBarBase, r32 loadingBarAmount)",
			"void Pig_LoadShaderResource(u64 shaderIndex)",
			"void Pig_LoadSoundResource(u64 soundIndex)",
			"void Pig_LoadSpriteSheetResource(u64 sheetIndex)",
			"void Pig_LoadTextureResource(u64 textureIndex)",
			"void Pig_LoadVectorImgResource(u64 vectorImgIndex)",
			"void Pig_SaveGif(LinkedList_t* frames, MyStr_t filePath)",
			"void Pig_SaveScreenshot(FrameBuffer_t* frameBuffer, reci subPartRec, MyStr_t filePath)",
			"void Pig_StartGifRecording()",
			"void Pig_StartGifRecordingSub(reci subPartRec)",
			"void Pig_StoreGifFrame(FrameBuffer_t* frameBuffer, reci subPartRec, LinkedList_t* frames)",
			"void Pig_UpdateBtnHandlingInfoBefore(BtnHandlingInfo_t* info, const PlatBtnState_t* btnState)",
			"void Pig_UpdateCaptureHandling(const PlatWindow_t* window, PigWindowState_t* state)",
			"void Pig_UpdateInputAfter()",
			"void Pig_UpdateInputBefore()",
			"void Pig_UpdateResources()",
			"void Pig_UpdateSteamAvatars()",
			"void Pig_UpdateWindowStates()",
			"void PinAllResourcesOfType(ResourceType_t type)",
			"void PinResource(const void* resourcePntr)",
			"void PlatFreeFunc(void* allocPntr)",
			"void PopAppState()",
			"void PopMemMark(MemArena_t* arena)",
			"void PostProcessingChainEnd(PostProcessingChain_t* chain, FrameBuffer_t* outputBuffer, Shader_t* outputShader, bool bindTexture = true)",
			"void PostProcessingChainFirstPass(PostProcessingChain_t* chain, Color_t clearColor, Color_t color, u64 inputIndex1, u64 inputIndex2 = UINT64_MAX)",
			"void PostProcessingChainFirstPassPntrs(PostProcessingChain_t* chain, Color_t clearColor, Color_t color, FrameBuffer_t* firstInputBuffer, FrameBuffer_t* secondInputBuffer = nullptr)",
			"void PostProcessingChainNextPass(PostProcessingChain_t* chain, Color_t clearColor, Color_t color, u64 inputIndex2 = UINT64_MAX)",
			"void PostProcessingChainNextPassPntr(PostProcessingChain_t* chain, Color_t clearColor, Color_t color, FrameBuffer_t* secondInputBuffer = nullptr)",
			"void PrepareFrameBufferTexture(FrameBuffer_t* buffer)",
			"void PrintStructureOfVectorImg(const VectorImg_t* image)",
			"void PrintStructureOfVectorImgPartRecurse(const VectorImg_t* image, const VectorImgPart_t* part, u64 indentLevel)",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void PushAppState(AppState_t newState)",
			"void PushMemMark(MemArena_t* arena)",
			"void QuickSort(void* arrayPntr, u64 numElements, u64 elementSize, void* workingSpace, CompareFunc_f* compareFunc, void* contextPntr)",
			"void QuickSortAlloc(void* arrayPntr, u64 numElements, u64 elementSize, MemArena_t* workingAllocArena, CompareFunc_f* compareFunc, void* contextPntr = nullptr)",
			"void RcApplyModelMaterial(ModelMaterial_t* material, bool changeTexture = true)",
			"void RcBegin(const PlatWindow_t* window, FrameBuffer_t* frameBuffer, Shader_t* initialShader, Color_t clearColor, r32 clearDepth = 1.0f, i32 clearStencil = 0)",
			"void RcBindFont(const Font_t* font, FontFaceSelector_t faceSelector, r32 scale = 1)",
			"void RcBindFontDefault(const Font_t* font, r32 scale = 1)",
			"void RcBindFrameBuffer(FrameBuffer_t* buffer, bool forceRebind = false)",
			"void RcBindModel(Model_t* model)",
			"void RcBindShader(Shader_t* shader)",
			"void RcBindSpriteSheet(SpriteSheet_t* spriteSheet)",
			"void RcBindTexture1(Texture_t* texture)",
			"void RcBindTexture2(Texture_t* texture)",
			"void RcBindVertBuffer(const VertBuffer_t* buffer)",
			"void RcClearColor(Color_t color)",
			"void RcClearDepth(r32 depth)",
			"void RcClearFontFlowCallbacks()",
			"void RcClearStencil(i32 stencilValue)",
			"void RcDisableStencil()",
			"void RcDrawBezier3WithLines(v2 start, v2 control, v2 end, r32 thickness, Color_t color, u32 numVerts)",
			"void RcDrawBezier3WithShader(v2 start, v2 control, v2 end, r32 thickness, Color_t color, bool bindShader = true)",
			"void RcDrawBezier4WithLines(v2 start, v2 control1, v2 control2, v2 end, r32 thickness, Color_t color, u32 numVerts)",
			"void RcDrawBezier4WithShader(v2 start, v2 control1, v2 control2, v2 end, r32 thickness, Color_t color, bool bindShader = true)",
			"void RcDrawBezierPathWithShader(const BezierPath_t* path, r32 thickness, Color_t color, v2 offset, v2 scale, bool bindShader = true)",
			"void RcDrawBox(box boundingBox, Color_t color)",
			"void RcDrawBoxWireframe(box boundingBox, Color_t color, r32 thickness)",
			"void RcDrawBuffer(VertBufferPrimitive_t primitive, u64 startIndex = 0, u64 numVertices = 0)",
			"void RcDrawCircle(v2 center, r32 radius, Color_t color, bool bindShader = true)",
			"void RcDrawConvexPolygonWithShader(Color_t color, v2 vert0, v2 vert1, v2 vert2)",
			"void RcDrawDiagonalStripeInRec(rec rectangle, bool descending, r32 thickness, Color_t color, r32 offset = 0.0f)",
			"void RcDrawDonut(v2 center, r32 innerRadius, r32 radius, Color_t color, bool bindShader = true)",
			"void RcDrawEllipseArcWithShader(v2 center, v2 radius, r32 axisAngle, r32 startAngle, r32 angleDelta, r32 thickness, Color_t color, bool bindShader = true)",
			"void RcDrawEquilTriangleFrom(v2 base, r32 direction, r32 height, Color_t color)",
			"void RcDrawEquilTriangleFromTo(v2 base, v2 tip, Color_t color)",
			"void RcDrawEquilTriangleTo(v2 point, r32 direction, r32 height, Color_t color)",
			"void RcDrawFoldedRectangle(rec rectangle, r32 foldSize, u8 foldedCorners, Color_t color)",
			"void RcDrawFoldedRectangleOutline(rec rectangle, r32 foldSize, u8 foldedCorners, r32 thickness, Color_t color, bool outsideRectangle = false)",
			"void RcDrawGradientRectangle(rec rectangle, bool horizontal, Color_t colorLeftOrTop, Color_t colorRightOrBottom, bool bindShader = true)",
			"void RcDrawInverseCircle(v2 center, r32 radius, Color_t outerColor, bool bindShader = true)",
			"void RcDrawLine(v2 start, v2 end, r32 thickness, Color_t color)",
			"void RcDrawLine3D(v3 point1, v3 point2, r32 thickness, Color_t color)",
			"void RcDrawLine3DBox(v3 point1, v3 point2, r32 thickness, Color_t color)",
			"void RcDrawModelCustomTexture(v3 position, quat rotation, v3 scale, Color_t color, rec sourceRec)",
			"void RcDrawModelParts(u64 startPartIndex, u64 numParts, v3 position, quat rotation, v3 scale, Color_t color)",
			"void RcDrawModelSimple(v3 position, quat rotation, v3 scale, Color_t color)",
			"void RcDrawObb2(obb2 boundingBox, Color_t color)",
			"void RcDrawObb2Outline(obb2 boundingBox, Color_t color, r32 thickness, bool outsideBox = false)",
			"void RcDrawObb3D(obb3 boundingBox, Color_t color)",
			"void RcDrawPieChart(u64 numPiePieces, r64* piePiecePercentages, rec rectangle, Color_t tintColor)",
			"void RcDrawPieChartForPerfSectionBundle(const PerfSectionBundle_t* bundle, rec rectangle, Color_t tintColor, bool showPieceTextOnHover = false)",
			"void RcDrawPieChartTest(rec rectangle)",
			"void RcDrawPoint(v2 point, r32 size, Color_t color)",
			"void RcDrawPoint3D(v3 point, r32 radius, Color_t color, bool useBox = false, SphereQuality_t sphereQuality = SphereQuality_SuperLow)",
			"void RcDrawQuarterCircleFoldedRec(rec rectangle, r32 circleRadius, r32 circleMargin, r32 borderThickness, r32 circleBorderThickness, Color_t fillColor, Color_t circleFillColor, Color_t borderColor, Color_t circleBorderColor)",
			"void RcDrawRectangle(rec rectangle, Color_t color)",
			"void RcDrawRectangleOutline(rec rectangle, Color_t color, r32 thickness, bool outsideRectangle = false)",
			"void RcDrawRightAngleTriangle(rec rectangle, Dir2Ex_t direction, Color_t color)",
			"void RcDrawRoundedObb2(obb2 boundingBox, r32 cornerRadius, Color_t color, bool bindShader = true)",
			"void RcDrawRoundedRectangle(rec rectangle, r32 cornerRadius, Color_t color, bool bindShader = true)",
			"void RcDrawSheetFrame(v2i frame, obb2 boundingBox, Color_t color, bool flipX = false, bool flipY = false)",
			"void RcDrawSheetFrame(v2i frame, rec rectangle, Color_t color, bool flipX = false, bool flipY = false, Dir2_t rotation = Dir2_Down)",
			"void RcDrawSkybox(box boundingBox, Color_t color)",
			"void RcDrawSphere(v3 center, r32 radius, Color_t color, u64 sphereQuality = SphereQuality_Default)",
			"void RcDrawText(MyStr_t str, v2 position, Color_t color, TextAlignment_t alignment = TextAlignment_Left, r32 maxWidth = 0)",
			"void RcDrawTextPrint(v2 position, Color_t color, const char* formatString, ...)",
			"void RcDrawTextPrintEx(v2 position, Color_t color, TextAlignment_t alignment, r32 maxWidth, const char* formatString, ...)",
			"void RcDrawTextPrintWithBackground(v2 position, Color_t textColor, Color_t backgroundColor, v2 padding, const char* formatString, ...)",
			"void RcDrawTextPrintWithBackgroundEx(v2 position, Color_t textColor, Color_t backgroundColor, v2 padding, TextAlignment_t alignment, r32 maxWidth, const char* formatString, ...)",
			"void RcDrawTextWithColoredRegion(MyStr_t str, v2 position,\n\tColor_t color, Color_t regionColor, u64 regionStart, u64 regionNumBytes,\n\tTextAlignment_t alignment = TextAlignment_Left, r32 maxWidth = 0)",
			"void RcDrawTextWithSelection(MyStr_t str, v2 position,\n\tColor_t textColor, Color_t selectionTextColor, Color_t selectionColor, u64 selectionStart, u64 selectionNumBytes,\n\tTextAlignment_t alignment = TextAlignment_Left, r32 maxWidth = 0)",
			"void RcDrawTexturedBox(box boundingBox, Color_t color, rec sourceRec)",
			"void RcDrawTexturedBoxEx(box boundingBox, Color_t color,\n\trec rightSourceRec, rec topSourceRec, rec frontSourceRec,\n\trec leftSourceRec, rec bottomSourceRec, rec backSourceRec)",
			"void RcDrawTexturedObb2(obb2 boundingBox, Color_t color, rec sourceRec)",
			"void RcDrawTexturedObb3D(obb3 boundingBox, Color_t color, rec sourceRec)",
			"void RcDrawTexturedObb3DEx(obb3 boundingBox, Color_t color,\n\trec rightSourceRec, rec topSourceRec, rec frontSourceRec,\n\trec leftSourceRec, rec bottomSourceRec, rec backSourceRec)",
			"void RcDrawTexturedPartRectangle(rec rectangle, Color_t color, rec sourceRec)",
			"void RcDrawTexturedQuad(v2 topLeft, v2 topRight, v2 bottomRight, v2 bottomLeft, Color_t color)",
			"void RcDrawTexturedQuadSubPart(v2 topLeft, v2 topRight, v2 bottomRight, v2 bottomLeft, rec subPart, Color_t color)",
			"void RcDrawTexturedRectangle(rec rectangle, Color_t color)",
			"void RcDrawTexturedSphere(v3 center, r32 radius, Color_t color, u64 sphereQuality, rec sourceRec)",
			"void RcDrawTexturedTriangle(v3* positions, v2* texCoords, Color_t color)",
			"void RcDrawTriangle(v3* positions, Color_t color)",
			"void RcDrawTriangle2D(v2* positions, Color_t color)",
			"void RcDrawTriangle2DEx(v2 p1, v2 p2, v2 p3, v2 tc1, v2 tc2, v2 tc3, Color_t color)",
			"void RcDrawVectorImgPartAt(VectorImgPart_t* part, v2 position, r32 rotation, r32 scale, Color_t color, bool drawChildren = true)",
			"void RcDrawVectorImgPartInObb(VectorImgPart_t* part, obb2 boundingBox, Color_t color, bool drawChildren = true)",
			"void RcDrawVectorImgPartInRec(VectorImgPart_t* part, rec rectangle, Color_t color, bool drawChildren = true)",
			"void RcDrawVectorImgShape(VectorImgShape_t* shape, Color_t color)",
			"void RcDrawVoxelOrtho2D(rec rectangle, rec forwardSourceRec, rec leftSourceRec, rec topSourceRec, Color_t forwardColor, Color_t leftColor, Color_t topColor)",
			"void RcDrawVoxelOrtho2D(rec rectangle, rec sourceRec, Color_t color)",
			"void RcDrawVoxelOrthoFace2D(rec rectangle, rec sourceRec, Color_t color, Dir3_t side)",
			"void RcLoadBasicResources()",
			"void RcRenderTextWithSelectionDrawSelectionRec(v2 startPos, v2 currentPos, Color_t selectionColor)",
			"void RcSetAugmentMatrix(mat4 matrix)",
			"void RcSetBrightness(r32 brightness)",
			"void RcSetCameraPosition(v3 cameraPos)",
			"void RcSetCircleInnerRadius(r32 innerRadius)",
			"void RcSetCircleRadius(r32 radius)",
			"void RcSetColor1(Color_t color)",
			"void RcSetColor1(Colorf_t color)",
			"void RcSetColor2(Color_t color)",
			"void RcSetColor2(Colorf_t color)",
			"void RcSetCount(i32 count)",
			"void RcSetDepth(r32 depth)",
			"void RcSetDepthTestEnabled(bool enabled)",
			"void RcSetFaceCulling(bool enabled)",
			"void RcSetFaceSelector(FontFaceSelector_t faceSelector)",
			"void RcSetFillMode(PolygonFillMode_t fillMode)",
			"void RcSetFontFlowCallbacks(const FontFlowCallbacks_t* callbacks)",
			"void RcSetFontScale(r32 scale)",
			"void RcSetLineThickness(r32 thickness)",
			"void RcSetPlayerPosition(v3 playerPos)",
			"void RcSetPolygonPlane(u64 planeIndex, r32 direction, r32 distance)",
			"void RcSetProjectionMatrix(mat4 matrix)",
			"void RcSetSaturation(r32 saturation)",
			"void RcSetShiftVec(v2 shiftVec)",
			"void RcSetSourceRec1(rec rectangle)",
			"void RcSetSourceRec2(rec rectangle)",
			"void RcSetStencilPolarity(bool writePositiveValues)",
			"void RcSetTime(r32 time)",
			"void RcSetValue(u8 valueIndex, r32 value)",
			"void RcSetViewMatrix(mat4 matrix)",
			"void RcSetViewport(rec viewportRec, bool fakeScreenSpaceCoordinates = true)",
			"void RcSetWorldMatrix(mat4 matrix)",
			"void RcStartStencilDrawing()",
			"void RcUseStencil(bool inverseMask = false)",
			"void RecAlign(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignSize(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignTopLeft(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecLayoutBetweenX(rec* rectangleOut, r32 leftSide, r32 rightSide, r32 leftMargin = 0, r32 rightMargin = 0, r32 minWidth = 0)",
			"void RecLayoutBetweenY(rec* rectangleOut, r32 topSide, r32 bottomSide, r32 topMargin = 0, r32 bottomMargin = 0, r32 minHeight = 0)",
			"void RecLayoutBottomOf(rec* rectangleOut, r32 posOfThingUpwards, r32 topPadding = 0.0f)",
			"void RecLayoutBottomPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutHorizontalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void RecLayoutLeftOf(rec* rectangleOut, r32 posOfThingToRight, r32 rightPadding = 0.0f)",
			"void RecLayoutLeftPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutRightOf(rec* rectangleOut, r32 posOfThingToLeft, r32 leftPadding = 0.0f)",
			"void RecLayoutRightPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutTopOf(rec* rectangleOut, r32 posOfThingDownwards, r32 bottomPadding = 0.0f)",
			"void RecLayoutTopPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutVerticalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void ReduceRatioU32(u32* num1, u32* num2)",
			"void ReduceRatioU64(u64* num1, u64* num2)",
			"void RenderAppState(AppState_t appState, FrameBuffer_t* renderBuffer)",
			"void RenderButton(Button_t* btn)",
			"void RenderButton(Button_t* btn, v2 renderOffset)",
			"void RenderCheckbox(Checkbox_t* cb)",
			"void RenderDebugConsole(DebugConsole_t* console)",
			"void RenderDebugOverlayControllerState(PigDebugOverlay_t* overlay, const PlatControllerState_t* controller, rec drawRec)",
			"void RenderParticleEngine(ParticleEngine_t* engine, bool renderNormal, bool renderScreenSpace)",
			"void RenderPigAudioOutGraph(PigAudioOutGraph_t* graph)",
			"void RenderPigDebugOverlay(PigDebugOverlay_t* overlay)",
			"void RenderPigDebugOverlayBelowConsole(PigDebugOverlay_t* overlay)",
			"void RenderPigMemGraph(PigMemGraph_t* graph)",
			"void RenderPigPerfGraph(PigPerfGraph_t* graph)",
			"void RenderTextbox(Textbox_t* tb)",
			"void RenderValueSlider(ValueSlider_t* slider)",
			"void ResizeFrameBuffer(FrameBuffer_t* buffer, v2i newSize)",
			"void ResizePostProcessingChain(PostProcessingChain_t* chain, v2i newSize)",
			"void ReverseObjModelDataTriangleOrder(ObjModelData_t* objData)",
			"void SeedRandomSeriesU32(RandomSeries_t* series, u32 seed)",
			"void SeedRandomSeriesU64(RandomSeries_t* series, u64 seed)",
			"void SetBoolArrayValue(bool* boolArray, v2i index, v2i size, bool newValue)",
			"void SetButtonFont(Button_t* btn, Font_t* font, FontFaceSelector_t faceSelector)",
			"void SetProcessLogFilePath(ProcessLog_t* log, MyStr_t filePath)",
			"void SetProcessLogName(ProcessLog_t* log, MyStr_t processName)",
			"void SetSoundVolume(SoundInstance_t* instance, r32 newVolume)",
			"void SetTextboxFont(Textbox_t* tb, Font_t* font, FontFaceSelector_t faceSelector)",
			"void SetTextboxHintText(Textbox_t* tb, MyStr_t hintText)",
			"void SplitFilePath(MyStr_t fullPath, MyStr_t* directoryOut, MyStr_t* fileNameOut, MyStr_t* extensionOut = nullptr)",
			"void StartAocAppState(AppState_t oldAppState, bool initialize)",
			"void StartAppState(AppState_t appState, AppState_t oldAppState, bool initialize)",
			"void StartFont(Font_t* font, MemArena_t* memArena, u64 numFacesExpected = 0)",
			"void StartSoundInstance(SoundInstance_t* instance)",
			"void StartSoundInstanceAfterOtherInstance(SoundInstance_t* otherInstance, SoundInstance_t* newInstance)",
			"void StepRandomSeries(RandomSeries_t* series, u64 numberOfSteps = 1)",
			"void StopAocAppState(AppState_t newAppState, bool deinitialize, bool shuttingDown)",
			"void StopAppState(AppState_t appState, AppState_t newAppState, bool deinitialize, bool shuttingDown)",
			"void StopFullscreen(const PlatWindow_t* window, v2i resolution, i64 framerate, bool doDebugOutput = false)",
			"void StopSoundInstance(SoundInstanceHandle_t handle)",
			"void StopSoundInstance(SoundInstance_t* instance)",
			"void StopWatchingFilesForResource(ResourceType_t resourceType, u64 resourceIndex)",
			"void StringFifoAddBuildBuffer(StringFifo_t* fifo, u64 buildBufferSize, u8* buildSpace)",
			"void StringFifoAddBuildBufferInArena(StringFifo_t* fifo, u64 buildBufferSize, MemArena_t* memArena)",
			"void StringFifoBuild(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoBuildEx(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoInsertLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, StringFifoPushLineSort_f* sortCallback, MemArena_t* arenaForTempSpace, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void StringFifoPopLine(StringFifo_t* fifo)",
			"void StringFifoPushLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void SvgApplyParentGroupTransformsToGroup(ProcessLog_t* log, SvgData_t* svgData, SvgGroup_t* group)",
			"void SvgApplyParentGroupTransformsToShape(ProcessLog_t* log, SvgData_t* svgData, SvgGroup_t* currentGroup, SvgShape_t* shape)",
			"void TextboxCaptureMouse(Textbox_t* tb)",
			"void TextboxClearSelection(Textbox_t* tb)",
			"void TextboxLayout(Textbox_t* tb)",
			"void TextboxMove(Textbox_t* tb, rec targetRec)",
			"void TextboxSetText(Textbox_t* tb, MyStr_t newText)",
			"void TextureGenerateMipmaps(Texture_t* texture)",
			"void ToggleFullscreen(bool doDebugOutput = false)",
			"void TwoPassPrint(char* resultPntr, u64 resultLength, u64* currentByteIndex, const char* formatString, ...)",
			"void UpdateAocAppState()",
			"void UpdateAppState(AppState_t appState)",
			"void UpdateButton(Button_t* btn)",
			"void UpdateButton(Button_t* btn, v2 renderOffset)",
			"void UpdateCheckbox(Checkbox_t* cb)",
			"void UpdateDebugConsole(DebugConsole_t* console)",
			"void UpdateParticleEngine(ParticleEngine_t* engine, r64 elapsedMs)",
			"void UpdatePigAudioOutGraph(PigAudioOutGraph_t* graph)",
			"void UpdatePigDebugOverlay(PigDebugOverlay_t* overlay)",
			"void UpdatePigMemGraph(PigMemGraph_t* graph)",
			"void UpdatePigPerfGraph(PigPerfGraph_t* graph)",
			"void UpdatePigPerfGraphBefore(PigPerfGraph_t* graph)",
			"void UpdateSettingsWithWindowInfo(PigSettings_t* settings, const PlatWindow_t* window, MemArena_t* printArena)",
			"void UpdateTextbox(Textbox_t* tb)",
			"void UpdateValueSlider(ValueSlider_t* slider)",
			"void ValueSliderCaptureMouse(ValueSlider_t* slider)",
			"void ValueSliderLayout(ValueSlider_t* slider)",
			"void ValueSliderMove(ValueSlider_t* slider, rec targetRec, r32 sliderWidth)",
			"void VarArrayAddVarArray(VarArray_t* destArray, const VarArray_t* sourceArray, u64 destIndex, u64 sourceIndex = 0, u64 sourceCount = UINT64_MAX)",
			"void VarArrayClear(VarArray_t* array, bool deallocate = false)",
			"void VarArrayCopy(VarArray_t* destArray, const VarArray_t* sourceArray, MemArena_t* memArena)",
			"void VarArrayName(VarArray_t* array, MyStr_t newName)",
			"void VarArraySort(VarArray_t* array, CompareFunc_f* compareFunc, void* contextPntr)",
			"void Vec2Align(v2* vectorOut, r32 alignmentScale = 1.0f)",
			"void Vec3Align(v3* vectorOut, r32 alignmentScale = 1.0f)",
			"void Vec4Align(v4* vectorOut, r32 alignmentScale = 1.0f)",
			"void* AllocMem(MemArena_t* arena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"void* GetFifoLineMetaStruct_(StringFifoLine_t* line, u64 expectedStructSize)",
			"void* GetResourcePntr(ResourceType_t type, u64 resourceIndex)",
			"void* PlatAllocFunc(u64 size)",
			"void* PlatReallocFunc(void* allocPntr, u64 newSize, u64 oldSize = 0)",
			"void* ReallocMem(MemArena_t* arena, void* allocPntr, u64 newSize, u64 oldSize = 0, AllocAlignment_t alignOverride = AllocAlignment_None, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"void* VarArrayMove(VarArray_t* array, u64 fromIndex, u64 toIndex, bool swapWithTarget = true)",
			"void* WordTreeGetPntr(WordTree_t* tree, MyStr_t word)",
		],
		"custom_globals":
		[
			"ElapsedMs",
			"LocalTimestamp",
			"MousePos",
			"PrimeNumbersU32",
			"ProgramTime",
			"ScreenSize",
			"TempArena",
			"TimeScale",
			"UnixTimestamp",
			"aoc",
			"aocArena",
			"fixedHeap",
			"gl",
			"mainHeap",
			"mmenu",
			"pig",
			"pigEntryPoint",
			"pigIn",
			"pigOut",
			"plat",
			"platHeap",
			"platInfo",
			"rc",
		],
		"custom_types":
		[
			"AdventOfCodeState_t",
			"AllocAlignment_t",
			"AllocationFunction_f",
			"Aoc2022_02_Result_t",
			"Aoc2022_02_t",
			"AocSolutionBtn_t",
			"AocSolution_t",
			"Aoc_2021_02_Instruction_t",
			"AppGlobals_t",
			"AppStateChange_t",
			"AppStateStructs_t",
			"AppState_t",
			"AsciiTree_t",
			"Axis_t",
			"Basis_t",
			"BeforeCharRenderContext_t",
			"Bezier3_t",
			"Bezier4_t",
			"BezierPathPartArcFlag_t",
			"BezierPathPartType_t",
			"BezierPathPart_t",
			"BezierPath_t",
			"BktArrayBucket_t",
			"BktArray_t",
			"BoolFunc_f",
			"Box_t",
			"Boxi_t",
			"BtnHandlingInfo_t",
			"ButtonStyle_t",
			"Button_t",
			"Checkbox_t",
			"Circle_t",
			"CollectionNamedColor_t",
			"ColorHSV_t",
			"ColorLAB_t",
			"ColorLCH_t",
			"ColorXYZ_t",
			"Color_t",
			"Colorf_t",
			"CompareFunc_f",
			"Cone_t",
			"ConfirmDialogBtn_t",
			"ConfirmDialogCallback_f",
			"ConfirmDialog_t",
			"CyclicFunc2DCallback_f",
			"CyclicFunc2D_t",
			"CyclicFuncCallback_f",
			"CyclicFuncType_t",
			"CyclicFunc_t",
			"Cylinder_t",
			"DayOfWeek_t",
			"DbgConsoleState_t",
			"DbgFlags_t",
			"DebugCommandInfoList_t",
			"DebugCommandInfo_t",
			"DebugConsoleAutocompleteItem_t",
			"DebugConsoleFindMouseContext_t",
			"DebugConsoleLine_t",
			"DebugConsoleRegisteredCommand_t",
			"DebugConsoleSelectionRec_t",
			"DebugConsoleSelectionRecsContext_t",
			"DebugConsoleTextPos_t",
			"DebugConsole_t",
			"Dir2Ex_t",
			"Dir2_t",
			"Dir3Ex_t",
			"Dir3_t",
			"DoPartsPrefabCallback_f",
			"DumpProcessLogContext_t",
			"EasingStyle_t",
			"FindCursorIndexInFlowedTextContext_t",
			"FontBakeFlag_t",
			"FontBake_t",
			"FontCharInfo_t",
			"FontFaceFlag_t",
			"FontFaceSelector_t",
			"FontFace_t",
			"FontFlowAfterCharCallback_f",
			"FontFlowAfterLineCallback_f",
			"FontFlowBeforeCharCallback_f",
			"FontFlowBeforeLineCallback_f",
			"FontFlowBetweenCharCallback_f",
			"FontFlowCallbacks_t",
			"FontFlowInfo_t",
			"FontFlowState_t",
			"FontHandle_t",
			"FontRange_t",
			"Font_t",
			"FrameBufferChannel_t",
			"FrameBufferError_t",
			"FrameBuffer_t",
			"FreeFunction_f",
			"Frustum_t",
			"GameTask_t",
			"GyDbgLevel_t",
			"GyLibDebugOutput_f",
			"GyLibDebugPrint_f",
			"HandlePlatformLinesContext_t",
			"HeapAllocPrefix_t",
			"HeapPageHeader_t",
			"I32Func_f",
			"InDblLinkedList_t",
			"InLinkedList_t",
			"LineParser_t",
			"LinkedListNode_t",
			"LinkedList_t",
			"MainMenuBtn_t",
			"MarkedStackArenaHeader_t",
			"Matrix4x4_t",
			"MemArenaType_t",
			"MemArena_t",
			"ModelMaterial_t",
			"ModelPart_t",
			"Model_t",
			"Month_t",
			"MouseHitInfo_t",
			"MusicFade_t",
			"MusicHandle_t",
			"MusicSystemState_t",
			"MyStr_t",
			"MyWideStr_t",
			"Obb2D_t",
			"ObjModelDataFace_t",
			"ObjModelDataMaterialLibrary_t",
			"ObjModelDataMaterial_t",
			"ObjModelDataObject_t",
			"ObjModelData_t",
			"OggAudioData_t",
			"OggError_t",
			"ParsingTokenType_t",
			"ParsingToken_t",
			"PartMovementType_t",
			"ParticleEngine_t",
			"ParticleFlags_t",
			"Particle_t",
			"PartsBurst_t",
			"PartsDistroFunc_t",
			"PartsEmissionShape_t",
			"PartsParamColor_t",
			"PartsParamI32_t",
			"PartsParamR32_t",
			"PartsParamVec2_t",
			"PartsParamVec2i_t",
			"PartsPrefabCollectionError_t",
			"PartsPrefabCollection_t",
			"PartsPrefab_t",
			"PartsTypeFlag_t",
			"PartsType_t",
			"PigAudioOutGraph_t",
			"PigDebugBindingType_t",
			"PigDebugBindingsEntry_t",
			"PigDebugBindings_t",
			"PigDebugOverlay_t",
			"PigEntryPoint_t",
			"PigGifFrame_t",
			"PigMemGraphArenaPage_t",
			"PigMemGraphArena_t",
			"PigMemGraph_t",
			"PigNotificationQueue_t",
			"PigNotification_t",
			"PigPerfGraph_t",
			"PigSettingsEntry_t",
			"PigSettings_t",
			"PigState_t",
			"PigTask_t",
			"PigTryDeserDebugBindingsError_t",
			"PigTryDeserSettingsError_t",
			"PigWindowState_t",
			"Plane_t",
			"PolygonFillMode_t",
			"PostProcessingChain_t",
			"PrimitiveIndex3D_t",
			"PrimitiveIndexedVerts_t",
			"PrimitiveVert3D_t",
			"ProcessLog_t",
			"Pyramid_t",
			"Quaternion_t",
			"RandomSeriesType_t",
			"RandomSeries_t",
			"Ray2_t",
			"Ray3_t",
			"RayVsBoxResult_t",
			"RayVsObb2DResult_t",
			"RayVsRectangle2DResult_t",
			"RcRenderTextWithColoredRegionCallbackContext_t",
			"RcRenderTextWithSelectionCallbackContext_t",
			"ReadFileContentsCallback_f",
			"RealTime_t",
			"Rectangle_t",
			"Rectanglei_t",
			"RenderContextState_t",
			"RenderContext_t",
			"ResourceFontFaceMetaInfo_t",
			"ResourceFontMetaInfo_t",
			"ResourceFonts_t",
			"ResourceMusics_t",
			"ResourceShaderMetaInfo_t",
			"ResourceShaders_t",
			"ResourceSheetMetaInfo_t",
			"ResourceSheets_t",
			"ResourceSounds_t",
			"ResourceState_t",
			"ResourceStatus_t",
			"ResourceTextureMetaInfo_t",
			"ResourceTextures_t",
			"ResourceType_t",
			"ResourceVectors_t",
			"ResourceWatch_t",
			"Resources_t",
			"ShaderDynamicUniform_t",
			"ShaderError_t",
			"ShaderHandle_t",
			"ShaderUniform_t",
			"Shader_t",
			"Simplex_t",
			"SoundHandle_t",
			"SoundInstanceHandle_t",
			"SoundInstanceType_t",
			"SoundInstance_t",
			"Sound_t",
			"SphereQuality_t",
			"Sphere_t",
			"SpriteSheetError_t",
			"SpriteSheetFramePoint_t",
			"SpriteSheetFrame_t",
			"SpriteSheetHandle_t",
			"SpriteSheetMetaError_t",
			"SpriteSheet_t",
			"SteamAvatar_t",
			"StrHashDictItem_t",
			"StrHashDictIter_t",
			"StrHashDict_t",
			"StringFifoLine_t",
			"StringFifoPushLineAfter_f",
			"StringFifoPushLineBefore_f",
			"StringFifoPushLineSort_f",
			"StringFifo_t",
			"SvgData_t",
			"SvgFillStyle_t",
			"SvgFill_t",
			"SvgGroup_t",
			"SvgPathDataCmd_t",
			"SvgShapeType_t",
			"SvgShape_t",
			"SvgStrokeStyle_t",
			"SvgStroke_t",
			"SvgTransformType_t",
			"SvgTransform_t",
			"TaskCallbackFunc_f",
			"TextAlignment_t",
			"TextMeasure_t",
			"TextParser_t",
			"Textbox_FontFlowContext_t",
			"Textbox_MoveCursorType_t",
			"Textbox_t",
			"TextureError_t",
			"TextureHandle_t",
			"Texture_t",
			"TimeUnit_t",
			"Triangle2D_t",
			"Triangle3D_t",
			"TriangulatePart_t",
			"TriangulateResult_t",
			"TriangulateVert_t",
			"TryDeserSvgFileError_t",
			"TryDeserializeObjFileError_t",
			"TryGetSettingResult_t",
			"TryParseFailureReason_t",
			"ValueSliderStyle_t",
			"ValueSlider_t",
			"VarArray_t",
			"Vector2_t",
			"Vector2i_t",
			"Vector3_t",
			"Vector3i_t",
			"Vector4_t",
			"Vector4i_t",
			"VectorImgError_t",
			"VectorImgFillType_t",
			"VectorImgFill_t",
			"VectorImgHandle_t",
			"VectorImgLoop_t",
			"VectorImgPart_t",
			"VectorImgShapeType_t",
			"VectorImgShape_t",
			"VectorImgStrokeType_t",
			"VectorImgStroke_t",
			"VectorImg_t",
			"VertBufferPrimitive_t",
			"VertBuffer_t",
			"Vertex2D_t",
			"Vertex3D_t",
			"VertexArrayObject_t",
			"VertexAttribLocations_t",
			"VertexType_t",
			"VoidFunc_f",
			"WAV_Chunk_t",
			"WAV_FormatChunk_t",
			"WAV_Header_t",
			"WAV_RiffIterator_t",
			"WavAudioDataChunk_t",
			"WavAudioData_t",
			"WavError_t",
			"Wedge_t",
			"WordBreakCharClass_t",
			"WordTreeLeaf_t",
			"WordTreeNode_t",
			"WordTree_t",
			"WriteEntireFileCallback_f",
			"XmlParseResultType_t",
			"XmlParseResult_t",
			"XmlParser_t",
			"XmlParsingError_t",
			"XmlProperty_t",
			"XmlToken_t",
			"box",
			"boxi",
			"mat4",
			"obb2",
			"quat",
			"rec",
			"reci",
			"v2",
			"v2i",
			"v3",
			"v3i",
			"v4",
			"v4i",
		],
	},
}
